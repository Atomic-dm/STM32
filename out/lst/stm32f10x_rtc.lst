   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RTC_ITConfig,"ax",%progbits
  19              		.align	2
  20              		.global	RTC_ITConfig
  21              		.thumb
  22              		.thumb_func
  24              	RTC_ITConfig:
  25              	.LFB29:
  26              		.file 1 ".\\StdPeriphLib\\src/stm32f10x_rtc.c"
   1:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
   2:.\StdPeriphLib\src/stm32f10x_rtc.c ****   ******************************************************************************
   3:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @file    stm32f10x_rtc.c
   4:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @author  MCD Application Team
   5:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @version V3.5.0
   6:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @date    11-March-2011
   7:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief   This file provides all the RTC firmware functions.
   8:.\StdPeriphLib\src/stm32f10x_rtc.c ****   ******************************************************************************
   9:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @attention
  10:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *
  11:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *
  18:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:.\StdPeriphLib\src/stm32f10x_rtc.c ****   ******************************************************************************
  20:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  21:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  22:.\StdPeriphLib\src/stm32f10x_rtc.c **** /* Includes ------------------------------------------------------------------*/
  23:.\StdPeriphLib\src/stm32f10x_rtc.c **** #include "stm32f10x_rtc.h"
  24:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  25:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  27:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  28:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  29:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @defgroup RTC 
  30:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief RTC driver modules
  31:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  32:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  33:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  34:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_TypesDefinitions
  35:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  36:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */ 
  37:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
  38:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @}
  39:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  40:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  41:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Defines
  42:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  43:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  44:.\StdPeriphLib\src/stm32f10x_rtc.c **** #define RTC_LSB_MASK     ((uint32_t)0x0000FFFF)  /*!< RTC LSB Mask */
  45:.\StdPeriphLib\src/stm32f10x_rtc.c **** #define PRLH_MSB_MASK    ((uint32_t)0x000F0000)  /*!< RTC Prescaler MSB Mask */
  46:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  47:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
  48:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @}
  49:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  50:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  51:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Macros
  52:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  53:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  54:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  55:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
  56:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @}
  57:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  58:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  59:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Variables
  60:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  61:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  62:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  63:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
  64:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @}
  65:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  66:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  67:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_FunctionPrototypes
  68:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  69:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  70:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  71:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
  72:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @}
  73:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  74:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  75:.\StdPeriphLib\src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Functions
  76:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @{
  77:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  78:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
  79:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
  80:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
  81:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupts sources to be enabled or disabled.
  82:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   This parameter can be any combination of the following values:
  83:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_OW: Overflow interrupt
  84:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_ALR: Alarm interrupt
  85:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_SEC: Second interrupt
  86:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
  87:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.
  88:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
  89:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
  90:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
  91:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
  27              		.loc 1 91 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  92:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Check the parameters */
  93:.\StdPeriphLib\src/stm32f10x_rtc.c ****   assert_param(IS_RTC_IT(RTC_IT));  
  94:.\StdPeriphLib\src/stm32f10x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  95:.\StdPeriphLib\src/stm32f10x_rtc.c ****   
  96:.\StdPeriphLib\src/stm32f10x_rtc.c ****   if (NewState != DISABLE)
  33              		.loc 1 96 0
  34 0000 29B1     		cbz	r1, .L2
  97:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
  98:.\StdPeriphLib\src/stm32f10x_rtc.c ****     RTC->CRH |= RTC_IT;
  35              		.loc 1 98 0
  36 0002 064A     		ldr	r2, .L4
  37 0004 1388     		ldrh	r3, [r2]
  38 0006 9BB2     		uxth	r3, r3
  39 0008 1843     		orrs	r0, r0, r3
  40              	.LVL1:
  41 000a 1080     		strh	r0, [r2]	@ movhi
  42 000c 7047     		bx	lr
  43              	.LVL2:
  44              	.L2:
  99:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 100:.\StdPeriphLib\src/stm32f10x_rtc.c ****   else
 101:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
 102:.\StdPeriphLib\src/stm32f10x_rtc.c ****     RTC->CRH &= (uint16_t)~RTC_IT;
  45              		.loc 1 102 0
  46 000e 034A     		ldr	r2, .L4
  47 0010 1388     		ldrh	r3, [r2]
  48 0012 9BB2     		uxth	r3, r3
  49 0014 23EA0000 		bic	r0, r3, r0
  50              	.LVL3:
  51 0018 1080     		strh	r0, [r2]	@ movhi
  52 001a 7047     		bx	lr
  53              	.L5:
  54              		.align	2
  55              	.L4:
  56 001c 00280040 		.word	1073752064
  57              		.cfi_endproc
  58              	.LFE29:
  60              		.section	.text.RTC_EnterConfigMode,"ax",%progbits
  61              		.align	2
  62              		.global	RTC_EnterConfigMode
  63              		.thumb
  64              		.thumb_func
  66              	RTC_EnterConfigMode:
  67              	.LFB30:
 103:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 104:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 105:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 106:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 107:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Enters the RTC configuration mode.
 108:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  None
 109:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 110:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 111:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_EnterConfigMode(void)
 112:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
  68              		.loc 1 112 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
 113:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Set the CNF flag to enter in the Configuration Mode */
 114:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->CRL |= RTC_CRL_CNF;
  73              		.loc 1 114 0
  74 0000 034A     		ldr	r2, .L7
  75 0002 9388     		ldrh	r3, [r2, #4]
  76 0004 9BB2     		uxth	r3, r3
  77 0006 43F01003 		orr	r3, r3, #16
  78 000a 9380     		strh	r3, [r2, #4]	@ movhi
  79 000c 7047     		bx	lr
  80              	.L8:
  81 000e 00BF     		.align	2
  82              	.L7:
  83 0010 00280040 		.word	1073752064
  84              		.cfi_endproc
  85              	.LFE30:
  87              		.section	.text.RTC_ExitConfigMode,"ax",%progbits
  88              		.align	2
  89              		.global	RTC_ExitConfigMode
  90              		.thumb
  91              		.thumb_func
  93              	RTC_ExitConfigMode:
  94              	.LFB31:
 115:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 116:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 117:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 118:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Exits from the RTC configuration mode.
 119:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  None
 120:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 121:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 122:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_ExitConfigMode(void)
 123:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
  95              		.loc 1 123 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 124:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Reset the CNF flag to exit from the Configuration Mode */
 125:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 100              		.loc 1 125 0
 101 0000 034A     		ldr	r2, .L10
 102 0002 9388     		ldrh	r3, [r2, #4]
 103 0004 23F01003 		bic	r3, r3, #16
 104 0008 1B04     		lsls	r3, r3, #16
 105 000a 1B0C     		lsrs	r3, r3, #16
 106 000c 9380     		strh	r3, [r2, #4]	@ movhi
 107 000e 7047     		bx	lr
 108              	.L11:
 109              		.align	2
 110              	.L10:
 111 0010 00280040 		.word	1073752064
 112              		.cfi_endproc
 113              	.LFE31:
 115              		.section	.text.RTC_GetCounter,"ax",%progbits
 116              		.align	2
 117              		.global	RTC_GetCounter
 118              		.thumb
 119              		.thumb_func
 121              	RTC_GetCounter:
 122              	.LFB32:
 126:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 127:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 128:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 129:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Gets the RTC counter value.
 130:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  None
 131:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval RTC counter value.
 132:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 133:.\StdPeriphLib\src/stm32f10x_rtc.c **** uint32_t RTC_GetCounter(void)
 134:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 123              		.loc 1 134 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              		@ link register save eliminated.
 128              	.LVL4:
 135:.\StdPeriphLib\src/stm32f10x_rtc.c ****   uint16_t tmp = 0;
 136:.\StdPeriphLib\src/stm32f10x_rtc.c ****   tmp = RTC->CNTL;
 129              		.loc 1 136 0
 130 0000 034A     		ldr	r2, .L13
 131 0002 938B     		ldrh	r3, [r2, #28]
 132 0004 9BB2     		uxth	r3, r3
 133              	.LVL5:
 137:.\StdPeriphLib\src/stm32f10x_rtc.c ****   return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
 134              		.loc 1 137 0
 135 0006 108B     		ldrh	r0, [r2, #24]
 138:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 136              		.loc 1 138 0
 137 0008 43EA0040 		orr	r0, r3, r0, lsl #16
 138 000c 7047     		bx	lr
 139              	.L14:
 140 000e 00BF     		.align	2
 141              	.L13:
 142 0010 00280040 		.word	1073752064
 143              		.cfi_endproc
 144              	.LFE32:
 146              		.section	.text.RTC_SetCounter,"ax",%progbits
 147              		.align	2
 148              		.global	RTC_SetCounter
 149              		.thumb
 150              		.thumb_func
 152              	RTC_SetCounter:
 153              	.LFB33:
 139:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 140:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 141:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Sets the RTC counter value.
 142:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  CounterValue: RTC counter new value.
 143:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 144:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 145:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_SetCounter(uint32_t CounterValue)
 146:.\StdPeriphLib\src/stm32f10x_rtc.c **** { 
 154              		.loc 1 146 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL6:
 159 0000 10B5     		push	{r4, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
 164 0002 0446     		mov	r4, r0
 147:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC_EnterConfigMode();
 165              		.loc 1 147 0
 166 0004 FFF7FEFF 		bl	RTC_EnterConfigMode
 167              	.LVL7:
 148:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Set RTC COUNTER MSB word */
 149:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->CNTH = CounterValue >> 16;
 168              		.loc 1 149 0
 169 0008 220C     		lsrs	r2, r4, #16
 170 000a 034B     		ldr	r3, .L17
 171 000c 1A83     		strh	r2, [r3, #24]	@ movhi
 150:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Set RTC COUNTER LSB word */
 151:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 172              		.loc 1 151 0
 173 000e A4B2     		uxth	r4, r4
 174              	.LVL8:
 175 0010 9C83     		strh	r4, [r3, #28]	@ movhi
 152:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC_ExitConfigMode();
 176              		.loc 1 152 0
 177 0012 FFF7FEFF 		bl	RTC_ExitConfigMode
 178              	.LVL9:
 179 0016 10BD     		pop	{r4, pc}
 180              	.L18:
 181              		.align	2
 182              	.L17:
 183 0018 00280040 		.word	1073752064
 184              		.cfi_endproc
 185              	.LFE33:
 187              		.section	.text.RTC_SetPrescaler,"ax",%progbits
 188              		.align	2
 189              		.global	RTC_SetPrescaler
 190              		.thumb
 191              		.thumb_func
 193              	RTC_SetPrescaler:
 194              	.LFB34:
 153:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 154:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 155:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 156:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Sets the RTC prescaler value.
 157:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  PrescalerValue: RTC prescaler new value.
 158:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 159:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 160:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_SetPrescaler(uint32_t PrescalerValue)
 161:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 195              		.loc 1 161 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              	.LVL10:
 200 0000 10B5     		push	{r4, lr}
 201              	.LCFI1:
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 4, -8
 204              		.cfi_offset 14, -4
 205 0002 0446     		mov	r4, r0
 162:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Check the parameters */
 163:.\StdPeriphLib\src/stm32f10x_rtc.c ****   assert_param(IS_RTC_PRESCALER(PrescalerValue));
 164:.\StdPeriphLib\src/stm32f10x_rtc.c ****   
 165:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC_EnterConfigMode();
 206              		.loc 1 165 0
 207 0004 FFF7FEFF 		bl	RTC_EnterConfigMode
 208              	.LVL11:
 166:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Set RTC PRESCALER MSB word */
 167:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 209              		.loc 1 167 0
 210 0008 C4F30342 		ubfx	r2, r4, #16, #4
 211 000c 034B     		ldr	r3, .L21
 212 000e 1A81     		strh	r2, [r3, #8]	@ movhi
 168:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Set RTC PRESCALER LSB word */
 169:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 213              		.loc 1 169 0
 214 0010 A4B2     		uxth	r4, r4
 215              	.LVL12:
 216 0012 9C81     		strh	r4, [r3, #12]	@ movhi
 170:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC_ExitConfigMode();
 217              		.loc 1 170 0
 218 0014 FFF7FEFF 		bl	RTC_ExitConfigMode
 219              	.LVL13:
 220 0018 10BD     		pop	{r4, pc}
 221              	.L22:
 222 001a 00BF     		.align	2
 223              	.L21:
 224 001c 00280040 		.word	1073752064
 225              		.cfi_endproc
 226              	.LFE34:
 228              		.section	.text.RTC_SetAlarm,"ax",%progbits
 229              		.align	2
 230              		.global	RTC_SetAlarm
 231              		.thumb
 232              		.thumb_func
 234              	RTC_SetAlarm:
 235              	.LFB35:
 171:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 172:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 173:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 174:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Sets the RTC alarm value.
 175:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  AlarmValue: RTC alarm new value.
 176:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 177:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 178:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_SetAlarm(uint32_t AlarmValue)
 179:.\StdPeriphLib\src/stm32f10x_rtc.c **** {  
 236              		.loc 1 179 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              	.LVL14:
 241 0000 10B5     		push	{r4, lr}
 242              	.LCFI2:
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 4, -8
 245              		.cfi_offset 14, -4
 246 0002 0446     		mov	r4, r0
 180:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC_EnterConfigMode();
 247              		.loc 1 180 0
 248 0004 FFF7FEFF 		bl	RTC_EnterConfigMode
 249              	.LVL15:
 181:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Set the ALARM MSB word */
 182:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->ALRH = AlarmValue >> 16;
 250              		.loc 1 182 0
 251 0008 220C     		lsrs	r2, r4, #16
 252 000a 034B     		ldr	r3, .L25
 253 000c 1A84     		strh	r2, [r3, #32]	@ movhi
 183:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Set the ALARM LSB word */
 184:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
 254              		.loc 1 184 0
 255 000e A4B2     		uxth	r4, r4
 256              	.LVL16:
 257 0010 9C84     		strh	r4, [r3, #36]	@ movhi
 185:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC_ExitConfigMode();
 258              		.loc 1 185 0
 259 0012 FFF7FEFF 		bl	RTC_ExitConfigMode
 260              	.LVL17:
 261 0016 10BD     		pop	{r4, pc}
 262              	.L26:
 263              		.align	2
 264              	.L25:
 265 0018 00280040 		.word	1073752064
 266              		.cfi_endproc
 267              	.LFE35:
 269              		.section	.text.RTC_GetDivider,"ax",%progbits
 270              		.align	2
 271              		.global	RTC_GetDivider
 272              		.thumb
 273              		.thumb_func
 275              	RTC_GetDivider:
 276              	.LFB36:
 186:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 187:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 188:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 189:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Gets the RTC divider value.
 190:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  None
 191:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval RTC Divider value.
 192:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 193:.\StdPeriphLib\src/stm32f10x_rtc.c **** uint32_t RTC_GetDivider(void)
 194:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 277              		.loc 1 194 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.LVL18:
 195:.\StdPeriphLib\src/stm32f10x_rtc.c ****   uint32_t tmp = 0x00;
 196:.\StdPeriphLib\src/stm32f10x_rtc.c ****   tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
 283              		.loc 1 196 0
 284 0000 044B     		ldr	r3, .L28
 285 0002 188A     		ldrh	r0, [r3, #16]
 286 0004 00F00F00 		and	r0, r0, #15
 287              	.LVL19:
 197:.\StdPeriphLib\src/stm32f10x_rtc.c ****   tmp |= RTC->DIVL;
 288              		.loc 1 197 0
 289 0008 9B8A     		ldrh	r3, [r3, #20]
 290 000a 9BB2     		uxth	r3, r3
 291              	.LVL20:
 198:.\StdPeriphLib\src/stm32f10x_rtc.c ****   return tmp;
 199:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 292              		.loc 1 199 0
 293 000c 43EA0040 		orr	r0, r3, r0, lsl #16
 294              	.LVL21:
 295 0010 7047     		bx	lr
 296              	.L29:
 297 0012 00BF     		.align	2
 298              	.L28:
 299 0014 00280040 		.word	1073752064
 300              		.cfi_endproc
 301              	.LFE36:
 303              		.section	.text.RTC_WaitForLastTask,"ax",%progbits
 304              		.align	2
 305              		.global	RTC_WaitForLastTask
 306              		.thumb
 307              		.thumb_func
 309              	RTC_WaitForLastTask:
 310              	.LFB37:
 200:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 201:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 202:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Waits until last write operation on RTC registers has finished.
 203:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @note   This function must be called before any write to RTC registers.
 204:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  None
 205:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 206:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 207:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_WaitForLastTask(void)
 208:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 311              		.loc 1 208 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 209:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Loop until RTOFF flag is set */
 210:.\StdPeriphLib\src/stm32f10x_rtc.c ****   while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 316              		.loc 1 210 0
 317 0000 034A     		ldr	r2, .L33
 318              	.L31:
 319              		.loc 1 210 0 is_stmt 0 discriminator 1
 320 0002 9388     		ldrh	r3, [r2, #4]
 321 0004 03F02003 		and	r3, r3, #32
 322 0008 9BB2     		uxth	r3, r3
 323 000a 002B     		cmp	r3, #0
 324 000c F9D0     		beq	.L31
 211:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
 212:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 213:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 325              		.loc 1 213 0 is_stmt 1
 326 000e 7047     		bx	lr
 327              	.L34:
 328              		.align	2
 329              	.L33:
 330 0010 00280040 		.word	1073752064
 331              		.cfi_endproc
 332              	.LFE37:
 334              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 335              		.align	2
 336              		.global	RTC_WaitForSynchro
 337              		.thumb
 338              		.thumb_func
 340              	RTC_WaitForSynchro:
 341              	.LFB38:
 214:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 215:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 216:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL)
 217:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   are synchronized with RTC APB clock.
 218:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @note   This function must be called before any read operation after an APB reset
 219:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   or an APB clock stop.
 220:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  None
 221:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 222:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 223:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_WaitForSynchro(void)
 224:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 342              		.loc 1 224 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 225:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Clear RSF flag */
 226:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
 347              		.loc 1 226 0
 348 0000 064A     		ldr	r2, .L38
 349 0002 9388     		ldrh	r3, [r2, #4]
 350 0004 23F00803 		bic	r3, r3, #8
 351 0008 1B04     		lsls	r3, r3, #16
 352 000a 1B0C     		lsrs	r3, r3, #16
 353 000c 9380     		strh	r3, [r2, #4]	@ movhi
 354              	.L36:
 227:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Loop until RSF flag is set */
 228:.\StdPeriphLib\src/stm32f10x_rtc.c ****   while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
 355              		.loc 1 228 0 discriminator 1
 356 000e 9388     		ldrh	r3, [r2, #4]
 357 0010 03F00803 		and	r3, r3, #8
 358 0014 9BB2     		uxth	r3, r3
 359 0016 002B     		cmp	r3, #0
 360 0018 F9D0     		beq	.L36
 229:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
 230:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 231:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 361              		.loc 1 231 0
 362 001a 7047     		bx	lr
 363              	.L39:
 364              		.align	2
 365              	.L38:
 366 001c 00280040 		.word	1073752064
 367              		.cfi_endproc
 368              	.LFE38:
 370              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 371              		.align	2
 372              		.global	RTC_GetFlagStatus
 373              		.thumb
 374              		.thumb_func
 376              	RTC_GetFlagStatus:
 377              	.LFB39:
 232:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 233:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 234:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
 235:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
 236:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   This parameter can be one the following values:
 237:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_RTOFF: RTC Operation OFF flag
 238:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_RSF: Registers Synchronized flag
 239:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_OW: Overflow flag
 240:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_ALR: Alarm flag
 241:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_SEC: Second flag
 242:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
 243:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 244:.\StdPeriphLib\src/stm32f10x_rtc.c **** FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
 245:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 378              		.loc 1 245 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              		@ link register save eliminated.
 383              	.LVL22:
 246:.\StdPeriphLib\src/stm32f10x_rtc.c ****   FlagStatus bitstatus = RESET;
 247:.\StdPeriphLib\src/stm32f10x_rtc.c ****   
 248:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Check the parameters */
 249:.\StdPeriphLib\src/stm32f10x_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
 250:.\StdPeriphLib\src/stm32f10x_rtc.c ****   
 251:.\StdPeriphLib\src/stm32f10x_rtc.c ****   if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
 384              		.loc 1 251 0
 385 0000 034B     		ldr	r3, .L41
 386 0002 9B88     		ldrh	r3, [r3, #4]
 387              	.LVL23:
 388 0004 1842     		tst	r0, r3
 252:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
 253:.\StdPeriphLib\src/stm32f10x_rtc.c ****     bitstatus = SET;
 254:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 255:.\StdPeriphLib\src/stm32f10x_rtc.c ****   else
 256:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
 257:.\StdPeriphLib\src/stm32f10x_rtc.c ****     bitstatus = RESET;
 258:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 259:.\StdPeriphLib\src/stm32f10x_rtc.c ****   return bitstatus;
 260:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 389              		.loc 1 260 0
 390 0006 14BF     		ite	ne
 391 0008 0120     		movne	r0, #1
 392              	.LVL24:
 393 000a 0020     		moveq	r0, #0
 394 000c 7047     		bx	lr
 395              	.L42:
 396 000e 00BF     		.align	2
 397              	.L41:
 398 0010 00280040 		.word	1073752064
 399              		.cfi_endproc
 400              	.LFE39:
 402              		.section	.text.RTC_ClearFlag,"ax",%progbits
 403              		.align	2
 404              		.global	RTC_ClearFlag
 405              		.thumb
 406              		.thumb_func
 408              	RTC_ClearFlag:
 409              	.LFB40:
 261:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 262:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 263:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Clears the RTC's pending flags.
 264:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  RTC_FLAG: specifies the flag to clear.
 265:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   This parameter can be any combination of the following values:
 266:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_RSF: Registers Synchronized flag. This flag is cleared only after
 267:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *                        an APB reset or an APB Clock stop.
 268:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_OW: Overflow flag
 269:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_ALR: Alarm flag
 270:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_SEC: Second flag
 271:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 272:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 273:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_ClearFlag(uint16_t RTC_FLAG)
 274:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 410              		.loc 1 274 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 415              	.LVL25:
 275:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Check the parameters */
 276:.\StdPeriphLib\src/stm32f10x_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
 277:.\StdPeriphLib\src/stm32f10x_rtc.c ****     
 278:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Clear the corresponding RTC flag */
 279:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~RTC_FLAG;
 416              		.loc 1 279 0
 417 0000 034A     		ldr	r2, .L44
 418 0002 9388     		ldrh	r3, [r2, #4]
 419 0004 9BB2     		uxth	r3, r3
 420 0006 23EA0000 		bic	r0, r3, r0
 421              	.LVL26:
 422 000a 9080     		strh	r0, [r2, #4]	@ movhi
 423 000c 7047     		bx	lr
 424              	.L45:
 425 000e 00BF     		.align	2
 426              	.L44:
 427 0010 00280040 		.word	1073752064
 428              		.cfi_endproc
 429              	.LFE40:
 431              		.section	.text.RTC_GetITStatus,"ax",%progbits
 432              		.align	2
 433              		.global	RTC_GetITStatus
 434              		.thumb
 435              		.thumb_func
 437              	RTC_GetITStatus:
 438              	.LFB41:
 280:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 281:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 282:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 283:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
 284:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupts sources to check.
 285:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   This parameter can be one of the following values:
 286:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_OW: Overflow interrupt
 287:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_ALR: Alarm interrupt
 288:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_SEC: Second interrupt
 289:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval The new state of the RTC_IT (SET or RESET).
 290:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 291:.\StdPeriphLib\src/stm32f10x_rtc.c **** ITStatus RTC_GetITStatus(uint16_t RTC_IT)
 292:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 439              		.loc 1 292 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444              	.LVL27:
 293:.\StdPeriphLib\src/stm32f10x_rtc.c ****   ITStatus bitstatus = RESET;
 294:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Check the parameters */
 295:.\StdPeriphLib\src/stm32f10x_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT)); 
 296:.\StdPeriphLib\src/stm32f10x_rtc.c ****   
 297:.\StdPeriphLib\src/stm32f10x_rtc.c ****   bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
 445              		.loc 1 297 0
 446 0000 074A     		ldr	r2, .L49
 447 0002 9388     		ldrh	r3, [r2, #4]
 448 0004 9BB2     		uxth	r3, r3
 449              	.LVL28:
 298:.\StdPeriphLib\src/stm32f10x_rtc.c ****   if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
 450              		.loc 1 298 0
 451 0006 1288     		ldrh	r2, [r2]
 452 0008 1042     		tst	r0, r2
 453 000a 06D0     		beq	.L48
 297:.\StdPeriphLib\src/stm32f10x_rtc.c ****   if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
 454              		.loc 1 297 0 discriminator 1
 455 000c 0340     		ands	r3, r3, r0
 456              	.LVL29:
 457              		.loc 1 298 0 discriminator 1
 458 000e 13F0FF0F 		tst	r3, #255
 459 0012 14BF     		ite	ne
 460 0014 0120     		movne	r0, #1
 461              	.LVL30:
 462 0016 0020     		moveq	r0, #0
 463 0018 7047     		bx	lr
 464              	.LVL31:
 465              	.L48:
 299:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
 300:.\StdPeriphLib\src/stm32f10x_rtc.c ****     bitstatus = SET;
 301:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 302:.\StdPeriphLib\src/stm32f10x_rtc.c ****   else
 303:.\StdPeriphLib\src/stm32f10x_rtc.c ****   {
 304:.\StdPeriphLib\src/stm32f10x_rtc.c ****     bitstatus = RESET;
 466              		.loc 1 304 0
 467 001a 0020     		movs	r0, #0
 468              	.LVL32:
 305:.\StdPeriphLib\src/stm32f10x_rtc.c ****   }
 306:.\StdPeriphLib\src/stm32f10x_rtc.c ****   return bitstatus;
 307:.\StdPeriphLib\src/stm32f10x_rtc.c **** }
 469              		.loc 1 307 0
 470 001c 7047     		bx	lr
 471              	.L50:
 472 001e 00BF     		.align	2
 473              	.L49:
 474 0020 00280040 		.word	1073752064
 475              		.cfi_endproc
 476              	.LFE41:
 478              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 479              		.align	2
 480              		.global	RTC_ClearITPendingBit
 481              		.thumb
 482              		.thumb_func
 484              	RTC_ClearITPendingBit:
 485              	.LFB42:
 308:.\StdPeriphLib\src/stm32f10x_rtc.c **** 
 309:.\StdPeriphLib\src/stm32f10x_rtc.c **** /**
 310:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
 311:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @param  RTC_IT: specifies the interrupt pending bit to clear.
 312:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *   This parameter can be any combination of the following values:
 313:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_OW: Overflow interrupt
 314:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_ALR: Alarm interrupt
 315:.\StdPeriphLib\src/stm32f10x_rtc.c ****   *     @arg RTC_IT_SEC: Second interrupt
 316:.\StdPeriphLib\src/stm32f10x_rtc.c ****   * @retval None
 317:.\StdPeriphLib\src/stm32f10x_rtc.c ****   */
 318:.\StdPeriphLib\src/stm32f10x_rtc.c **** void RTC_ClearITPendingBit(uint16_t RTC_IT)
 319:.\StdPeriphLib\src/stm32f10x_rtc.c **** {
 486              		.loc 1 319 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL33:
 320:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Check the parameters */
 321:.\StdPeriphLib\src/stm32f10x_rtc.c ****   assert_param(IS_RTC_IT(RTC_IT));  
 322:.\StdPeriphLib\src/stm32f10x_rtc.c ****   
 323:.\StdPeriphLib\src/stm32f10x_rtc.c ****   /* Clear the corresponding RTC pending bit */
 324:.\StdPeriphLib\src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~RTC_IT;
 492              		.loc 1 324 0
 493 0000 034A     		ldr	r2, .L52
 494 0002 9388     		ldrh	r3, [r2, #4]
 495 0004 9BB2     		uxth	r3, r3
 496 0006 23EA0000 		bic	r0, r3, r0
 497              	.LVL34:
 498 000a 9080     		strh	r0, [r2, #4]	@ movhi
 499 000c 7047     		bx	lr
 500              	.L53:
 501 000e 00BF     		.align	2
 502              	.L52:
 503 0010 00280040 		.word	1073752064
 504              		.cfi_endproc
 505              	.LFE42:
 507              		.text
 508              	.Letext0:
 509              		.file 2 "c:\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\machine\\_de
 510              		.file 3 "c:\\sublime text build 3126\\gnu tools arm embedded\\arm-none-eabi\\include\\sys\\_stdint
 511              		.file 4 ".\\CMSIS/stm32f10x.h"
 512              		.file 5 ".\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rtc.c
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:19     .text.RTC_ITConfig:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:24     .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:56     .text.RTC_ITConfig:0000001c $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:61     .text.RTC_EnterConfigMode:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:66     .text.RTC_EnterConfigMode:00000000 RTC_EnterConfigMode
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:83     .text.RTC_EnterConfigMode:00000010 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:88     .text.RTC_ExitConfigMode:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:93     .text.RTC_ExitConfigMode:00000000 RTC_ExitConfigMode
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:111    .text.RTC_ExitConfigMode:00000010 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:116    .text.RTC_GetCounter:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:121    .text.RTC_GetCounter:00000000 RTC_GetCounter
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:142    .text.RTC_GetCounter:00000010 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:147    .text.RTC_SetCounter:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:152    .text.RTC_SetCounter:00000000 RTC_SetCounter
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:183    .text.RTC_SetCounter:00000018 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:188    .text.RTC_SetPrescaler:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:193    .text.RTC_SetPrescaler:00000000 RTC_SetPrescaler
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:224    .text.RTC_SetPrescaler:0000001c $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:229    .text.RTC_SetAlarm:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:234    .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:265    .text.RTC_SetAlarm:00000018 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:270    .text.RTC_GetDivider:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:275    .text.RTC_GetDivider:00000000 RTC_GetDivider
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:299    .text.RTC_GetDivider:00000014 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:304    .text.RTC_WaitForLastTask:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:309    .text.RTC_WaitForLastTask:00000000 RTC_WaitForLastTask
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:330    .text.RTC_WaitForLastTask:00000010 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:335    .text.RTC_WaitForSynchro:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:340    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:366    .text.RTC_WaitForSynchro:0000001c $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:371    .text.RTC_GetFlagStatus:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:376    .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:398    .text.RTC_GetFlagStatus:00000010 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:403    .text.RTC_ClearFlag:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:408    .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:427    .text.RTC_ClearFlag:00000010 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:432    .text.RTC_GetITStatus:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:437    .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:474    .text.RTC_GetITStatus:00000020 $d
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:479    .text.RTC_ClearITPendingBit:00000000 $t
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:484    .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\DOCUME~1\C4C4~1\LOCALS~1\Temp\ccaKuYxh.s:503    .text.RTC_ClearITPendingBit:00000010 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
