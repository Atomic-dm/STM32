   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ff.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.mem_cpy,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	mem_cpy:
  24              	.LFB29:
  25              		.file 1 ".\\FatFs/ff.c"
   1:.\FatFs/ff.c  **** /*----------------------------------------------------------------------------/
   2:.\FatFs/ff.c  **** /  FatFs - FAT file system module  R0.07e                    (C)ChaN, 2009
   3:.\FatFs/ff.c  **** /-----------------------------------------------------------------------------/
   4:.\FatFs/ff.c  **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:.\FatFs/ff.c  **** / This is a free software that opened for education, research and commercial
   6:.\FatFs/ff.c  **** / developments under license policy of following terms.
   7:.\FatFs/ff.c  **** /
   8:.\FatFs/ff.c  **** /  Copyright (C) 2009, ChaN, all right reserved.
   9:.\FatFs/ff.c  **** /
  10:.\FatFs/ff.c  **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:.\FatFs/ff.c  **** / * No restriction on use. You can use, modify and redistribute it for
  12:.\FatFs/ff.c  **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:.\FatFs/ff.c  **** / * Redistributions of source code must retain the above copyright notice.
  14:.\FatFs/ff.c  **** /
  15:.\FatFs/ff.c  **** /-----------------------------------------------------------------------------/
  16:.\FatFs/ff.c  **** / Feb 26,'06 R0.00  Prototype.
  17:.\FatFs/ff.c  **** /
  18:.\FatFs/ff.c  **** / Apr 29,'06 R0.01  First stable version.
  19:.\FatFs/ff.c  **** /
  20:.\FatFs/ff.c  **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:.\FatFs/ff.c  **** /                   Removed unbuffered mode.
  22:.\FatFs/ff.c  **** /                   Fixed a problem on small (<32M) partition.
  23:.\FatFs/ff.c  **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:.\FatFs/ff.c  **** /
  25:.\FatFs/ff.c  **** / Sep 22,'06 R0.03  Added f_rename().
  26:.\FatFs/ff.c  **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:.\FatFs/ff.c  **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:.\FatFs/ff.c  **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:.\FatFs/ff.c  **** /
  30:.\FatFs/ff.c  **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:.\FatFs/ff.c  **** /                   Changed some interfaces for multiple drive system.
  32:.\FatFs/ff.c  **** /                   Changed f_mountdrv() to f_mount().
  33:.\FatFs/ff.c  **** /                   Added f_mkfs().
  34:.\FatFs/ff.c  **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:.\FatFs/ff.c  **** /                   Added a capability of extending file size to f_lseek().
  36:.\FatFs/ff.c  **** /                   Added minimization level 3.
  37:.\FatFs/ff.c  **** /                   Fixed an endian sensitive code in f_mkfs().
  38:.\FatFs/ff.c  **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:.\FatFs/ff.c  **** /                   Added FSInfo support.
  40:.\FatFs/ff.c  **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:.\FatFs/ff.c  **** /                   Fixed short seek (<= csize) collapses the file object.
  42:.\FatFs/ff.c  **** /
  43:.\FatFs/ff.c  **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:.\FatFs/ff.c  **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:.\FatFs/ff.c  **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:.\FatFs/ff.c  **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:.\FatFs/ff.c  **** /                   Fixed off by one error at FAT sub-type determination.
  48:.\FatFs/ff.c  **** /                   Fixed btr in f_read() can be mistruncated.
  49:.\FatFs/ff.c  **** /                   Fixed cached sector is not flushed when create and close
  50:.\FatFs/ff.c  **** /                   without write.
  51:.\FatFs/ff.c  **** /
  52:.\FatFs/ff.c  **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  53:.\FatFs/ff.c  **** /                   Improved performance of f_lseek() on moving to the same
  54:.\FatFs/ff.c  **** /                   or following cluster.
  55:.\FatFs/ff.c  **** /
  56:.\FatFs/ff.c  **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a buffer configuration option.
  57:.\FatFs/ff.c  **** /                   Added long file name support.
  58:.\FatFs/ff.c  **** /                   Added multiple code page support.
  59:.\FatFs/ff.c  **** /                   Added re-entrancy for multitask operation.
  60:.\FatFs/ff.c  **** /                   Added auto cluster size selection to f_mkfs().
  61:.\FatFs/ff.c  **** /                   Added rewind option to f_readdir().
  62:.\FatFs/ff.c  **** /                   Changed result code of critical errors.
  63:.\FatFs/ff.c  **** /                   Renamed string functions to avoid name collision.
  64:.\FatFs/ff.c  **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  65:.\FatFs/ff.c  **** /                   Added multiple sector size support.
  66:.\FatFs/ff.c  **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  67:.\FatFs/ff.c  **** /                   Fixed wrong cache control in f_lseek().
  68:.\FatFs/ff.c  **** /                   Added relative path feature.
  69:.\FatFs/ff.c  **** /                   Added f_chdir() and f_chdrive().
  70:.\FatFs/ff.c  **** /                   Added proper case conversion to extended char.
  71:.\FatFs/ff.c  **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  72:.\FatFs/ff.c  **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  73:.\FatFs/ff.c  **** /                   Fixed name matching error on the 13 char boundary.
  74:.\FatFs/ff.c  **** /                   Added a configuration option, _LFN_UNICODE.
  75:.\FatFs/ff.c  **** /                   Changed f_readdir() to return the SFN with always upper
  76:.\FatFs/ff.c  **** /                   case on non-LFN cfg.
  77:.\FatFs/ff.c  **** /---------------------------------------------------------------------------*/
  78:.\FatFs/ff.c  **** 
  79:.\FatFs/ff.c  **** #include "ff.h"			/* FatFs configurations and declarations */
  80:.\FatFs/ff.c  **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  81:.\FatFs/ff.c  **** 
  82:.\FatFs/ff.c  **** /*--------------------------------------------------------------------------
  83:.\FatFs/ff.c  **** 
  84:.\FatFs/ff.c  ****    Module Private Definitions
  85:.\FatFs/ff.c  **** 
  86:.\FatFs/ff.c  **** ---------------------------------------------------------------------------*/
  87:.\FatFs/ff.c  **** 
  88:.\FatFs/ff.c  **** #if _FATFS != 0x007E
  89:.\FatFs/ff.c  **** #error Wrong include file (ff.h).
  90:.\FatFs/ff.c  **** #endif
  91:.\FatFs/ff.c  **** 
  92:.\FatFs/ff.c  **** #if _FS_REENTRANT
  93:.\FatFs/ff.c  **** #if _USE_LFN == 1
  94:.\FatFs/ff.c  **** #error Static LFN work area must not be used in re-entrant configuration.
  95:.\FatFs/ff.c  **** #endif
  96:.\FatFs/ff.c  **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
  97:.\FatFs/ff.c  **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
  98:.\FatFs/ff.c  **** 
  99:.\FatFs/ff.c  **** #else
 100:.\FatFs/ff.c  **** #define	ENTER_FF(fs)
 101:.\FatFs/ff.c  **** #define LEAVE_FF(fs, res)	return res
 102:.\FatFs/ff.c  **** 
 103:.\FatFs/ff.c  **** #endif
 104:.\FatFs/ff.c  **** 
 105:.\FatFs/ff.c  **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 106:.\FatFs/ff.c  **** 
 107:.\FatFs/ff.c  **** #ifndef NULL
 108:.\FatFs/ff.c  **** #define	NULL	0
 109:.\FatFs/ff.c  **** #endif
 110:.\FatFs/ff.c  **** 
 111:.\FatFs/ff.c  **** /* Name status flags */
 112:.\FatFs/ff.c  **** #define NS			11		/* Offset of name status byte */
 113:.\FatFs/ff.c  **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 114:.\FatFs/ff.c  **** #define NS_LFN		0x02	/* Force to create LFN entry */
 115:.\FatFs/ff.c  **** #define NS_LAST		0x04	/* Last segment */
 116:.\FatFs/ff.c  **** #define NS_BODY		0x08	/* Lower case flag (body) */
 117:.\FatFs/ff.c  **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 118:.\FatFs/ff.c  **** #define NS_DOT		0x20	/* Dot entry */
 119:.\FatFs/ff.c  **** 
 120:.\FatFs/ff.c  **** 
 121:.\FatFs/ff.c  **** 
 122:.\FatFs/ff.c  **** 
 123:.\FatFs/ff.c  **** /*--------------------------------------------------------------------------
 124:.\FatFs/ff.c  **** 
 125:.\FatFs/ff.c  ****    Private Work Area
 126:.\FatFs/ff.c  **** 
 127:.\FatFs/ff.c  **** ---------------------------------------------------------------------------*/
 128:.\FatFs/ff.c  **** 
 129:.\FatFs/ff.c  **** #if _DRIVES < 1 || _DRIVES > 9
 130:.\FatFs/ff.c  **** #error Number of drives must be 1-9.
 131:.\FatFs/ff.c  **** #endif
 132:.\FatFs/ff.c  **** static
 133:.\FatFs/ff.c  **** FATFS *FatFs[_DRIVES];	/* Pointer to the file system objects (logical drives) */
 134:.\FatFs/ff.c  **** 
 135:.\FatFs/ff.c  **** static
 136:.\FatFs/ff.c  **** WORD Fsid;				/* File system mount ID */
 137:.\FatFs/ff.c  **** 
 138:.\FatFs/ff.c  **** #if _FS_RPATH
 139:.\FatFs/ff.c  **** static
 140:.\FatFs/ff.c  **** BYTE Drive;				/* Current drive */
 141:.\FatFs/ff.c  **** #endif
 142:.\FatFs/ff.c  **** 
 143:.\FatFs/ff.c  **** 
 144:.\FatFs/ff.c  **** #if _USE_LFN == 1	/* LFN with static LFN working buffer */
 145:.\FatFs/ff.c  **** static
 146:.\FatFs/ff.c  **** WCHAR LfnBuf[_MAX_LFN + 1];
 147:.\FatFs/ff.c  **** #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR *lp = LfnBuf
 148:.\FatFs/ff.c  **** #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
 149:.\FatFs/ff.c  **** 
 150:.\FatFs/ff.c  **** #elif _USE_LFN > 1	/* LFN with dynamic LFN working buffer */
 151:.\FatFs/ff.c  **** #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR lbuf[_MAX_LFN + 1], *lp = lbuf
 152:.\FatFs/ff.c  **** #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
 153:.\FatFs/ff.c  **** 
 154:.\FatFs/ff.c  **** #else				/* No LFN */
 155:.\FatFs/ff.c  **** #define	NAMEBUF(sp,lp)	BYTE sp[12]
 156:.\FatFs/ff.c  **** #define INITBUF(dj,sp,lp)	dj.fn = sp
 157:.\FatFs/ff.c  **** 
 158:.\FatFs/ff.c  **** #endif
 159:.\FatFs/ff.c  **** 
 160:.\FatFs/ff.c  **** 
 161:.\FatFs/ff.c  **** 
 162:.\FatFs/ff.c  **** 
 163:.\FatFs/ff.c  **** /*--------------------------------------------------------------------------
 164:.\FatFs/ff.c  **** 
 165:.\FatFs/ff.c  ****    Module Private Functions
 166:.\FatFs/ff.c  **** 
 167:.\FatFs/ff.c  **** ---------------------------------------------------------------------------*/
 168:.\FatFs/ff.c  **** 
 169:.\FatFs/ff.c  **** 
 170:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 171:.\FatFs/ff.c  **** /* String functions                                                      */
 172:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 173:.\FatFs/ff.c  **** 
 174:.\FatFs/ff.c  **** /* Copy memory to memory */
 175:.\FatFs/ff.c  **** static
 176:.\FatFs/ff.c  **** void mem_cpy (void* dst, const void* src, int cnt) {
  26              		.loc 1 176 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 177:.\FatFs/ff.c  **** 	char *d = (char*)dst;
 178:.\FatFs/ff.c  **** 	const char *s = (const char *)src;
 179:.\FatFs/ff.c  **** 	while (cnt--) *d++ = *s++;
  32              		.loc 1 179 0
  33 0000 3AB1     		cbz	r2, .L1
  34 0002 0138     		subs	r0, r0, #1
  35              	.LVL1:
  36 0004 8A18     		adds	r2, r1, r2
  37              	.LVL2:
  38              	.L3:
  39              		.loc 1 179 0 is_stmt 0 discriminator 2
  40 0006 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
  41              	.LVL3:
  42 000a 00F8013F 		strb	r3, [r0, #1]!
  43              	.LVL4:
  44 000e 9142     		cmp	r1, r2
  45 0010 F9D1     		bne	.L3
  46              	.LVL5:
  47              	.L1:
  48 0012 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE29:
  52              		.section	.text.mem_set,"ax",%progbits
  53              		.align	2
  54              		.thumb
  55              		.thumb_func
  57              	mem_set:
  58              	.LFB30:
 180:.\FatFs/ff.c  **** }
 181:.\FatFs/ff.c  **** 
 182:.\FatFs/ff.c  **** /* Fill memory */
 183:.\FatFs/ff.c  **** static
 184:.\FatFs/ff.c  **** void mem_set (void* dst, int val, int cnt) {
  59              		.loc 1 184 0 is_stmt 1
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL6:
 185:.\FatFs/ff.c  **** 	char *d = (char*)dst;
 186:.\FatFs/ff.c  **** 	while (cnt--) *d++ = (char)val;
  65              		.loc 1 186 0
  66 0000 22B1     		cbz	r2, .L5
  67 0002 8218     		adds	r2, r0, r2
  68              	.LVL7:
  69              	.L7:
  70              		.loc 1 186 0 is_stmt 0 discriminator 2
  71 0004 00F8011B 		strb	r1, [r0], #1
  72              	.LVL8:
  73 0008 9042     		cmp	r0, r2
  74 000a FBD1     		bne	.L7
  75              	.LVL9:
  76              	.L5:
  77 000c 7047     		bx	lr
  78              		.cfi_endproc
  79              	.LFE30:
  81 000e 00BF     		.section	.text.sum_sfn,"ax",%progbits
  82              		.align	2
  83              		.thumb
  84              		.thumb_func
  86              	sum_sfn:
  87              	.LFB46:
 187:.\FatFs/ff.c  **** }
 188:.\FatFs/ff.c  **** 
 189:.\FatFs/ff.c  **** /* Compare memory to memory */
 190:.\FatFs/ff.c  **** static
 191:.\FatFs/ff.c  **** int mem_cmp (const void* dst, const void* src, int cnt) {
 192:.\FatFs/ff.c  **** 	const char *d = (const char *)dst, *s = (const char *)src;
 193:.\FatFs/ff.c  **** 	int r = 0;
 194:.\FatFs/ff.c  **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 195:.\FatFs/ff.c  **** 	return r;
 196:.\FatFs/ff.c  **** }
 197:.\FatFs/ff.c  **** 
 198:.\FatFs/ff.c  **** /* Check if chr is contained in the string */
 199:.\FatFs/ff.c  **** static
 200:.\FatFs/ff.c  **** int chk_chr (const char* str, int chr) {
 201:.\FatFs/ff.c  **** 	while (*str && *str != chr) str++;
 202:.\FatFs/ff.c  **** 	return *str;
 203:.\FatFs/ff.c  **** }
 204:.\FatFs/ff.c  **** 
 205:.\FatFs/ff.c  **** 
 206:.\FatFs/ff.c  **** 
 207:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 208:.\FatFs/ff.c  **** /* Request/Release grant to access the volume                            */
 209:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 210:.\FatFs/ff.c  **** #if _FS_REENTRANT
 211:.\FatFs/ff.c  **** 
 212:.\FatFs/ff.c  **** static
 213:.\FatFs/ff.c  **** BOOL lock_fs (
 214:.\FatFs/ff.c  **** 	FATFS *fs		/* File system object */
 215:.\FatFs/ff.c  **** )
 216:.\FatFs/ff.c  **** {
 217:.\FatFs/ff.c  **** 	return ff_req_grant(fs->sobj);
 218:.\FatFs/ff.c  **** }
 219:.\FatFs/ff.c  **** 
 220:.\FatFs/ff.c  **** 
 221:.\FatFs/ff.c  **** static
 222:.\FatFs/ff.c  **** void unlock_fs (
 223:.\FatFs/ff.c  **** 	FATFS *fs,		/* File system object */
 224:.\FatFs/ff.c  **** 	FRESULT res		/* Result code to be returned */
 225:.\FatFs/ff.c  **** )
 226:.\FatFs/ff.c  **** {
 227:.\FatFs/ff.c  **** 	if (res != FR_NOT_ENABLED &&
 228:.\FatFs/ff.c  **** 		res != FR_INVALID_DRIVE &&
 229:.\FatFs/ff.c  **** 		res != FR_INVALID_OBJECT &&
 230:.\FatFs/ff.c  **** 		res != FR_TIMEOUT) {
 231:.\FatFs/ff.c  **** 		ff_rel_grant(fs->sobj);
 232:.\FatFs/ff.c  **** 	}
 233:.\FatFs/ff.c  **** }
 234:.\FatFs/ff.c  **** #endif
 235:.\FatFs/ff.c  **** 
 236:.\FatFs/ff.c  **** 
 237:.\FatFs/ff.c  **** 
 238:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 239:.\FatFs/ff.c  **** /* Change window offset                                                  */
 240:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 241:.\FatFs/ff.c  **** 
 242:.\FatFs/ff.c  **** static
 243:.\FatFs/ff.c  **** FRESULT move_window (
 244:.\FatFs/ff.c  **** 	FATFS *fs,		/* File system object */
 245:.\FatFs/ff.c  **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 246:.\FatFs/ff.c  **** )					/* Move to zero only writes back dirty window */
 247:.\FatFs/ff.c  **** {
 248:.\FatFs/ff.c  **** 	DWORD wsect;
 249:.\FatFs/ff.c  **** 
 250:.\FatFs/ff.c  **** 
 251:.\FatFs/ff.c  **** 	wsect = fs->winsect;
 252:.\FatFs/ff.c  **** 	if (wsect != sector) {	/* Changed current window */
 253:.\FatFs/ff.c  **** #if !_FS_READONLY
 254:.\FatFs/ff.c  **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 255:.\FatFs/ff.c  **** 			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 256:.\FatFs/ff.c  **** 				return FR_DISK_ERR;
 257:.\FatFs/ff.c  **** 			fs->wflag = 0;
 258:.\FatFs/ff.c  **** 			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 259:.\FatFs/ff.c  **** 				BYTE nf;
 260:.\FatFs/ff.c  **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 261:.\FatFs/ff.c  **** 					wsect += fs->sects_fat;
 262:.\FatFs/ff.c  **** 					disk_write(fs->drive, fs->win, wsect, 1);
 263:.\FatFs/ff.c  **** 				}
 264:.\FatFs/ff.c  **** 			}
 265:.\FatFs/ff.c  **** 		}
 266:.\FatFs/ff.c  **** #endif
 267:.\FatFs/ff.c  **** 		if (sector) {
 268:.\FatFs/ff.c  **** 			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 269:.\FatFs/ff.c  **** 				return FR_DISK_ERR;
 270:.\FatFs/ff.c  **** 			fs->winsect = sector;
 271:.\FatFs/ff.c  **** 		}
 272:.\FatFs/ff.c  **** 	}
 273:.\FatFs/ff.c  **** 
 274:.\FatFs/ff.c  **** 	return FR_OK;
 275:.\FatFs/ff.c  **** }
 276:.\FatFs/ff.c  **** 
 277:.\FatFs/ff.c  **** 
 278:.\FatFs/ff.c  **** 
 279:.\FatFs/ff.c  **** 
 280:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 281:.\FatFs/ff.c  **** /* Clean-up cached data                                                  */
 282:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 283:.\FatFs/ff.c  **** #if !_FS_READONLY
 284:.\FatFs/ff.c  **** static
 285:.\FatFs/ff.c  **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 286:.\FatFs/ff.c  **** 	FATFS *fs	/* File system object */
 287:.\FatFs/ff.c  **** )
 288:.\FatFs/ff.c  **** {
 289:.\FatFs/ff.c  **** 	FRESULT res;
 290:.\FatFs/ff.c  **** 
 291:.\FatFs/ff.c  **** 
 292:.\FatFs/ff.c  **** 	res = move_window(fs, 0);
 293:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 294:.\FatFs/ff.c  **** 		/* Update FSInfo sector if needed */
 295:.\FatFs/ff.c  **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 296:.\FatFs/ff.c  **** 			fs->winsect = 0;
 297:.\FatFs/ff.c  **** 			mem_set(fs->win, 0, 512);
 298:.\FatFs/ff.c  **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 299:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 300:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 301:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 302:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 303:.\FatFs/ff.c  **** 			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 304:.\FatFs/ff.c  **** 			fs->fsi_flag = 0;
 305:.\FatFs/ff.c  **** 		}
 306:.\FatFs/ff.c  **** 		/* Make sure that no pending write process in the physical drive */
 307:.\FatFs/ff.c  **** 		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 308:.\FatFs/ff.c  **** 			res = FR_DISK_ERR;
 309:.\FatFs/ff.c  **** 	}
 310:.\FatFs/ff.c  **** 
 311:.\FatFs/ff.c  **** 	return res;
 312:.\FatFs/ff.c  **** }
 313:.\FatFs/ff.c  **** #endif
 314:.\FatFs/ff.c  **** 
 315:.\FatFs/ff.c  **** 
 316:.\FatFs/ff.c  **** 
 317:.\FatFs/ff.c  **** 
 318:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 319:.\FatFs/ff.c  **** /* FAT access - Read value of a FAT entry                                */
 320:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 321:.\FatFs/ff.c  **** 
 322:.\FatFs/ff.c  **** 
 323:.\FatFs/ff.c  **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 324:.\FatFs/ff.c  **** 	FATFS *fs,	/* File system object */
 325:.\FatFs/ff.c  **** 	DWORD clst	/* Cluster# to get the link information */
 326:.\FatFs/ff.c  **** )
 327:.\FatFs/ff.c  **** {
 328:.\FatFs/ff.c  **** 	UINT wc, bc;
 329:.\FatFs/ff.c  **** 	DWORD fsect;
 330:.\FatFs/ff.c  **** 
 331:.\FatFs/ff.c  **** 
 332:.\FatFs/ff.c  **** 	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 333:.\FatFs/ff.c  **** 		return 1;
 334:.\FatFs/ff.c  **** 
 335:.\FatFs/ff.c  **** 	fsect = fs->fatbase;
 336:.\FatFs/ff.c  **** 	switch (fs->fs_type) {
 337:.\FatFs/ff.c  **** 	case FS_FAT12 :
 338:.\FatFs/ff.c  **** 		bc = clst; bc += bc / 2;
 339:.\FatFs/ff.c  **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 340:.\FatFs/ff.c  **** 		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 341:.\FatFs/ff.c  **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 342:.\FatFs/ff.c  **** 		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 343:.\FatFs/ff.c  **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 344:.\FatFs/ff.c  **** 
 345:.\FatFs/ff.c  **** 	case FS_FAT16 :
 346:.\FatFs/ff.c  **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 347:.\FatFs/ff.c  **** 		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 348:.\FatFs/ff.c  **** 
 349:.\FatFs/ff.c  **** 	case FS_FAT32 :
 350:.\FatFs/ff.c  **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 351:.\FatFs/ff.c  **** 		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 352:.\FatFs/ff.c  **** 	}
 353:.\FatFs/ff.c  **** 
 354:.\FatFs/ff.c  **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 355:.\FatFs/ff.c  **** }
 356:.\FatFs/ff.c  **** 
 357:.\FatFs/ff.c  **** 
 358:.\FatFs/ff.c  **** 
 359:.\FatFs/ff.c  **** 
 360:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 361:.\FatFs/ff.c  **** /* FAT access - Change value of a FAT entry                              */
 362:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 363:.\FatFs/ff.c  **** #if !_FS_READONLY
 364:.\FatFs/ff.c  **** 
 365:.\FatFs/ff.c  **** FRESULT put_fat (
 366:.\FatFs/ff.c  **** 	FATFS *fs,	/* File system object */
 367:.\FatFs/ff.c  **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
 368:.\FatFs/ff.c  **** 	DWORD val	/* New value to mark the cluster */
 369:.\FatFs/ff.c  **** )
 370:.\FatFs/ff.c  **** {
 371:.\FatFs/ff.c  **** 	UINT bc;
 372:.\FatFs/ff.c  **** 	BYTE *p;
 373:.\FatFs/ff.c  **** 	DWORD fsect;
 374:.\FatFs/ff.c  **** 	FRESULT res;
 375:.\FatFs/ff.c  **** 
 376:.\FatFs/ff.c  **** 
 377:.\FatFs/ff.c  **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 378:.\FatFs/ff.c  **** 		res = FR_INT_ERR;
 379:.\FatFs/ff.c  **** 
 380:.\FatFs/ff.c  **** 	} else {
 381:.\FatFs/ff.c  **** 		fsect = fs->fatbase;
 382:.\FatFs/ff.c  **** 		switch (fs->fs_type) {
 383:.\FatFs/ff.c  **** 		case FS_FAT12 :
 384:.\FatFs/ff.c  **** 			bc = clst; bc += bc / 2;
 385:.\FatFs/ff.c  **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 386:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 387:.\FatFs/ff.c  **** 			p = &fs->win[bc & (SS(fs) - 1)];
 388:.\FatFs/ff.c  **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 389:.\FatFs/ff.c  **** 			bc++;
 390:.\FatFs/ff.c  **** 			fs->wflag = 1;
 391:.\FatFs/ff.c  **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 392:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 393:.\FatFs/ff.c  **** 			p = &fs->win[bc & (SS(fs) - 1)];
 394:.\FatFs/ff.c  **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 395:.\FatFs/ff.c  **** 			break;
 396:.\FatFs/ff.c  **** 
 397:.\FatFs/ff.c  **** 		case FS_FAT16 :
 398:.\FatFs/ff.c  **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 399:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 400:.\FatFs/ff.c  **** 			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 401:.\FatFs/ff.c  **** 			break;
 402:.\FatFs/ff.c  **** 
 403:.\FatFs/ff.c  **** 		case FS_FAT32 :
 404:.\FatFs/ff.c  **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 405:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 406:.\FatFs/ff.c  **** 			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 407:.\FatFs/ff.c  **** 			break;
 408:.\FatFs/ff.c  **** 
 409:.\FatFs/ff.c  **** 		default :
 410:.\FatFs/ff.c  **** 			res = FR_INT_ERR;
 411:.\FatFs/ff.c  **** 		}
 412:.\FatFs/ff.c  **** 		fs->wflag = 1;
 413:.\FatFs/ff.c  **** 	}
 414:.\FatFs/ff.c  **** 
 415:.\FatFs/ff.c  **** 	return res;
 416:.\FatFs/ff.c  **** }
 417:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
 418:.\FatFs/ff.c  **** 
 419:.\FatFs/ff.c  **** 
 420:.\FatFs/ff.c  **** 
 421:.\FatFs/ff.c  **** 
 422:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 423:.\FatFs/ff.c  **** /* FAT handling - Remove a cluster chain                                 */
 424:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 425:.\FatFs/ff.c  **** #if !_FS_READONLY
 426:.\FatFs/ff.c  **** static
 427:.\FatFs/ff.c  **** FRESULT remove_chain (
 428:.\FatFs/ff.c  **** 	FATFS *fs,			/* File system object */
 429:.\FatFs/ff.c  **** 	DWORD clst			/* Cluster# to remove a chain from */
 430:.\FatFs/ff.c  **** )
 431:.\FatFs/ff.c  **** {
 432:.\FatFs/ff.c  **** 	FRESULT res;
 433:.\FatFs/ff.c  **** 	DWORD nxt;
 434:.\FatFs/ff.c  **** 
 435:.\FatFs/ff.c  **** 
 436:.\FatFs/ff.c  **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 437:.\FatFs/ff.c  **** 		res = FR_INT_ERR;
 438:.\FatFs/ff.c  **** 
 439:.\FatFs/ff.c  **** 	} else {
 440:.\FatFs/ff.c  **** 		res = FR_OK;
 441:.\FatFs/ff.c  **** 		while (clst < fs->max_clust) {			/* Not a last link? */
 442:.\FatFs/ff.c  **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 443:.\FatFs/ff.c  **** 			if (nxt == 0) break;				/* Empty cluster? */
 444:.\FatFs/ff.c  **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 445:.\FatFs/ff.c  **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 446:.\FatFs/ff.c  **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 447:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 448:.\FatFs/ff.c  **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 449:.\FatFs/ff.c  **** 				fs->free_clust++;
 450:.\FatFs/ff.c  **** 				fs->fsi_flag = 1;
 451:.\FatFs/ff.c  **** 			}
 452:.\FatFs/ff.c  **** 			clst = nxt;	/* Next cluster */
 453:.\FatFs/ff.c  **** 		}
 454:.\FatFs/ff.c  **** 	}
 455:.\FatFs/ff.c  **** 
 456:.\FatFs/ff.c  **** 	return res;
 457:.\FatFs/ff.c  **** }
 458:.\FatFs/ff.c  **** #endif
 459:.\FatFs/ff.c  **** 
 460:.\FatFs/ff.c  **** 
 461:.\FatFs/ff.c  **** 
 462:.\FatFs/ff.c  **** 
 463:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 464:.\FatFs/ff.c  **** /* FAT handling - Stretch or Create a cluster chain                      */
 465:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 466:.\FatFs/ff.c  **** #if !_FS_READONLY
 467:.\FatFs/ff.c  **** static
 468:.\FatFs/ff.c  **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 469:.\FatFs/ff.c  **** 	FATFS *fs,			/* File system object */
 470:.\FatFs/ff.c  **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 471:.\FatFs/ff.c  **** )
 472:.\FatFs/ff.c  **** {
 473:.\FatFs/ff.c  **** 	DWORD cs, ncl, scl, mcl;
 474:.\FatFs/ff.c  **** 
 475:.\FatFs/ff.c  **** 
 476:.\FatFs/ff.c  **** 	mcl = fs->max_clust;
 477:.\FatFs/ff.c  **** 	if (clst == 0) {		/* Create new chain */
 478:.\FatFs/ff.c  **** 		scl = fs->last_clust;			/* Get suggested start point */
 479:.\FatFs/ff.c  **** 		if (scl == 0 || scl >= mcl) scl = 1;
 480:.\FatFs/ff.c  **** 	}
 481:.\FatFs/ff.c  **** 	else {					/* Stretch existing chain */
 482:.\FatFs/ff.c  **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 483:.\FatFs/ff.c  **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 484:.\FatFs/ff.c  **** 		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 485:.\FatFs/ff.c  **** 		scl = clst;
 486:.\FatFs/ff.c  **** 	}
 487:.\FatFs/ff.c  **** 
 488:.\FatFs/ff.c  **** 	ncl = scl;				/* Start cluster */
 489:.\FatFs/ff.c  **** 	for (;;) {
 490:.\FatFs/ff.c  **** 		ncl++;							/* Next cluster */
 491:.\FatFs/ff.c  **** 		if (ncl >= mcl) {				/* Wrap around */
 492:.\FatFs/ff.c  **** 			ncl = 2;
 493:.\FatFs/ff.c  **** 			if (ncl > scl) return 0;	/* No free cluster */
 494:.\FatFs/ff.c  **** 		}
 495:.\FatFs/ff.c  **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 496:.\FatFs/ff.c  **** 		if (cs == 0) break;				/* Found a free cluster */
 497:.\FatFs/ff.c  **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 498:.\FatFs/ff.c  **** 			return cs;
 499:.\FatFs/ff.c  **** 		if (ncl == scl) return 0;		/* No free cluster */
 500:.\FatFs/ff.c  **** 	}
 501:.\FatFs/ff.c  **** 
 502:.\FatFs/ff.c  **** 	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 503:.\FatFs/ff.c  **** 		return 0xFFFFFFFF;
 504:.\FatFs/ff.c  **** 	if (clst != 0) {					/* Link it to the previous one if needed */
 505:.\FatFs/ff.c  **** 		if (put_fat(fs, clst, ncl))
 506:.\FatFs/ff.c  **** 			return 0xFFFFFFFF;
 507:.\FatFs/ff.c  **** 	}
 508:.\FatFs/ff.c  **** 
 509:.\FatFs/ff.c  **** 	fs->last_clust = ncl;				/* Update FSINFO */
 510:.\FatFs/ff.c  **** 	if (fs->free_clust != 0xFFFFFFFF) {
 511:.\FatFs/ff.c  **** 		fs->free_clust--;
 512:.\FatFs/ff.c  **** 		fs->fsi_flag = 1;
 513:.\FatFs/ff.c  **** 	}
 514:.\FatFs/ff.c  **** 
 515:.\FatFs/ff.c  **** 	return ncl;		/* Return new cluster number */
 516:.\FatFs/ff.c  **** }
 517:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
 518:.\FatFs/ff.c  **** 
 519:.\FatFs/ff.c  **** 
 520:.\FatFs/ff.c  **** 
 521:.\FatFs/ff.c  **** 
 522:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 523:.\FatFs/ff.c  **** /* Get sector# from cluster#                                             */
 524:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 525:.\FatFs/ff.c  **** 
 526:.\FatFs/ff.c  **** 
 527:.\FatFs/ff.c  **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 528:.\FatFs/ff.c  **** 	FATFS *fs,		/* File system object */
 529:.\FatFs/ff.c  **** 	DWORD clst		/* Cluster# to be converted */
 530:.\FatFs/ff.c  **** )
 531:.\FatFs/ff.c  **** {
 532:.\FatFs/ff.c  **** 	clst -= 2;
 533:.\FatFs/ff.c  **** 	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 534:.\FatFs/ff.c  **** 	return clst * fs->csize + fs->database;
 535:.\FatFs/ff.c  **** }
 536:.\FatFs/ff.c  **** 
 537:.\FatFs/ff.c  **** 
 538:.\FatFs/ff.c  **** 
 539:.\FatFs/ff.c  **** 
 540:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 541:.\FatFs/ff.c  **** /* Directory handling - Seek directory index                             */
 542:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 543:.\FatFs/ff.c  **** 
 544:.\FatFs/ff.c  **** static
 545:.\FatFs/ff.c  **** FRESULT dir_seek (
 546:.\FatFs/ff.c  **** 	DIR *dj,		/* Pointer to directory object */
 547:.\FatFs/ff.c  **** 	WORD idx		/* Directory index number */
 548:.\FatFs/ff.c  **** )
 549:.\FatFs/ff.c  **** {
 550:.\FatFs/ff.c  **** 	DWORD clst;
 551:.\FatFs/ff.c  **** 	WORD ic;
 552:.\FatFs/ff.c  **** 
 553:.\FatFs/ff.c  **** 
 554:.\FatFs/ff.c  **** 	dj->index = idx;
 555:.\FatFs/ff.c  **** 	clst = dj->sclust;
 556:.\FatFs/ff.c  **** 	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 557:.\FatFs/ff.c  **** 		return FR_INT_ERR;
 558:.\FatFs/ff.c  **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 559:.\FatFs/ff.c  **** 		clst = dj->fs->dirbase;
 560:.\FatFs/ff.c  **** 
 561:.\FatFs/ff.c  **** 	if (clst == 0) {	/* Static table */
 562:.\FatFs/ff.c  **** 		dj->clust = clst;
 563:.\FatFs/ff.c  **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 564:.\FatFs/ff.c  **** 			return FR_INT_ERR;
 565:.\FatFs/ff.c  **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 566:.\FatFs/ff.c  **** 	}
 567:.\FatFs/ff.c  **** 	else {				/* Dynamic table */
 568:.\FatFs/ff.c  **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 569:.\FatFs/ff.c  **** 		while (idx >= ic) {	/* Follow cluster chain */
 570:.\FatFs/ff.c  **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 571:.\FatFs/ff.c  **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 572:.\FatFs/ff.c  **** 			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 573:.\FatFs/ff.c  **** 				return FR_INT_ERR;
 574:.\FatFs/ff.c  **** 			idx -= ic;
 575:.\FatFs/ff.c  **** 		}
 576:.\FatFs/ff.c  **** 		dj->clust = clst;
 577:.\FatFs/ff.c  **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 578:.\FatFs/ff.c  **** 	}
 579:.\FatFs/ff.c  **** 
 580:.\FatFs/ff.c  **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 581:.\FatFs/ff.c  **** 
 582:.\FatFs/ff.c  **** 	return FR_OK;	/* Seek succeeded */
 583:.\FatFs/ff.c  **** }
 584:.\FatFs/ff.c  **** 
 585:.\FatFs/ff.c  **** 
 586:.\FatFs/ff.c  **** 
 587:.\FatFs/ff.c  **** 
 588:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 589:.\FatFs/ff.c  **** /* Directory handling - Move directory index next                        */
 590:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 591:.\FatFs/ff.c  **** 
 592:.\FatFs/ff.c  **** static
 593:.\FatFs/ff.c  **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach
 594:.\FatFs/ff.c  **** 	DIR *dj,		/* Pointer to directory object */
 595:.\FatFs/ff.c  **** 	BOOL streach	/* FALSE: Do not stretch table, TRUE: Stretch table if needed */
 596:.\FatFs/ff.c  **** )
 597:.\FatFs/ff.c  **** {
 598:.\FatFs/ff.c  **** 	DWORD clst;
 599:.\FatFs/ff.c  **** 	WORD i;
 600:.\FatFs/ff.c  **** 
 601:.\FatFs/ff.c  **** 
 602:.\FatFs/ff.c  **** 	i = dj->index + 1;
 603:.\FatFs/ff.c  **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 604:.\FatFs/ff.c  **** 		return FR_NO_FILE;
 605:.\FatFs/ff.c  **** 
 606:.\FatFs/ff.c  **** 	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 607:.\FatFs/ff.c  **** 		dj->sect++;					/* Next sector */
 608:.\FatFs/ff.c  **** 
 609:.\FatFs/ff.c  **** 		if (dj->clust == 0) {	/* Static table */
 610:.\FatFs/ff.c  **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 611:.\FatFs/ff.c  **** 				return FR_NO_FILE;
 612:.\FatFs/ff.c  **** 		}
 613:.\FatFs/ff.c  **** 		else {					/* Dynamic table */
 614:.\FatFs/ff.c  **** 			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 615:.\FatFs/ff.c  **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 616:.\FatFs/ff.c  **** 				if (clst <= 1) return FR_INT_ERR;
 617:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 618:.\FatFs/ff.c  **** 				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 619:.\FatFs/ff.c  **** #if !_FS_READONLY
 620:.\FatFs/ff.c  **** 					BYTE c;
 621:.\FatFs/ff.c  **** 					if (!streach) return FR_NO_FILE;			/* When do not stretch, report EOT */
 622:.\FatFs/ff.c  **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 623:.\FatFs/ff.c  **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 624:.\FatFs/ff.c  **** 					if (clst == 1) return FR_INT_ERR;
 625:.\FatFs/ff.c  **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 626:.\FatFs/ff.c  **** 					/* Clean-up streached table */
 627:.\FatFs/ff.c  **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 628:.\FatFs/ff.c  **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 629:.\FatFs/ff.c  **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 630:.\FatFs/ff.c  **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 631:.\FatFs/ff.c  **** 						dj->fs->wflag = 1;
 632:.\FatFs/ff.c  **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 633:.\FatFs/ff.c  **** 						dj->fs->winsect++;
 634:.\FatFs/ff.c  **** 					}
 635:.\FatFs/ff.c  **** 					dj->fs->winsect -= c;						/* Rewind window address */
 636:.\FatFs/ff.c  **** #else
 637:.\FatFs/ff.c  **** 					return FR_NO_FILE;			/* Report EOT */
 638:.\FatFs/ff.c  **** #endif
 639:.\FatFs/ff.c  **** 				}
 640:.\FatFs/ff.c  **** 				dj->clust = clst;				/* Initialize data for new cluster */
 641:.\FatFs/ff.c  **** 				dj->sect = clust2sect(dj->fs, clst);
 642:.\FatFs/ff.c  **** 			}
 643:.\FatFs/ff.c  **** 		}
 644:.\FatFs/ff.c  **** 	}
 645:.\FatFs/ff.c  **** 
 646:.\FatFs/ff.c  **** 	dj->index = i;
 647:.\FatFs/ff.c  **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 648:.\FatFs/ff.c  **** 
 649:.\FatFs/ff.c  **** 	return FR_OK;
 650:.\FatFs/ff.c  **** }
 651:.\FatFs/ff.c  **** 
 652:.\FatFs/ff.c  **** 
 653:.\FatFs/ff.c  **** 
 654:.\FatFs/ff.c  **** 
 655:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 656:.\FatFs/ff.c  **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
 657:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 658:.\FatFs/ff.c  **** #if _USE_LFN
 659:.\FatFs/ff.c  **** static
 660:.\FatFs/ff.c  **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
 661:.\FatFs/ff.c  **** 
 662:.\FatFs/ff.c  **** 
 663:.\FatFs/ff.c  **** static
 664:.\FatFs/ff.c  **** BOOL cmp_lfn (			/* TRUE:Matched, FALSE:Not matched */
 665:.\FatFs/ff.c  **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
 666:.\FatFs/ff.c  **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
 667:.\FatFs/ff.c  **** )
 668:.\FatFs/ff.c  **** {
 669:.\FatFs/ff.c  **** 	int i, s;
 670:.\FatFs/ff.c  **** 	WCHAR wc, uc;
 671:.\FatFs/ff.c  **** 
 672:.\FatFs/ff.c  **** 
 673:.\FatFs/ff.c  **** 	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
 674:.\FatFs/ff.c  **** 	s = 0; wc = 1;
 675:.\FatFs/ff.c  **** 	do {
 676:.\FatFs/ff.c  **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 677:.\FatFs/ff.c  **** 		if (wc) {	/* Last char has not been processed */
 678:.\FatFs/ff.c  **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 679:.\FatFs/ff.c  **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 680:.\FatFs/ff.c  **** 				return FALSE;			/* Not matched */
 681:.\FatFs/ff.c  **** 		} else {
 682:.\FatFs/ff.c  **** 			if (uc != 0xFFFF) return FALSE;	/* Check filler */
 683:.\FatFs/ff.c  **** 		}
 684:.\FatFs/ff.c  **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 685:.\FatFs/ff.c  **** 
 686:.\FatFs/ff.c  **** 	if ((dir[LDIR_Ord] & 0x40) && wc && lfnbuf[i])	/* Last segment matched but different length */
 687:.\FatFs/ff.c  **** 		return FALSE;
 688:.\FatFs/ff.c  **** 
 689:.\FatFs/ff.c  **** 	return TRUE;					/* The part of LFN matched */
 690:.\FatFs/ff.c  **** }
 691:.\FatFs/ff.c  **** 
 692:.\FatFs/ff.c  **** 
 693:.\FatFs/ff.c  **** 
 694:.\FatFs/ff.c  **** static
 695:.\FatFs/ff.c  **** BOOL pick_lfn (			/* TRUE:Succeeded, FALSE:Buffer overflow */
 696:.\FatFs/ff.c  **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
 697:.\FatFs/ff.c  **** 	BYTE *dir			/* Pointer to the directory entry */
 698:.\FatFs/ff.c  **** )
 699:.\FatFs/ff.c  **** {
 700:.\FatFs/ff.c  **** 	int i, s;
 701:.\FatFs/ff.c  **** 	WCHAR wc, uc;
 702:.\FatFs/ff.c  **** 
 703:.\FatFs/ff.c  **** 
 704:.\FatFs/ff.c  **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 705:.\FatFs/ff.c  **** 
 706:.\FatFs/ff.c  **** 	s = 0; wc = 1;
 707:.\FatFs/ff.c  **** 	do {
 708:.\FatFs/ff.c  **** 		uc = LD_WORD(dir+LfnOfs[s]);			/* Pick an LFN character from the entry */
 709:.\FatFs/ff.c  **** 		if (wc) {	/* Last char has not been processed */
 710:.\FatFs/ff.c  **** 			if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 711:.\FatFs/ff.c  **** 			lfnbuf[i++] = wc = uc;				/* Store it */
 712:.\FatFs/ff.c  **** 		} else {
 713:.\FatFs/ff.c  **** 			if (uc != 0xFFFF) return FALSE;		/* Check filler */
 714:.\FatFs/ff.c  **** 		}
 715:.\FatFs/ff.c  **** 	} while (++s < 13);						/* Read all character in the entry */
 716:.\FatFs/ff.c  **** 
 717:.\FatFs/ff.c  **** 	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
 718:.\FatFs/ff.c  **** 		if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 719:.\FatFs/ff.c  **** 		lfnbuf[i] = 0;
 720:.\FatFs/ff.c  **** 	}
 721:.\FatFs/ff.c  **** 
 722:.\FatFs/ff.c  **** 	return TRUE;
 723:.\FatFs/ff.c  **** }
 724:.\FatFs/ff.c  **** 
 725:.\FatFs/ff.c  **** 
 726:.\FatFs/ff.c  **** #if !_FS_READONLY
 727:.\FatFs/ff.c  **** static
 728:.\FatFs/ff.c  **** void fit_lfn (
 729:.\FatFs/ff.c  **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
 730:.\FatFs/ff.c  **** 	BYTE *dir,				/* Pointer to the directory entry */
 731:.\FatFs/ff.c  **** 	BYTE ord,				/* LFN order (1-20) */
 732:.\FatFs/ff.c  **** 	BYTE sum				/* SFN sum */
 733:.\FatFs/ff.c  **** )
 734:.\FatFs/ff.c  **** {
 735:.\FatFs/ff.c  **** 	int i, s;
 736:.\FatFs/ff.c  **** 	WCHAR wc;
 737:.\FatFs/ff.c  **** 
 738:.\FatFs/ff.c  **** 
 739:.\FatFs/ff.c  **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
 740:.\FatFs/ff.c  **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 741:.\FatFs/ff.c  **** 	dir[LDIR_Type] = 0;
 742:.\FatFs/ff.c  **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
 743:.\FatFs/ff.c  **** 
 744:.\FatFs/ff.c  **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 745:.\FatFs/ff.c  **** 	s = wc = 0;
 746:.\FatFs/ff.c  **** 	do {
 747:.\FatFs/ff.c  **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 748:.\FatFs/ff.c  **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 749:.\FatFs/ff.c  **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 750:.\FatFs/ff.c  **** 	} while (++s < 13);
 751:.\FatFs/ff.c  **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
 752:.\FatFs/ff.c  **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 753:.\FatFs/ff.c  **** }
 754:.\FatFs/ff.c  **** 
 755:.\FatFs/ff.c  **** #endif
 756:.\FatFs/ff.c  **** #endif
 757:.\FatFs/ff.c  **** 
 758:.\FatFs/ff.c  **** 
 759:.\FatFs/ff.c  **** 
 760:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 761:.\FatFs/ff.c  **** /* Create numbered name                                                  */
 762:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 763:.\FatFs/ff.c  **** #if _USE_LFN
 764:.\FatFs/ff.c  **** void gen_numname (
 765:.\FatFs/ff.c  **** 	BYTE *dst,			/* Pointer to generated SFN */
 766:.\FatFs/ff.c  **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
 767:.\FatFs/ff.c  **** 	const WCHAR *lfn,	/* Pointer to LFN */
 768:.\FatFs/ff.c  **** 	WORD num			/* Sequence number */
 769:.\FatFs/ff.c  **** )
 770:.\FatFs/ff.c  **** {
 771:.\FatFs/ff.c  **** 	char ns[8];
 772:.\FatFs/ff.c  **** 	int i, j;
 773:.\FatFs/ff.c  **** 
 774:.\FatFs/ff.c  **** 
 775:.\FatFs/ff.c  **** 	mem_cpy(dst, src, 11);
 776:.\FatFs/ff.c  **** 
 777:.\FatFs/ff.c  **** 	if (num > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 778:.\FatFs/ff.c  **** 		do num = (num >> 1) + (num << 15) + (WORD)*lfn++; while (*lfn);
 779:.\FatFs/ff.c  **** 	}
 780:.\FatFs/ff.c  **** 
 781:.\FatFs/ff.c  **** 	/* itoa */
 782:.\FatFs/ff.c  **** 	i = 7;
 783:.\FatFs/ff.c  **** 	do {
 784:.\FatFs/ff.c  **** 		ns[i--] = (num % 10) + '0';
 785:.\FatFs/ff.c  **** 		num /= 10;
 786:.\FatFs/ff.c  **** 	} while (num);
 787:.\FatFs/ff.c  **** 	ns[i] = '~';
 788:.\FatFs/ff.c  **** 
 789:.\FatFs/ff.c  **** 	/* Append the number */
 790:.\FatFs/ff.c  **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
 791:.\FatFs/ff.c  **** 		if (IsDBCS1(dst[j])) {
 792:.\FatFs/ff.c  **** 			if (j == i - 1) break;
 793:.\FatFs/ff.c  **** 			j++;
 794:.\FatFs/ff.c  **** 		}
 795:.\FatFs/ff.c  **** 	}
 796:.\FatFs/ff.c  **** 	do {
 797:.\FatFs/ff.c  **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 798:.\FatFs/ff.c  **** 	} while (j < 8);
 799:.\FatFs/ff.c  **** }
 800:.\FatFs/ff.c  **** #endif
 801:.\FatFs/ff.c  **** 
 802:.\FatFs/ff.c  **** 
 803:.\FatFs/ff.c  **** 
 804:.\FatFs/ff.c  **** 
 805:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 806:.\FatFs/ff.c  **** /* Calculate sum of an SFN                                               */
 807:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 808:.\FatFs/ff.c  **** #if _USE_LFN
 809:.\FatFs/ff.c  **** static
 810:.\FatFs/ff.c  **** BYTE sum_sfn (
 811:.\FatFs/ff.c  **** 	const BYTE *dir		/* Ptr to directory entry */
 812:.\FatFs/ff.c  **** )
 813:.\FatFs/ff.c  **** {
  88              		.loc 1 813 0 is_stmt 1
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.LVL10:
  94 0000 00F10B01 		add	r1, r0, #11
 814:.\FatFs/ff.c  **** 	BYTE sum = 0;
  95              		.loc 1 814 0
  96 0004 0023     		movs	r3, #0
  97              	.LVL11:
  98              	.L10:
 815:.\FatFs/ff.c  **** 	int n = 11;
 816:.\FatFs/ff.c  **** 
 817:.\FatFs/ff.c  **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  99              		.loc 1 817 0 discriminator 1
 100 0006 DA01     		lsls	r2, r3, #7
 101 0008 42EA5303 		orr	r3, r2, r3, lsr #1
 102              	.LVL12:
 103 000c 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 104              	.LVL13:
 105 0010 1344     		add	r3, r3, r2
 106 0012 03F0FF03 		and	r3, r3, #255
 107              	.LVL14:
 108 0016 8842     		cmp	r0, r1
 109 0018 F5D1     		bne	.L10
 818:.\FatFs/ff.c  **** 	return sum;
 819:.\FatFs/ff.c  **** }
 110              		.loc 1 819 0
 111 001a 1846     		mov	r0, r3
 112              	.LVL15:
 113 001c 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE46:
 117 001e 00BF     		.section	.text.move_window,"ax",%progbits
 118              		.align	2
 119              		.thumb
 120              		.thumb_func
 122              	move_window:
 123              	.LFB33:
 247:.\FatFs/ff.c  **** 	DWORD wsect;
 124              		.loc 1 247 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL16:
 129 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 130              	.LCFI0:
 131              		.cfi_def_cfa_offset 32
 132              		.cfi_offset 3, -32
 133              		.cfi_offset 4, -28
 134              		.cfi_offset 5, -24
 135              		.cfi_offset 6, -20
 136              		.cfi_offset 7, -16
 137              		.cfi_offset 8, -12
 138              		.cfi_offset 9, -8
 139              		.cfi_offset 14, -4
 251:.\FatFs/ff.c  **** 	if (wsect != sector) {	/* Changed current window */
 140              		.loc 1 251 0
 141 0004 C76A     		ldr	r7, [r0, #44]
 142              	.LVL17:
 252:.\FatFs/ff.c  **** #if !_FS_READONLY
 143              		.loc 1 252 0
 144 0006 8F42     		cmp	r7, r1
 145 0008 30D0     		beq	.L16
 146 000a 0E46     		mov	r6, r1
 147 000c 0446     		mov	r4, r0
 254:.\FatFs/ff.c  **** 			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 148              		.loc 1 254 0
 149 000e 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 150 0010 03B3     		cbz	r3, .L14
 255:.\FatFs/ff.c  **** 				return FR_DISK_ERR;
 151              		.loc 1 255 0
 152 0012 00F13008 		add	r8, r0, #48
 153 0016 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 154              	.LVL18:
 155 0018 4146     		mov	r1, r8
 156              	.LVL19:
 157 001a 3A46     		mov	r2, r7
 158 001c 0123     		movs	r3, #1
 159 001e FFF7FEFF 		bl	disk_write
 160              	.LVL20:
 161 0022 30BB     		cbnz	r0, .L17
 257:.\FatFs/ff.c  **** 			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 162              		.loc 1 257 0
 163 0024 0023     		movs	r3, #0
 164 0026 2371     		strb	r3, [r4, #4]
 258:.\FatFs/ff.c  **** 				BYTE nf;
 165              		.loc 1 258 0
 166 0028 A269     		ldr	r2, [r4, #24]
 167 002a 236A     		ldr	r3, [r4, #32]
 168 002c 1344     		add	r3, r3, r2
 169 002e 9F42     		cmp	r7, r3
 170 0030 10D2     		bcs	.L14
 171              	.LBB2:
 260:.\FatFs/ff.c  **** 					wsect += fs->sects_fat;
 172              		.loc 1 260 0
 173 0032 E578     		ldrb	r5, [r4, #3]	@ zero_extendqisi2
 174              	.LVL21:
 175 0034 012D     		cmp	r5, #1
 176 0036 0DD9     		bls	.L14
 262:.\FatFs/ff.c  **** 				}
 177              		.loc 1 262 0 discriminator 3
 178 0038 4FF00109 		mov	r9, #1
 179              	.L20:
 261:.\FatFs/ff.c  **** 					disk_write(fs->drive, fs->win, wsect, 1);
 180              		.loc 1 261 0 discriminator 3
 181 003c A369     		ldr	r3, [r4, #24]
 182 003e 1F44     		add	r7, r7, r3
 183              	.LVL22:
 262:.\FatFs/ff.c  **** 				}
 184              		.loc 1 262 0 discriminator 3
 185 0040 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 186 0042 4146     		mov	r1, r8
 187 0044 3A46     		mov	r2, r7
 188 0046 4B46     		mov	r3, r9
 189 0048 FFF7FEFF 		bl	disk_write
 190              	.LVL23:
 260:.\FatFs/ff.c  **** 					wsect += fs->sects_fat;
 191              		.loc 1 260 0 discriminator 3
 192 004c 013D     		subs	r5, r5, #1
 193              	.LVL24:
 194 004e EDB2     		uxtb	r5, r5
 195              	.LVL25:
 196 0050 012D     		cmp	r5, #1
 197 0052 F3D1     		bne	.L20
 198              	.LVL26:
 199              	.L14:
 200              	.LBE2:
 267:.\FatFs/ff.c  **** 			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 201              		.loc 1 267 0
 202 0054 86B1     		cbz	r6, .L18
 268:.\FatFs/ff.c  **** 				return FR_DISK_ERR;
 203              		.loc 1 268 0
 204 0056 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 205 0058 04F13001 		add	r1, r4, #48
 206 005c 3246     		mov	r2, r6
 207 005e 0123     		movs	r3, #1
 208 0060 FFF7FEFF 		bl	disk_read
 209              	.LVL27:
 210 0064 58B9     		cbnz	r0, .L19
 270:.\FatFs/ff.c  **** 		}
 211              		.loc 1 270 0
 212 0066 E662     		str	r6, [r4, #44]
 213 0068 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 214              	.LVL28:
 215              	.L16:
 274:.\FatFs/ff.c  **** }
 216              		.loc 1 274 0
 217 006c 0020     		movs	r0, #0
 218              	.LVL29:
 219 006e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 220              	.LVL30:
 221              	.L17:
 256:.\FatFs/ff.c  **** 			fs->wflag = 0;
 222              		.loc 1 256 0
 223 0072 0120     		movs	r0, #1
 224 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 225              	.LVL31:
 226              	.L18:
 274:.\FatFs/ff.c  **** }
 227              		.loc 1 274 0
 228 0078 0020     		movs	r0, #0
 229 007a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 230              	.LVL32:
 231              	.L19:
 269:.\FatFs/ff.c  **** 			fs->winsect = sector;
 232              		.loc 1 269 0
 233 007e 0120     		movs	r0, #1
 275:.\FatFs/ff.c  **** 
 234              		.loc 1 275 0
 235 0080 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 236              		.cfi_endproc
 237              	.LFE33:
 239              		.section	.text.check_fs,"ax",%progbits
 240              		.align	2
 241              		.thumb
 242              		.thumb_func
 244              	check_fs:
 245              	.LFB54:
 820:.\FatFs/ff.c  **** #endif
 821:.\FatFs/ff.c  **** 
 822:.\FatFs/ff.c  **** 
 823:.\FatFs/ff.c  **** 
 824:.\FatFs/ff.c  **** 
 825:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 826:.\FatFs/ff.c  **** /* Directory handling - Find an object in the directory                  */
 827:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 828:.\FatFs/ff.c  **** 
 829:.\FatFs/ff.c  **** static
 830:.\FatFs/ff.c  **** FRESULT dir_find (
 831:.\FatFs/ff.c  **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
 832:.\FatFs/ff.c  **** )
 833:.\FatFs/ff.c  **** {
 834:.\FatFs/ff.c  **** 	FRESULT res;
 835:.\FatFs/ff.c  **** 	BYTE c, *dir;
 836:.\FatFs/ff.c  **** #if _USE_LFN
 837:.\FatFs/ff.c  **** 	BYTE a, ord, sum;
 838:.\FatFs/ff.c  **** #endif
 839:.\FatFs/ff.c  **** 
 840:.\FatFs/ff.c  **** 	res = dir_seek(dj, 0);			/* Rewind directory object */
 841:.\FatFs/ff.c  **** 	if (res != FR_OK) return res;
 842:.\FatFs/ff.c  **** 
 843:.\FatFs/ff.c  **** #if _USE_LFN
 844:.\FatFs/ff.c  **** 	ord = sum = 0xFF;
 845:.\FatFs/ff.c  **** #endif
 846:.\FatFs/ff.c  **** 	do {
 847:.\FatFs/ff.c  **** 		res = move_window(dj->fs, dj->sect);
 848:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 849:.\FatFs/ff.c  **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 850:.\FatFs/ff.c  **** 		c = dir[DIR_Name];
 851:.\FatFs/ff.c  **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 852:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
 853:.\FatFs/ff.c  **** 		a = dir[DIR_Attr] & AM_MASK;
 854:.\FatFs/ff.c  **** 		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 855:.\FatFs/ff.c  **** 			ord = 0xFF;
 856:.\FatFs/ff.c  **** 		} else {
 857:.\FatFs/ff.c  **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 858:.\FatFs/ff.c  **** 				if (dj->lfn) {
 859:.\FatFs/ff.c  **** 					if (c & 0x40) {		/* Is it start of LFN sequence? */
 860:.\FatFs/ff.c  **** 						sum = dir[LDIR_Chksum];
 861:.\FatFs/ff.c  **** 						c &= 0xBF; ord = c;	/* LFN start order */
 862:.\FatFs/ff.c  **** 						dj->lfn_idx = dj->index;
 863:.\FatFs/ff.c  **** 					}
 864:.\FatFs/ff.c  **** 					/* Check validity of the LFN entry and compare it with given name */
 865:.\FatFs/ff.c  **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 866:.\FatFs/ff.c  **** 				}
 867:.\FatFs/ff.c  **** 			} else {					/* An SFN entry is found */
 868:.\FatFs/ff.c  **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 869:.\FatFs/ff.c  **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 870:.\FatFs/ff.c  **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 871:.\FatFs/ff.c  **** 			}
 872:.\FatFs/ff.c  **** 		}
 873:.\FatFs/ff.c  **** #else		/* Non LFN configuration */
 874:.\FatFs/ff.c  **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 875:.\FatFs/ff.c  **** 			break;
 876:.\FatFs/ff.c  **** #endif
 877:.\FatFs/ff.c  **** 		res = dir_next(dj, FALSE);		/* Next entry */
 878:.\FatFs/ff.c  **** 	} while (res == FR_OK);
 879:.\FatFs/ff.c  **** 
 880:.\FatFs/ff.c  **** 	return res;
 881:.\FatFs/ff.c  **** }
 882:.\FatFs/ff.c  **** 
 883:.\FatFs/ff.c  **** 
 884:.\FatFs/ff.c  **** 
 885:.\FatFs/ff.c  **** 
 886:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 887:.\FatFs/ff.c  **** /* Read an object from the directory                                     */
 888:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 889:.\FatFs/ff.c  **** #if _FS_MINIMIZE <= 1
 890:.\FatFs/ff.c  **** static
 891:.\FatFs/ff.c  **** FRESULT dir_read (
 892:.\FatFs/ff.c  **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
 893:.\FatFs/ff.c  **** )
 894:.\FatFs/ff.c  **** {
 895:.\FatFs/ff.c  **** 	FRESULT res;
 896:.\FatFs/ff.c  **** 	BYTE c, *dir;
 897:.\FatFs/ff.c  **** #if _USE_LFN
 898:.\FatFs/ff.c  **** 	BYTE a, ord = 0xFF, sum = 0xFF;
 899:.\FatFs/ff.c  **** #endif
 900:.\FatFs/ff.c  **** 
 901:.\FatFs/ff.c  **** 	res = FR_NO_FILE;
 902:.\FatFs/ff.c  **** 	while (dj->sect) {
 903:.\FatFs/ff.c  **** 		res = move_window(dj->fs, dj->sect);
 904:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 905:.\FatFs/ff.c  **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 906:.\FatFs/ff.c  **** 		c = dir[DIR_Name];
 907:.\FatFs/ff.c  **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 908:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
 909:.\FatFs/ff.c  **** 		a = dir[DIR_Attr] & AM_MASK;
 910:.\FatFs/ff.c  **** 		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without
 911:.\FatFs/ff.c  **** 			ord = 0xFF;
 912:.\FatFs/ff.c  **** 		} else {
 913:.\FatFs/ff.c  **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 914:.\FatFs/ff.c  **** 				if (c & 0x40) {			/* Is it start of LFN sequence? */
 915:.\FatFs/ff.c  **** 					sum = dir[LDIR_Chksum];
 916:.\FatFs/ff.c  **** 					c &= 0xBF; ord = c;
 917:.\FatFs/ff.c  **** 					dj->lfn_idx = dj->index;
 918:.\FatFs/ff.c  **** 				}
 919:.\FatFs/ff.c  **** 				/* Check LFN validity and capture it */
 920:.\FatFs/ff.c  **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 921:.\FatFs/ff.c  **** 			} else {					/* An SFN entry is found */
 922:.\FatFs/ff.c  **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 923:.\FatFs/ff.c  **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
 924:.\FatFs/ff.c  **** 				break;
 925:.\FatFs/ff.c  **** 			}
 926:.\FatFs/ff.c  **** 		}
 927:.\FatFs/ff.c  **** #else		/* Non LFN configuration */
 928:.\FatFs/ff.c  **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 929:.\FatFs/ff.c  **** 			break;
 930:.\FatFs/ff.c  **** #endif
 931:.\FatFs/ff.c  **** 		res = dir_next(dj, FALSE);				/* Next entry */
 932:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 933:.\FatFs/ff.c  **** 	}
 934:.\FatFs/ff.c  **** 
 935:.\FatFs/ff.c  **** 	if (res != FR_OK) dj->sect = 0;
 936:.\FatFs/ff.c  **** 
 937:.\FatFs/ff.c  **** 	return res;
 938:.\FatFs/ff.c  **** }
 939:.\FatFs/ff.c  **** #endif
 940:.\FatFs/ff.c  **** 
 941:.\FatFs/ff.c  **** 
 942:.\FatFs/ff.c  **** 
 943:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 944:.\FatFs/ff.c  **** /* Register an object to the directory                                   */
 945:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
 946:.\FatFs/ff.c  **** #if !_FS_READONLY
 947:.\FatFs/ff.c  **** static
 948:.\FatFs/ff.c  **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
 949:.\FatFs/ff.c  **** 	DIR *dj				/* Target directory with object name to be created */
 950:.\FatFs/ff.c  **** )
 951:.\FatFs/ff.c  **** {
 952:.\FatFs/ff.c  **** 	FRESULT res;
 953:.\FatFs/ff.c  **** 	BYTE c, *dir;
 954:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
 955:.\FatFs/ff.c  **** 	WORD n, ne, is;
 956:.\FatFs/ff.c  **** 	BYTE sn[12], *fn, sum;
 957:.\FatFs/ff.c  **** 	WCHAR *lfn;
 958:.\FatFs/ff.c  **** 
 959:.\FatFs/ff.c  **** 
 960:.\FatFs/ff.c  **** 	fn = dj->fn; lfn = dj->lfn;
 961:.\FatFs/ff.c  **** 	mem_cpy(sn, fn, 12);
 962:.\FatFs/ff.c  **** 
 963:.\FatFs/ff.c  **** 	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
 964:.\FatFs/ff.c  **** 
 965:.\FatFs/ff.c  **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 966:.\FatFs/ff.c  **** 		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
 967:.\FatFs/ff.c  **** 		for (n = 1; n < 100; n++) {
 968:.\FatFs/ff.c  **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 969:.\FatFs/ff.c  **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 970:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 971:.\FatFs/ff.c  **** 		}
 972:.\FatFs/ff.c  **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 973:.\FatFs/ff.c  **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 974:.\FatFs/ff.c  **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
 975:.\FatFs/ff.c  **** 	}
 976:.\FatFs/ff.c  **** 
 977:.\FatFs/ff.c  **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
 978:.\FatFs/ff.c  **** 		for (ne = 0; lfn[ne]; ne++) ;
 979:.\FatFs/ff.c  **** 		ne = (ne + 25) / 13;
 980:.\FatFs/ff.c  **** 	} else {						/* Otherwise reserve only an SFN entry. */
 981:.\FatFs/ff.c  **** 		ne = 1;
 982:.\FatFs/ff.c  **** 	}
 983:.\FatFs/ff.c  **** 
 984:.\FatFs/ff.c  **** 	/* Reserve contiguous entries */
 985:.\FatFs/ff.c  **** 	res = dir_seek(dj, 0);
 986:.\FatFs/ff.c  **** 	if (res != FR_OK) return res;
 987:.\FatFs/ff.c  **** 	n = is = 0;
 988:.\FatFs/ff.c  **** 	do {
 989:.\FatFs/ff.c  **** 		res = move_window(dj->fs, dj->sect);
 990:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 991:.\FatFs/ff.c  **** 		c = *dj->dir;				/* Check the entry status */
 992:.\FatFs/ff.c  **** 		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
 993:.\FatFs/ff.c  **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
 994:.\FatFs/ff.c  **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
 995:.\FatFs/ff.c  **** 		} else {
 996:.\FatFs/ff.c  **** 			n = 0;					/* Not a blank entry. Restart to search */
 997:.\FatFs/ff.c  **** 		}
 998:.\FatFs/ff.c  **** 		res = dir_next(dj, TRUE);	/* Next entry with table stretch */
 999:.\FatFs/ff.c  **** 	} while (res == FR_OK);
1000:.\FatFs/ff.c  **** 
1001:.\FatFs/ff.c  **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1002:.\FatFs/ff.c  **** 		res = dir_seek(dj, is);
1003:.\FatFs/ff.c  **** 		if (res == FR_OK) {
1004:.\FatFs/ff.c  **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1005:.\FatFs/ff.c  **** 			ne--;
1006:.\FatFs/ff.c  **** 			do {					/* Store LFN entries in bottom first */
1007:.\FatFs/ff.c  **** 				res = move_window(dj->fs, dj->sect);
1008:.\FatFs/ff.c  **** 				if (res != FR_OK) break;
1009:.\FatFs/ff.c  **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1010:.\FatFs/ff.c  **** 				dj->fs->wflag = 1;
1011:.\FatFs/ff.c  **** 				res = dir_next(dj, FALSE);	/* Next entry */
1012:.\FatFs/ff.c  **** 			} while (res == FR_OK && --ne);
1013:.\FatFs/ff.c  **** 		}
1014:.\FatFs/ff.c  **** 	}
1015:.\FatFs/ff.c  **** 
1016:.\FatFs/ff.c  **** #else	/* Non LFN configuration */
1017:.\FatFs/ff.c  **** 	res = dir_seek(dj, 0);
1018:.\FatFs/ff.c  **** 	if (res == FR_OK) {
1019:.\FatFs/ff.c  **** 		do {	/* Find a blank entry for the SFN */
1020:.\FatFs/ff.c  **** 			res = move_window(dj->fs, dj->sect);
1021:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
1022:.\FatFs/ff.c  **** 			c = *dj->dir;
1023:.\FatFs/ff.c  **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
1024:.\FatFs/ff.c  **** 			res = dir_next(dj, TRUE);		/* Next entry with table streach */
1025:.\FatFs/ff.c  **** 		} while (res == FR_OK);
1026:.\FatFs/ff.c  **** 	}
1027:.\FatFs/ff.c  **** #endif
1028:.\FatFs/ff.c  **** 
1029:.\FatFs/ff.c  **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1030:.\FatFs/ff.c  **** 		res = move_window(dj->fs, dj->sect);
1031:.\FatFs/ff.c  **** 		if (res == FR_OK) {
1032:.\FatFs/ff.c  **** 			dir = dj->dir;
1033:.\FatFs/ff.c  **** 			mem_set(dir, 0, 32);		/* Clean the entry */
1034:.\FatFs/ff.c  **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1035:.\FatFs/ff.c  **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1036:.\FatFs/ff.c  **** 			dj->fs->wflag = 1;
1037:.\FatFs/ff.c  **** 		}
1038:.\FatFs/ff.c  **** 	}
1039:.\FatFs/ff.c  **** 
1040:.\FatFs/ff.c  **** 	return res;
1041:.\FatFs/ff.c  **** }
1042:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
1043:.\FatFs/ff.c  **** 
1044:.\FatFs/ff.c  **** 
1045:.\FatFs/ff.c  **** 
1046:.\FatFs/ff.c  **** 
1047:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1048:.\FatFs/ff.c  **** /* Remove an object from the directory                                   */
1049:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1050:.\FatFs/ff.c  **** #if !_FS_READONLY && !_FS_MINIMIZE
1051:.\FatFs/ff.c  **** static
1052:.\FatFs/ff.c  **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1053:.\FatFs/ff.c  **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1054:.\FatFs/ff.c  **** )
1055:.\FatFs/ff.c  **** {
1056:.\FatFs/ff.c  **** 	FRESULT res;
1057:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
1058:.\FatFs/ff.c  **** 	WORD i;
1059:.\FatFs/ff.c  **** 
1060:.\FatFs/ff.c  **** 	i = dj->index;	/* SFN index */
1061:.\FatFs/ff.c  **** 	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of t
1062:.\FatFs/ff.c  **** 	if (res == FR_OK) {
1063:.\FatFs/ff.c  **** 		do {
1064:.\FatFs/ff.c  **** 			res = move_window(dj->fs, dj->sect);
1065:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
1066:.\FatFs/ff.c  **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1067:.\FatFs/ff.c  **** 			dj->fs->wflag = 1;
1068:.\FatFs/ff.c  **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1069:.\FatFs/ff.c  **** 			res = dir_next(dj, FALSE);	/* Next entry */
1070:.\FatFs/ff.c  **** 		} while (res == FR_OK);
1071:.\FatFs/ff.c  **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1072:.\FatFs/ff.c  **** 	}
1073:.\FatFs/ff.c  **** 
1074:.\FatFs/ff.c  **** #else			/* Non LFN configuration */
1075:.\FatFs/ff.c  **** 	res = dir_seek(dj, dj->index);
1076:.\FatFs/ff.c  **** 	if (res == FR_OK) {
1077:.\FatFs/ff.c  **** 		res = move_window(dj->fs, dj->sect);
1078:.\FatFs/ff.c  **** 		if (res == FR_OK) {
1079:.\FatFs/ff.c  **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1080:.\FatFs/ff.c  **** 			dj->fs->wflag = 1;
1081:.\FatFs/ff.c  **** 		}
1082:.\FatFs/ff.c  **** 	}
1083:.\FatFs/ff.c  **** #endif
1084:.\FatFs/ff.c  **** 
1085:.\FatFs/ff.c  **** 	return res;
1086:.\FatFs/ff.c  **** }
1087:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
1088:.\FatFs/ff.c  **** 
1089:.\FatFs/ff.c  **** 
1090:.\FatFs/ff.c  **** 
1091:.\FatFs/ff.c  **** 
1092:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1093:.\FatFs/ff.c  **** /* Pick a segment and create the object name in directory form           */
1094:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1095:.\FatFs/ff.c  **** 
1096:.\FatFs/ff.c  **** static
1097:.\FatFs/ff.c  **** FRESULT create_name (
1098:.\FatFs/ff.c  **** 	DIR *dj,			/* Pointer to the directory object */
1099:.\FatFs/ff.c  **** 	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
1100:.\FatFs/ff.c  **** )
1101:.\FatFs/ff.c  **** {
1102:.\FatFs/ff.c  **** #ifdef _EXCVT
1103:.\FatFs/ff.c  **** 	static const BYTE cvt[] = _EXCVT;
1104:.\FatFs/ff.c  **** #endif
1105:.\FatFs/ff.c  **** 
1106:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
1107:.\FatFs/ff.c  **** 	BYTE b, cf;
1108:.\FatFs/ff.c  **** 	WCHAR w, *lfn;
1109:.\FatFs/ff.c  **** 	int i, ni, si, di;
1110:.\FatFs/ff.c  **** 	const XCHAR *p;
1111:.\FatFs/ff.c  **** 
1112:.\FatFs/ff.c  **** 	/* Create LFN in Unicode */
1113:.\FatFs/ff.c  **** 	si = di = 0;
1114:.\FatFs/ff.c  **** 	p = *path;
1115:.\FatFs/ff.c  **** 	lfn = dj->lfn;
1116:.\FatFs/ff.c  **** 	for (;;) {
1117:.\FatFs/ff.c  **** 		w = p[si++];					/* Get a character */
1118:.\FatFs/ff.c  **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1119:.\FatFs/ff.c  **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1120:.\FatFs/ff.c  **** 			return FR_INVALID_NAME;
1121:.\FatFs/ff.c  **** #if !_LFN_UNICODE
1122:.\FatFs/ff.c  **** 		w &= 0xFF;
1123:.\FatFs/ff.c  **** 		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
1124:.\FatFs/ff.c  **** 			b = p[si++];				/* Get 2nd byte */
1125:.\FatFs/ff.c  **** 			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
1126:.\FatFs/ff.c  **** 				return FR_INVALID_NAME;
1127:.\FatFs/ff.c  **** 			w = (w << 8) + b;
1128:.\FatFs/ff.c  **** 		}
1129:.\FatFs/ff.c  **** 		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
1130:.\FatFs/ff.c  **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1131:.\FatFs/ff.c  **** #endif
1132:.\FatFs/ff.c  **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1133:.\FatFs/ff.c  **** 			return FR_INVALID_NAME;
1134:.\FatFs/ff.c  **** 		lfn[di++] = w;					/* Store the Unicode char */
1135:.\FatFs/ff.c  **** 	}
1136:.\FatFs/ff.c  **** 	*path = &p[si];						/* Return pointer to the next segment */
1137:.\FatFs/ff.c  **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1138:.\FatFs/ff.c  **** #if _FS_RPATH
1139:.\FatFs/ff.c  **** 	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
1140:.\FatFs/ff.c  **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
1141:.\FatFs/ff.c  **** 		lfn[di] = 0;
1142:.\FatFs/ff.c  **** 		for (i = 0; i < 11; i++)
1143:.\FatFs/ff.c  **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1144:.\FatFs/ff.c  **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1145:.\FatFs/ff.c  **** 		return FR_OK;
1146:.\FatFs/ff.c  **** 	}
1147:.\FatFs/ff.c  **** #endif
1148:.\FatFs/ff.c  **** 	while (di) {						/* Strip trailing spaces and dots */
1149:.\FatFs/ff.c  **** 		w = lfn[di - 1];
1150:.\FatFs/ff.c  **** 		if (w != ' ' && w != '.') break;
1151:.\FatFs/ff.c  **** 		di--;
1152:.\FatFs/ff.c  **** 	}
1153:.\FatFs/ff.c  **** 	if (!di) return FR_INVALID_NAME;	/* Reject null string */
1154:.\FatFs/ff.c  **** 
1155:.\FatFs/ff.c  **** 	lfn[di] = 0;						/* LFN is created */
1156:.\FatFs/ff.c  **** 
1157:.\FatFs/ff.c  **** 	/* Create SFN in directory form */
1158:.\FatFs/ff.c  **** 	mem_set(dj->fn, ' ', 11);
1159:.\FatFs/ff.c  **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1160:.\FatFs/ff.c  **** 	if (si) cf |= NS_LOSS | NS_LFN;
1161:.\FatFs/ff.c  **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1162:.\FatFs/ff.c  **** 
1163:.\FatFs/ff.c  **** 	b = i = 0; ni = 8;
1164:.\FatFs/ff.c  **** 	for (;;) {
1165:.\FatFs/ff.c  **** 		w = lfn[si++];					/* Get an LFN char */
1166:.\FatFs/ff.c  **** 		if (!w) break;					/* Break on end of the LFN */
1167:.\FatFs/ff.c  **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1168:.\FatFs/ff.c  **** 			cf |= NS_LOSS | NS_LFN; continue;
1169:.\FatFs/ff.c  **** 		}
1170:.\FatFs/ff.c  **** 
1171:.\FatFs/ff.c  **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1172:.\FatFs/ff.c  **** 			if (ni == 11) {				/* Long extension */
1173:.\FatFs/ff.c  **** 				cf |= NS_LOSS | NS_LFN; break;
1174:.\FatFs/ff.c  **** 			}
1175:.\FatFs/ff.c  **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1176:.\FatFs/ff.c  **** 			if (si > di) break;			/* No extension */
1177:.\FatFs/ff.c  **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1178:.\FatFs/ff.c  **** 			b <<= 2; continue;
1179:.\FatFs/ff.c  **** 		}
1180:.\FatFs/ff.c  **** 
1181:.\FatFs/ff.c  **** 		if (w >= 0x80) {				/* Non ASCII char */
1182:.\FatFs/ff.c  **** #ifdef _EXCVT
1183:.\FatFs/ff.c  **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1184:.\FatFs/ff.c  **** 			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1185:.\FatFs/ff.c  **** #else
1186:.\FatFs/ff.c  **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1187:.\FatFs/ff.c  **** #endif
1188:.\FatFs/ff.c  **** 			cf |= NS_LFN;				/* Force create LFN entry */
1189:.\FatFs/ff.c  **** 		}
1190:.\FatFs/ff.c  **** 
1191:.\FatFs/ff.c  **** 		if (_DF1S && w >= 0x100) {		/* Double byte char */
1192:.\FatFs/ff.c  **** 			if (i >= ni - 1) {
1193:.\FatFs/ff.c  **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1194:.\FatFs/ff.c  **** 			}
1195:.\FatFs/ff.c  **** 			dj->fn[i++] = (BYTE)(w >> 8);
1196:.\FatFs/ff.c  **** 		} else {						/* Single byte char */
1197:.\FatFs/ff.c  **** 			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
1198:.\FatFs/ff.c  **** 				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
1199:.\FatFs/ff.c  **** 			} else {
1200:.\FatFs/ff.c  **** 				if (IsUpper(w)) {		/* ASCII large capital */
1201:.\FatFs/ff.c  **** 					b |= 2;
1202:.\FatFs/ff.c  **** 				} else {
1203:.\FatFs/ff.c  **** 					if (IsLower(w)) {	/* ASCII small capital */
1204:.\FatFs/ff.c  **** 						b |= 1; w -= 0x20;
1205:.\FatFs/ff.c  **** 					}
1206:.\FatFs/ff.c  **** 				}
1207:.\FatFs/ff.c  **** 			}
1208:.\FatFs/ff.c  **** 		}
1209:.\FatFs/ff.c  **** 		dj->fn[i++] = (BYTE)w;
1210:.\FatFs/ff.c  **** 	}
1211:.\FatFs/ff.c  **** 
1212:.\FatFs/ff.c  **** 	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace 
1213:.\FatFs/ff.c  **** 
1214:.\FatFs/ff.c  **** 	if (ni == 8) b <<= 2;
1215:.\FatFs/ff.c  **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1216:.\FatFs/ff.c  **** 		cf |= NS_LFN;
1217:.\FatFs/ff.c  **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1218:.\FatFs/ff.c  **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1219:.\FatFs/ff.c  **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1220:.\FatFs/ff.c  **** 	}
1221:.\FatFs/ff.c  **** 
1222:.\FatFs/ff.c  **** 	dj->fn[NS] = cf;	/* SFN is created */
1223:.\FatFs/ff.c  **** 
1224:.\FatFs/ff.c  **** 	return FR_OK;
1225:.\FatFs/ff.c  **** 
1226:.\FatFs/ff.c  **** 
1227:.\FatFs/ff.c  **** #else	/* Non-LFN configuration */
1228:.\FatFs/ff.c  **** 	BYTE b, c, d, *sfn;
1229:.\FatFs/ff.c  **** 	int ni, si, i;
1230:.\FatFs/ff.c  **** 	const char *p;
1231:.\FatFs/ff.c  **** 
1232:.\FatFs/ff.c  **** 	/* Create file name in directory form */
1233:.\FatFs/ff.c  **** 	sfn = dj->fn;
1234:.\FatFs/ff.c  **** 	mem_set(sfn, ' ', 11);
1235:.\FatFs/ff.c  **** 	si = i = b = 0; ni = 8;
1236:.\FatFs/ff.c  **** 	p = *path;
1237:.\FatFs/ff.c  **** #if _FS_RPATH
1238:.\FatFs/ff.c  **** 	if (p[si] == '.') { /* Is this a dot entry? */
1239:.\FatFs/ff.c  **** 		for (;;) {
1240:.\FatFs/ff.c  **** 			c = p[si++];
1241:.\FatFs/ff.c  **** 			if (c != '.' || si >= 3) break;
1242:.\FatFs/ff.c  **** 			sfn[i++] = c;
1243:.\FatFs/ff.c  **** 		}
1244:.\FatFs/ff.c  **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1245:.\FatFs/ff.c  **** 		*path = &p[si];									/* Return pointer to the next segment */
1246:.\FatFs/ff.c  **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1247:.\FatFs/ff.c  **** 		return FR_OK;
1248:.\FatFs/ff.c  **** 	}
1249:.\FatFs/ff.c  **** #endif
1250:.\FatFs/ff.c  **** 	for (;;) {
1251:.\FatFs/ff.c  **** 		c = p[si++];
1252:.\FatFs/ff.c  **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1253:.\FatFs/ff.c  **** 		if (c == '.' || i >= ni) {
1254:.\FatFs/ff.c  **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1255:.\FatFs/ff.c  **** 			i = 8; ni = 11;
1256:.\FatFs/ff.c  **** 			b <<= 2; continue;
1257:.\FatFs/ff.c  **** 		}
1258:.\FatFs/ff.c  **** 		if (c >= 0x80) {				/* Extended char */
1259:.\FatFs/ff.c  **** #ifdef _EXCVT
1260:.\FatFs/ff.c  **** 			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
1261:.\FatFs/ff.c  **** #else
1262:.\FatFs/ff.c  **** 			b |= 3;						/* Eliminate NT flag if ext char is exist */
1263:.\FatFs/ff.c  **** #if !_DF1S	/* ASCII only cfg */
1264:.\FatFs/ff.c  **** 			return FR_INVALID_NAME;
1265:.\FatFs/ff.c  **** #endif
1266:.\FatFs/ff.c  **** #endif
1267:.\FatFs/ff.c  **** 		}
1268:.\FatFs/ff.c  **** 		if (IsDBCS1(c)) {				/* DBC 1st byte? */
1269:.\FatFs/ff.c  **** 			d = p[si++];				/* Get 2nd byte */
1270:.\FatFs/ff.c  **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1271:.\FatFs/ff.c  **** 				return FR_INVALID_NAME;
1272:.\FatFs/ff.c  **** 			sfn[i++] = c;
1273:.\FatFs/ff.c  **** 			sfn[i++] = d;
1274:.\FatFs/ff.c  **** 		} else {						/* Single byte code */
1275:.\FatFs/ff.c  **** 			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
1276:.\FatFs/ff.c  **** 				return FR_INVALID_NAME;
1277:.\FatFs/ff.c  **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1278:.\FatFs/ff.c  **** 				b |= 2;
1279:.\FatFs/ff.c  **** 			} else {
1280:.\FatFs/ff.c  **** 				if (IsLower(c)) {		/* ASCII small capital? */
1281:.\FatFs/ff.c  **** 					b |= 1; c -= 0x20;
1282:.\FatFs/ff.c  **** 				}
1283:.\FatFs/ff.c  **** 			}
1284:.\FatFs/ff.c  **** 			sfn[i++] = c;
1285:.\FatFs/ff.c  **** 		}
1286:.\FatFs/ff.c  **** 	}
1287:.\FatFs/ff.c  **** 	*path = &p[si];						/* Return pointer to the next segment */
1288:.\FatFs/ff.c  **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1289:.\FatFs/ff.c  **** 
1290:.\FatFs/ff.c  **** 	if (!i) return FR_INVALID_NAME;		/* Reject null string */
1291:.\FatFs/ff.c  **** 	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
1292:.\FatFs/ff.c  **** 
1293:.\FatFs/ff.c  **** 	if (ni == 8) b <<= 2;
1294:.\FatFs/ff.c  **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
1295:.\FatFs/ff.c  **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
1296:.\FatFs/ff.c  **** 
1297:.\FatFs/ff.c  **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1298:.\FatFs/ff.c  **** 
1299:.\FatFs/ff.c  **** 	return FR_OK;
1300:.\FatFs/ff.c  **** #endif
1301:.\FatFs/ff.c  **** }
1302:.\FatFs/ff.c  **** 
1303:.\FatFs/ff.c  **** 
1304:.\FatFs/ff.c  **** 
1305:.\FatFs/ff.c  **** 
1306:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1307:.\FatFs/ff.c  **** /* Get file information from directory entry                             */
1308:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1309:.\FatFs/ff.c  **** #if _FS_MINIMIZE <= 1
1310:.\FatFs/ff.c  **** static
1311:.\FatFs/ff.c  **** void get_fileinfo (		/* No return code */
1312:.\FatFs/ff.c  **** 	DIR *dj,			/* Pointer to the directory object */
1313:.\FatFs/ff.c  **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1314:.\FatFs/ff.c  **** )
1315:.\FatFs/ff.c  **** {
1316:.\FatFs/ff.c  **** 	int i;
1317:.\FatFs/ff.c  **** 	BYTE c, nt, *dir;
1318:.\FatFs/ff.c  **** 	char *p;
1319:.\FatFs/ff.c  **** 
1320:.\FatFs/ff.c  **** 
1321:.\FatFs/ff.c  **** 	p = fno->fname;
1322:.\FatFs/ff.c  **** 	if (dj->sect) {
1323:.\FatFs/ff.c  **** 		dir = dj->dir;
1324:.\FatFs/ff.c  **** 		nt = dir[DIR_NTres];		/* NT flag */
1325:.\FatFs/ff.c  **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
1326:.\FatFs/ff.c  **** 			c = dir[i];
1327:.\FatFs/ff.c  **** 			if (c == ' ') break;
1328:.\FatFs/ff.c  **** 			if (c == 0x05) c = 0xE5;
1329:.\FatFs/ff.c  **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1330:.\FatFs/ff.c  **** 			*p++ = c;
1331:.\FatFs/ff.c  **** 		}
1332:.\FatFs/ff.c  **** 		if (dir[8] != ' ') {		/* Copy name extension */
1333:.\FatFs/ff.c  **** 			*p++ = '.';
1334:.\FatFs/ff.c  **** 			for (i = 8; i < 11; i++) {
1335:.\FatFs/ff.c  **** 				c = dir[i];
1336:.\FatFs/ff.c  **** 				if (c == ' ') break;
1337:.\FatFs/ff.c  **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1338:.\FatFs/ff.c  **** 				*p++ = c;
1339:.\FatFs/ff.c  **** 			}
1340:.\FatFs/ff.c  **** 		}
1341:.\FatFs/ff.c  **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
1342:.\FatFs/ff.c  **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
1343:.\FatFs/ff.c  **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
1344:.\FatFs/ff.c  **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
1345:.\FatFs/ff.c  **** 	}
1346:.\FatFs/ff.c  **** 	*p = 0;
1347:.\FatFs/ff.c  **** 
1348:.\FatFs/ff.c  **** #if _USE_LFN
1349:.\FatFs/ff.c  **** 	if (fno->lfname) {
1350:.\FatFs/ff.c  **** 		XCHAR *tp = fno->lfname;
1351:.\FatFs/ff.c  **** 		WCHAR w, *lfn;
1352:.\FatFs/ff.c  **** 
1353:.\FatFs/ff.c  **** 		i = 0;
1354:.\FatFs/ff.c  **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1355:.\FatFs/ff.c  **** 			lfn = dj->lfn;
1356:.\FatFs/ff.c  **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1357:.\FatFs/ff.c  **** #if !_LFN_UNICODE
1358:.\FatFs/ff.c  **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1359:.\FatFs/ff.c  **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1360:.\FatFs/ff.c  **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
1361:.\FatFs/ff.c  **** 					tp[i++] = (XCHAR)(w >> 8);
1362:.\FatFs/ff.c  **** #endif
1363:.\FatFs/ff.c  **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
1364:.\FatFs/ff.c  **** 				tp[i++] = (XCHAR)w;
1365:.\FatFs/ff.c  **** 			}
1366:.\FatFs/ff.c  **** 		}
1367:.\FatFs/ff.c  **** 		tp[i] = 0;	/* Terminator */
1368:.\FatFs/ff.c  **** 	}
1369:.\FatFs/ff.c  **** #endif
1370:.\FatFs/ff.c  **** }
1371:.\FatFs/ff.c  **** #endif /* _FS_MINIMIZE <= 1 */
1372:.\FatFs/ff.c  **** 
1373:.\FatFs/ff.c  **** 
1374:.\FatFs/ff.c  **** 
1375:.\FatFs/ff.c  **** 
1376:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1377:.\FatFs/ff.c  **** /* Follow a file path                                                    */
1378:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1379:.\FatFs/ff.c  **** 
1380:.\FatFs/ff.c  **** static
1381:.\FatFs/ff.c  **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1382:.\FatFs/ff.c  **** 	DIR *dj,			/* Directory object to return last directory and found object */
1383:.\FatFs/ff.c  **** 	const XCHAR *path	/* Full-path string to find a file or directory */
1384:.\FatFs/ff.c  **** )
1385:.\FatFs/ff.c  **** {
1386:.\FatFs/ff.c  **** 	FRESULT res;
1387:.\FatFs/ff.c  **** 	BYTE *dir, last;
1388:.\FatFs/ff.c  **** 
1389:.\FatFs/ff.c  **** 
1390:.\FatFs/ff.c  **** 	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
1391:.\FatFs/ff.c  **** #if _FS_RPATH
1392:.\FatFs/ff.c  **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1393:.\FatFs/ff.c  **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1394:.\FatFs/ff.c  **** 	} else {							/* No heading separator */
1395:.\FatFs/ff.c  **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1396:.\FatFs/ff.c  **** 	}
1397:.\FatFs/ff.c  **** #else
1398:.\FatFs/ff.c  **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1399:.\FatFs/ff.c  **** 		path++;
1400:.\FatFs/ff.c  **** 	dj->sclust = 0;						/* Start from the root dir */
1401:.\FatFs/ff.c  **** #endif
1402:.\FatFs/ff.c  **** 
1403:.\FatFs/ff.c  **** 	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
1404:.\FatFs/ff.c  **** 		res = dir_seek(dj, 0);
1405:.\FatFs/ff.c  **** 		dj->dir = NULL;
1406:.\FatFs/ff.c  **** 
1407:.\FatFs/ff.c  **** 	} else {							/* Follow path */
1408:.\FatFs/ff.c  **** 		for (;;) {
1409:.\FatFs/ff.c  **** 			res = create_name(dj, &path);	/* Get a segment */
1410:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
1411:.\FatFs/ff.c  **** 			res = dir_find(dj);				/* Find it */
1412:.\FatFs/ff.c  **** 			last = *(dj->fn+NS) & NS_LAST;
1413:.\FatFs/ff.c  **** 			if (res != FR_OK) {				/* Could not find the object */
1414:.\FatFs/ff.c  **** 				if (res == FR_NO_FILE && !last)
1415:.\FatFs/ff.c  **** 					res = FR_NO_PATH;
1416:.\FatFs/ff.c  **** 				break;
1417:.\FatFs/ff.c  **** 			}
1418:.\FatFs/ff.c  **** 			if (last) break;				/* Last segment match. Function completed. */
1419:.\FatFs/ff.c  **** 			dir = dj->dir;					/* There is next segment. Follow the sub directory */
1420:.\FatFs/ff.c  **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
1421:.\FatFs/ff.c  **** 				res = FR_NO_PATH; break;
1422:.\FatFs/ff.c  **** 			}
1423:.\FatFs/ff.c  **** 			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
1424:.\FatFs/ff.c  **** 		}
1425:.\FatFs/ff.c  **** 	}
1426:.\FatFs/ff.c  **** 
1427:.\FatFs/ff.c  **** 	return res;
1428:.\FatFs/ff.c  **** }
1429:.\FatFs/ff.c  **** 
1430:.\FatFs/ff.c  **** 
1431:.\FatFs/ff.c  **** 
1432:.\FatFs/ff.c  **** 
1433:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1434:.\FatFs/ff.c  **** /* Load boot record and check if it is an FAT boot record                */
1435:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1436:.\FatFs/ff.c  **** 
1437:.\FatFs/ff.c  **** static
1438:.\FatFs/ff.c  **** BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 
1439:.\FatFs/ff.c  **** 	FATFS *fs,	/* File system object */
1440:.\FatFs/ff.c  **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1441:.\FatFs/ff.c  **** )
1442:.\FatFs/ff.c  **** {
 246              		.loc 1 1442 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              	.LVL33:
 251 0000 10B5     		push	{r4, lr}
 252              	.LCFI1:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 4, -8
 255              		.cfi_offset 14, -4
 256 0002 0446     		mov	r4, r0
 257 0004 0A46     		mov	r2, r1
1443:.\FatFs/ff.c  **** 	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 258              		.loc 1 1443 0
 259 0006 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 260              	.LVL34:
 261 0008 04F13001 		add	r1, r4, #48
 262              	.LVL35:
 263 000c 0123     		movs	r3, #1
 264 000e FFF7FEFF 		bl	disk_read
 265              	.LVL36:
 266 0012 A0B9     		cbnz	r0, .L25
1444:.\FatFs/ff.c  **** 		return 3;
1445:.\FatFs/ff.c  **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 267              		.loc 1 1445 0
 268 0014 B4F82E22 		ldrh	r2, [r4, #558]
 269 0018 4AF65523 		movw	r3, #43605
 270 001c 9A42     		cmp	r2, r3
 271 001e 10D1     		bne	.L26
1446:.\FatFs/ff.c  **** 		return 2;
1447:.\FatFs/ff.c  **** 
1448:.\FatFs/ff.c  **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 272              		.loc 1 1448 0
 273 0020 D4F86630 		ldr	r3, [r4, #102]
 274 0024 23F07F43 		bic	r3, r3, #-16777216
 275 0028 084A     		ldr	r2, .L29
 276 002a 9342     		cmp	r3, r2
 277 002c 0BD0     		beq	.L27
1449:.\FatFs/ff.c  **** 		return 0;
1450:.\FatFs/ff.c  **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 278              		.loc 1 1450 0
 279 002e D4F88200 		ldr	r0, [r4, #130]
 280 0032 20F07F43 		bic	r3, r0, #-16777216
1444:.\FatFs/ff.c  **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 281              		.loc 1 1444 0
 282 0036 981A     		subs	r0, r3, r2
 283 0038 18BF     		it	ne
 284 003a 0120     		movne	r0, #1
 285 003c 10BD     		pop	{r4, pc}
 286              	.LVL37:
 287              	.L25:
 288 003e 0320     		movs	r0, #3
 289 0040 10BD     		pop	{r4, pc}
 290              	.LVL38:
 291              	.L26:
1446:.\FatFs/ff.c  **** 		return 2;
 292              		.loc 1 1446 0
 293 0042 0220     		movs	r0, #2
 294 0044 10BD     		pop	{r4, pc}
 295              	.LVL39:
 296              	.L27:
1449:.\FatFs/ff.c  **** 		return 0;
 297              		.loc 1 1449 0
 298 0046 0020     		movs	r0, #0
1451:.\FatFs/ff.c  **** 		return 0;
1452:.\FatFs/ff.c  **** 
1453:.\FatFs/ff.c  **** 	return 1;
1454:.\FatFs/ff.c  **** }
 299              		.loc 1 1454 0
 300 0048 10BD     		pop	{r4, pc}
 301              	.LVL40:
 302              	.L30:
 303 004a 00BF     		.align	2
 304              	.L29:
 305 004c 46415400 		.word	5521734
 306              		.cfi_endproc
 307              	.LFE54:
 309              		.section	.text.validate,"ax",%progbits
 310              		.align	2
 311              		.thumb
 312              		.thumb_func
 314              	validate:
 315              	.LFB56:
1455:.\FatFs/ff.c  **** 
1456:.\FatFs/ff.c  **** 
1457:.\FatFs/ff.c  **** 
1458:.\FatFs/ff.c  **** 
1459:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1460:.\FatFs/ff.c  **** /* Make sure that the file system is valid                               */
1461:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1462:.\FatFs/ff.c  **** 
1463:.\FatFs/ff.c  **** 
1464:.\FatFs/ff.c  **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
1465:.\FatFs/ff.c  **** 	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
1466:.\FatFs/ff.c  **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
1467:.\FatFs/ff.c  **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
1468:.\FatFs/ff.c  **** )
1469:.\FatFs/ff.c  **** {
1470:.\FatFs/ff.c  **** 	BYTE fmt, *tbl;
1471:.\FatFs/ff.c  **** 	UINT vol;
1472:.\FatFs/ff.c  **** 	DSTATUS stat;
1473:.\FatFs/ff.c  **** 	DWORD bsect, fsize, tsect, mclst;
1474:.\FatFs/ff.c  **** 	const XCHAR *p = *path;
1475:.\FatFs/ff.c  **** 	FATFS *fs;
1476:.\FatFs/ff.c  **** 
1477:.\FatFs/ff.c  **** 	/* Get logical drive number from the path name */
1478:.\FatFs/ff.c  **** 	vol = p[0] - '0';				/* Is there a drive number? */
1479:.\FatFs/ff.c  **** 	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
1480:.\FatFs/ff.c  **** 		p += 2; *path = p;			/* Return pointer to the path name */
1481:.\FatFs/ff.c  **** 	} else {						/* No drive number is given */
1482:.\FatFs/ff.c  **** #if _FS_RPATH
1483:.\FatFs/ff.c  **** 		vol = Drive;				/* Use current drive */
1484:.\FatFs/ff.c  **** #else
1485:.\FatFs/ff.c  **** 		vol = 0;					/* Use drive 0 */
1486:.\FatFs/ff.c  **** #endif
1487:.\FatFs/ff.c  **** 	}
1488:.\FatFs/ff.c  **** 
1489:.\FatFs/ff.c  **** 	/* Check if the logical drive is valid or not */
1490:.\FatFs/ff.c  **** 	if (vol >= _DRIVES) 			/* Is the drive number valid? */
1491:.\FatFs/ff.c  **** 		return FR_INVALID_DRIVE;
1492:.\FatFs/ff.c  **** 	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
1493:.\FatFs/ff.c  **** 	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
1494:.\FatFs/ff.c  **** 
1495:.\FatFs/ff.c  **** 	ENTER_FF(fs);					/* Lock file system */
1496:.\FatFs/ff.c  **** 
1497:.\FatFs/ff.c  **** 	if (fs->fs_type) {				/* If the logical drive has been mounted */
1498:.\FatFs/ff.c  **** 		stat = disk_status(fs->drive);
1499:.\FatFs/ff.c  **** 		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed),
1500:.\FatFs/ff.c  **** #if !_FS_READONLY
1501:.\FatFs/ff.c  **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
1502:.\FatFs/ff.c  **** 				return FR_WRITE_PROTECTED;
1503:.\FatFs/ff.c  **** #endif
1504:.\FatFs/ff.c  **** 			return FR_OK;			/* The file system object is valid */
1505:.\FatFs/ff.c  **** 		}
1506:.\FatFs/ff.c  **** 	}
1507:.\FatFs/ff.c  **** 
1508:.\FatFs/ff.c  **** 	/* The logical drive must be mounted. Following code attempts to mount the volume */
1509:.\FatFs/ff.c  **** 
1510:.\FatFs/ff.c  **** 	fs->fs_type = 0;					/* Clear the file system object */
1511:.\FatFs/ff.c  **** 	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
1512:.\FatFs/ff.c  **** 	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
1513:.\FatFs/ff.c  **** 	if (stat & STA_NOINIT)				/* Check if the drive is ready */
1514:.\FatFs/ff.c  **** 		return FR_NOT_READY;
1515:.\FatFs/ff.c  **** #if _MAX_SS != 512						/* Get disk sector size if needed */
1516:.\FatFs/ff.c  **** 	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
1517:.\FatFs/ff.c  **** 		return FR_NO_FILESYSTEM;
1518:.\FatFs/ff.c  **** #endif
1519:.\FatFs/ff.c  **** #if !_FS_READONLY
1520:.\FatFs/ff.c  **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
1521:.\FatFs/ff.c  **** 		return FR_WRITE_PROTECTED;
1522:.\FatFs/ff.c  **** #endif
1523:.\FatFs/ff.c  **** 	/* Search FAT partition on the drive */
1524:.\FatFs/ff.c  **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
1525:.\FatFs/ff.c  **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be partitioned */
1526:.\FatFs/ff.c  **** 		/* Check a partition listed in top of the partition table */
1527:.\FatFs/ff.c  **** 		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
1528:.\FatFs/ff.c  **** 		if (tbl[4]) {									/* Is the partition existing? */
1529:.\FatFs/ff.c  **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
1530:.\FatFs/ff.c  **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
1531:.\FatFs/ff.c  **** 		}
1532:.\FatFs/ff.c  **** 	}
1533:.\FatFs/ff.c  **** 	if (fmt == 3) return FR_DISK_ERR;
1534:.\FatFs/ff.c  **** 	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT partition is found */
1535:.\FatFs/ff.c  **** 		return FR_NO_FILESYSTEM;
1536:.\FatFs/ff.c  **** 
1537:.\FatFs/ff.c  **** 	/* Initialize the file system object */
1538:.\FatFs/ff.c  **** 	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
1539:.\FatFs/ff.c  **** 	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
1540:.\FatFs/ff.c  **** 	fs->sects_fat = fsize;
1541:.\FatFs/ff.c  **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
1542:.\FatFs/ff.c  **** 	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
1543:.\FatFs/ff.c  **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
1544:.\FatFs/ff.c  **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
1545:.\FatFs/ff.c  **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
1546:.\FatFs/ff.c  **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
1547:.\FatFs/ff.c  **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
1548:.\FatFs/ff.c  **** 	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
1549:.\FatFs/ff.c  **** 		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
1550:.\FatFs/ff.c  **** 		) / fs->csize + 2;
1551:.\FatFs/ff.c  **** 
1552:.\FatFs/ff.c  **** 	fmt = FS_FAT12;										/* Determine the FAT sub type */
1553:.\FatFs/ff.c  **** 	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
1554:.\FatFs/ff.c  **** 	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
1555:.\FatFs/ff.c  **** 
1556:.\FatFs/ff.c  **** 	if (fmt == FS_FAT32)
1557:.\FatFs/ff.c  **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
1558:.\FatFs/ff.c  **** 	else
1559:.\FatFs/ff.c  **** 		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
1560:.\FatFs/ff.c  **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
1561:.\FatFs/ff.c  **** 
1562:.\FatFs/ff.c  **** #if !_FS_READONLY
1563:.\FatFs/ff.c  **** 	/* Initialize allocation information */
1564:.\FatFs/ff.c  **** 	fs->free_clust = 0xFFFFFFFF;
1565:.\FatFs/ff.c  **** 	fs->wflag = 0;
1566:.\FatFs/ff.c  **** 	/* Get fsinfo if needed */
1567:.\FatFs/ff.c  **** 	if (fmt == FS_FAT32) {
1568:.\FatFs/ff.c  **** 	 	fs->fsi_flag = 0;
1569:.\FatFs/ff.c  **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
1570:.\FatFs/ff.c  **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
1571:.\FatFs/ff.c  **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
1572:.\FatFs/ff.c  **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
1573:.\FatFs/ff.c  **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
1574:.\FatFs/ff.c  **** 			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
1575:.\FatFs/ff.c  **** 			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
1576:.\FatFs/ff.c  **** 		}
1577:.\FatFs/ff.c  **** 	}
1578:.\FatFs/ff.c  **** #endif
1579:.\FatFs/ff.c  **** 	fs->fs_type = fmt;		/* FAT sub-type */
1580:.\FatFs/ff.c  **** 	fs->winsect = 0;		/* Invalidate sector cache */
1581:.\FatFs/ff.c  **** #if _FS_RPATH
1582:.\FatFs/ff.c  **** 	fs->cdir = 0;			/* Current directory (root dir) */
1583:.\FatFs/ff.c  **** #endif
1584:.\FatFs/ff.c  **** 	fs->id = ++Fsid;		/* File system mount ID */
1585:.\FatFs/ff.c  **** 
1586:.\FatFs/ff.c  **** 	return FR_OK;
1587:.\FatFs/ff.c  **** }
1588:.\FatFs/ff.c  **** 
1589:.\FatFs/ff.c  **** 
1590:.\FatFs/ff.c  **** 
1591:.\FatFs/ff.c  **** 
1592:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1593:.\FatFs/ff.c  **** /* Check if the file/dir object is valid or not                          */
1594:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1595:.\FatFs/ff.c  **** 
1596:.\FatFs/ff.c  **** static
1597:.\FatFs/ff.c  **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
1598:.\FatFs/ff.c  **** 	FATFS *fs,		/* Pointer to the file system object */
1599:.\FatFs/ff.c  **** 	WORD id			/* Member id of the target object to be checked */
1600:.\FatFs/ff.c  **** )
1601:.\FatFs/ff.c  **** {
 316              		.loc 1 1601 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              	.LVL41:
1602:.\FatFs/ff.c  **** 	if (!fs || !fs->fs_type || fs->id != id)
 321              		.loc 1 1602 0
 322 0000 78B1     		cbz	r0, .L33
1601:.\FatFs/ff.c  **** 	if (!fs || !fs->fs_type || fs->id != id)
 323              		.loc 1 1601 0 discriminator 1
 324 0002 08B5     		push	{r3, lr}
 325              	.LCFI2:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 329              		.loc 1 1602 0 discriminator 1
 330 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 331 0006 72B1     		cbz	r2, .L34
 332              		.loc 1 1602 0 is_stmt 0 discriminator 2
 333 0008 C288     		ldrh	r2, [r0, #6]
 334 000a 8A42     		cmp	r2, r1
 335 000c 0DD1     		bne	.L35
1603:.\FatFs/ff.c  **** 		return FR_INVALID_OBJECT;
1604:.\FatFs/ff.c  **** 
1605:.\FatFs/ff.c  **** 	ENTER_FF(fs);		/* Lock file system */
1606:.\FatFs/ff.c  **** 
1607:.\FatFs/ff.c  **** 	if (disk_status(fs->drive) & STA_NOINIT)
 336              		.loc 1 1607 0 is_stmt 1
 337 000e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 338              	.LVL42:
 339 0010 FFF7FEFF 		bl	disk_status
 340              	.LVL43:
 341 0014 00F00100 		and	r0, r0, #1
1608:.\FatFs/ff.c  **** 		return FR_NOT_READY;
1609:.\FatFs/ff.c  **** 
1610:.\FatFs/ff.c  **** 	return FR_OK;
 342              		.loc 1 1610 0
 343 0018 0028     		cmp	r0, #0
 344 001a 14BF     		ite	ne
 345 001c 0320     		movne	r0, #3
 346 001e 0020     		moveq	r0, #0
 347 0020 08BD     		pop	{r3, pc}
 348              	.LVL44:
 349              	.L33:
 350              	.LCFI3:
 351              		.cfi_def_cfa_offset 0
 352              		.cfi_restore 3
 353              		.cfi_restore 14
1603:.\FatFs/ff.c  **** 		return FR_INVALID_OBJECT;
 354              		.loc 1 1603 0
 355 0022 0920     		movs	r0, #9
 356              	.LVL45:
1611:.\FatFs/ff.c  **** }
 357              		.loc 1 1611 0
 358 0024 7047     		bx	lr
 359              	.LVL46:
 360              	.L34:
 361              	.LCFI4:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 3, -8
 364              		.cfi_offset 14, -4
1603:.\FatFs/ff.c  **** 		return FR_INVALID_OBJECT;
 365              		.loc 1 1603 0
 366 0026 0920     		movs	r0, #9
 367              	.LVL47:
 368 0028 08BD     		pop	{r3, pc}
 369              	.LVL48:
 370              	.L35:
 371 002a 0920     		movs	r0, #9
 372              	.LVL49:
 373              		.loc 1 1611 0
 374 002c 08BD     		pop	{r3, pc}
 375              		.cfi_endproc
 376              	.LFE56:
 378 002e 00BF     		.section	.text.get_fileinfo,"ax",%progbits
 379              		.align	2
 380              		.thumb
 381              		.thumb_func
 383              	get_fileinfo:
 384              	.LFB52:
1315:.\FatFs/ff.c  **** 	int i;
 385              		.loc 1 1315 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              	.LVL50:
 390 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 391              	.LCFI5:
 392              		.cfi_def_cfa_offset 32
 393              		.cfi_offset 3, -32
 394              		.cfi_offset 4, -28
 395              		.cfi_offset 5, -24
 396              		.cfi_offset 6, -20
 397              		.cfi_offset 7, -16
 398              		.cfi_offset 8, -12
 399              		.cfi_offset 9, -8
 400              		.cfi_offset 14, -4
1321:.\FatFs/ff.c  **** 	if (dj->sect) {
 401              		.loc 1 1321 0
 402 0004 01F10902 		add	r2, r1, #9
 403              	.LVL51:
1322:.\FatFs/ff.c  **** 		dir = dj->dir;
 404              		.loc 1 1322 0
 405 0008 0369     		ldr	r3, [r0, #16]
 406 000a 002B     		cmp	r3, #0
 407 000c 58D0     		beq	.L39
1323:.\FatFs/ff.c  **** 		nt = dir[DIR_NTres];		/* NT flag */
 408              		.loc 1 1323 0
 409 000e 4669     		ldr	r6, [r0, #20]
 410              	.LVL52:
1324:.\FatFs/ff.c  **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 411              		.loc 1 1324 0
 412 0010 96F80CC0 		ldrb	ip, [r6, #12]	@ zero_extendqisi2
 413              	.LVL53:
1326:.\FatFs/ff.c  **** 			if (c == ' ') break;
 414              		.loc 1 1326 0
 415 0014 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 416              	.LVL54:
1327:.\FatFs/ff.c  **** 			if (c == 0x05) c = 0xE5;
 417              		.loc 1 1327 0
 418 0016 202B     		cmp	r3, #32
 419 0018 20D0     		beq	.L51
 420 001a 3546     		mov	r5, r6
 421 001c 01F11107 		add	r7, r1, #17
1328:.\FatFs/ff.c  **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 422              		.loc 1 1328 0
 423 0020 4FF0E508 		mov	r8, #229
1329:.\FatFs/ff.c  **** 			*p++ = c;
 424              		.loc 1 1329 0
 425 0024 0CF0080E 		and	lr, ip, #8
 426 0028 5FFA8EFE 		uxtb	lr, lr
 427 002c 03E0     		b	.L41
 428              	.L43:
1326:.\FatFs/ff.c  **** 			if (c == ' ') break;
 429              		.loc 1 1326 0
 430 002e 15F8013F 		ldrb	r3, [r5, #1]!	@ zero_extendqisi2
 431              	.LVL55:
1327:.\FatFs/ff.c  **** 			if (c == 0x05) c = 0xE5;
 432              		.loc 1 1327 0
 433 0032 202B     		cmp	r3, #32
 434 0034 14D0     		beq	.L52
 435              	.LVL56:
 436              	.L41:
1328:.\FatFs/ff.c  **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 437              		.loc 1 1328 0
 438 0036 052B     		cmp	r3, #5
 439 0038 0AD0     		beq	.L53
1329:.\FatFs/ff.c  **** 			*p++ = c;
 440              		.loc 1 1329 0
 441 003a BEF1000F 		cmp	lr, #0
 442 003e 08D0     		beq	.L42
1329:.\FatFs/ff.c  **** 			*p++ = c;
 443              		.loc 1 1329 0 is_stmt 0 discriminator 1
 444 0040 A3F14104 		sub	r4, r3, #65
 445 0044 E4B2     		uxtb	r4, r4
 446 0046 192C     		cmp	r4, #25
 447 0048 03D8     		bhi	.L42
1329:.\FatFs/ff.c  **** 			*p++ = c;
 448              		.loc 1 1329 0 discriminator 2
 449 004a 2033     		adds	r3, r3, #32
 450              	.LVL57:
 451 004c DBB2     		uxtb	r3, r3
 452              	.LVL58:
 453 004e 00E0     		b	.L42
 454              	.L53:
1328:.\FatFs/ff.c  **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
 455              		.loc 1 1328 0 is_stmt 1
 456 0050 4346     		mov	r3, r8
 457              	.LVL59:
 458              	.L42:
1330:.\FatFs/ff.c  **** 		}
 459              		.loc 1 1330 0 discriminator 2
 460 0052 02F8013B 		strb	r3, [r2], #1
 461              	.LVL60:
1325:.\FatFs/ff.c  **** 			c = dir[i];
 462              		.loc 1 1325 0 discriminator 2
 463 0056 BA42     		cmp	r2, r7
 464 0058 E9D1     		bne	.L43
 465 005a 02E0     		b	.L40
 466              	.L51:
1321:.\FatFs/ff.c  **** 	if (dj->sect) {
 467              		.loc 1 1321 0
 468 005c 1746     		mov	r7, r2
 469 005e 00E0     		b	.L40
 470              	.L52:
1330:.\FatFs/ff.c  **** 		}
 471              		.loc 1 1330 0
 472 0060 1746     		mov	r7, r2
 473              	.LVL61:
 474              	.L40:
1332:.\FatFs/ff.c  **** 			*p++ = '.';
 475              		.loc 1 1332 0
 476 0062 337A     		ldrb	r3, [r6, #8]	@ zero_extendqisi2
 477              	.LVL62:
 478 0064 202B     		cmp	r3, #32
 479 0066 1ED0     		beq	.L54
1333:.\FatFs/ff.c  **** 			for (i = 8; i < 11; i++) {
 480              		.loc 1 1333 0
 481 0068 7D1C     		adds	r5, r7, #1
 482              	.LVL63:
 483 006a 2E23     		movs	r3, #46
 484 006c 3B70     		strb	r3, [r7]
 485              	.LVL64:
1335:.\FatFs/ff.c  **** 				if (c == ' ') break;
 486              		.loc 1 1335 0
 487 006e 337A     		ldrb	r3, [r6, #8]	@ zero_extendqisi2
 488              	.LVL65:
1336:.\FatFs/ff.c  **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 489              		.loc 1 1336 0
 490 0070 202B     		cmp	r3, #32
 491 0072 1AD0     		beq	.L55
 492 0074 06F1080E 		add	lr, r6, #8
 493 0078 3A1D     		adds	r2, r7, #4
1337:.\FatFs/ff.c  **** 				*p++ = c;
 494              		.loc 1 1337 0
 495 007a 0CF0100C 		and	ip, ip, #16
 496              	.LVL66:
 497 007e 5FFA8CF4 		uxtb	r4, ip
 498 0082 03E0     		b	.L45
 499              	.LVL67:
 500              	.L47:
1335:.\FatFs/ff.c  **** 				if (c == ' ') break;
 501              		.loc 1 1335 0
 502 0084 1EF8013F 		ldrb	r3, [lr, #1]!	@ zero_extendqisi2
 503              	.LVL68:
1336:.\FatFs/ff.c  **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
 504              		.loc 1 1336 0
 505 0088 202B     		cmp	r3, #32
 506 008a 10D0     		beq	.L56
 507              	.LVL69:
 508              	.L45:
1337:.\FatFs/ff.c  **** 				*p++ = c;
 509              		.loc 1 1337 0
 510 008c 34B1     		cbz	r4, .L46
1337:.\FatFs/ff.c  **** 				*p++ = c;
 511              		.loc 1 1337 0 is_stmt 0 discriminator 1
 512 008e A3F14107 		sub	r7, r3, #65
 513 0092 FFB2     		uxtb	r7, r7
 514 0094 192F     		cmp	r7, #25
 515 0096 9CBF     		itt	ls
 516 0098 2033     		addls	r3, r3, #32
 517              	.LVL70:
 518 009a DBB2     		uxtbls	r3, r3
 519              	.LVL71:
 520              	.L46:
1338:.\FatFs/ff.c  **** 			}
 521              		.loc 1 1338 0 is_stmt 1 discriminator 2
 522 009c 05F8013B 		strb	r3, [r5], #1
 523              	.LVL72:
1334:.\FatFs/ff.c  **** 				c = dir[i];
 524              		.loc 1 1334 0 discriminator 2
 525 00a0 9542     		cmp	r5, r2
 526 00a2 EFD1     		bne	.L47
 527 00a4 04E0     		b	.L44
 528              	.LVL73:
 529              	.L54:
 530 00a6 3A46     		mov	r2, r7
 531              	.LVL74:
 532 00a8 02E0     		b	.L44
 533              	.LVL75:
 534              	.L55:
1333:.\FatFs/ff.c  **** 			for (i = 8; i < 11; i++) {
 535              		.loc 1 1333 0
 536 00aa 2A46     		mov	r2, r5
 537 00ac 00E0     		b	.L44
 538              	.LVL76:
 539              	.L56:
1338:.\FatFs/ff.c  **** 			}
 540              		.loc 1 1338 0
 541 00ae 2A46     		mov	r2, r5
 542              	.LVL77:
 543              	.L44:
1341:.\FatFs/ff.c  **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 544              		.loc 1 1341 0
 545 00b0 F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 546 00b2 0B72     		strb	r3, [r1, #8]
1342:.\FatFs/ff.c  **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 547              		.loc 1 1342 0
 548 00b4 F369     		ldr	r3, [r6, #28]
 549 00b6 0B60     		str	r3, [r1]
1343:.\FatFs/ff.c  **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 550              		.loc 1 1343 0
 551 00b8 338B     		ldrh	r3, [r6, #24]
 552 00ba 8B80     		strh	r3, [r1, #4]	@ movhi
1344:.\FatFs/ff.c  **** 	}
 553              		.loc 1 1344 0
 554 00bc F38A     		ldrh	r3, [r6, #22]
 555 00be CB80     		strh	r3, [r1, #6]	@ movhi
 556              	.LVL78:
 557              	.L39:
1346:.\FatFs/ff.c  **** 
 558              		.loc 1 1346 0
 559 00c0 0023     		movs	r3, #0
 560 00c2 1370     		strb	r3, [r2]
1349:.\FatFs/ff.c  **** 		XCHAR *tp = fno->lfname;
 561              		.loc 1 1349 0
 562 00c4 D1F81890 		ldr	r9, [r1, #24]
 563 00c8 B9F1000F 		cmp	r9, #0
 564 00cc 2AD0     		beq	.L38
 565              	.LVL79:
 566              	.LBB3:
1354:.\FatFs/ff.c  **** 			lfn = dj->lfn;
 567              		.loc 1 1354 0
 568 00ce 0369     		ldr	r3, [r0, #16]
 569 00d0 E3B1     		cbz	r3, .L57
1354:.\FatFs/ff.c  **** 			lfn = dj->lfn;
 570              		.loc 1 1354 0 is_stmt 0 discriminator 1
 571 00d2 028C     		ldrh	r2, [r0, #32]
 572              	.LVL80:
 573 00d4 4FF6FF73 		movw	r3, #65535
 574 00d8 9A42     		cmp	r2, r3
 575 00da 19D0     		beq	.L58
1355:.\FatFs/ff.c  **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
 576              		.loc 1 1355 0 is_stmt 1
 577 00dc C769     		ldr	r7, [r0, #28]
 578              	.LVL81:
1356:.\FatFs/ff.c  **** #if !_LFN_UNICODE
 579              		.loc 1 1356 0
 580 00de 3888     		ldrh	r0, [r7]
 581              	.LVL82:
 582 00e0 C0B1     		cbz	r0, .L59
 583 00e2 0D46     		mov	r5, r1
 584 00e4 09F1FF36 		add	r6, r9, #-1
 585 00e8 0024     		movs	r4, #0
1358:.\FatFs/ff.c  **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
 586              		.loc 1 1358 0
 587 00ea A046     		mov	r8, r4
 588              	.LVL83:
 589              	.L50:
 590 00ec 4146     		mov	r1, r8
 591 00ee FFF7FEFF 		bl	ff_convert
 592              	.LVL84:
1359:.\FatFs/ff.c  **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
 593              		.loc 1 1359 0
 594 00f2 88B1     		cbz	r0, .L60
1363:.\FatFs/ff.c  **** 				tp[i++] = (XCHAR)w;
 595              		.loc 1 1363 0
 596 00f4 EB69     		ldr	r3, [r5, #28]
 597 00f6 013B     		subs	r3, r3, #1
 598 00f8 A342     		cmp	r3, r4
 599 00fa 0FDD     		ble	.L61
1364:.\FatFs/ff.c  **** 			}
 600              		.loc 1 1364 0
 601 00fc 0134     		adds	r4, r4, #1
 602              	.LVL85:
 603 00fe 06F8010F 		strb	r0, [r6, #1]!
 604              	.LVL86:
1356:.\FatFs/ff.c  **** #if !_LFN_UNICODE
 605              		.loc 1 1356 0
 606 0102 37F81400 		ldrh	r0, [r7, r4, lsl #1]
 607              	.LVL87:
 608 0106 0028     		cmp	r0, #0
 609 0108 F0D1     		bne	.L50
 610 010a 08E0     		b	.L49
 611              	.LVL88:
 612              	.L57:
1353:.\FatFs/ff.c  **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
 613              		.loc 1 1353 0
 614 010c 0024     		movs	r4, #0
 615 010e 06E0     		b	.L49
 616              	.LVL89:
 617              	.L58:
 618 0110 0024     		movs	r4, #0
 619 0112 04E0     		b	.L49
 620              	.LVL90:
 621              	.L59:
 622 0114 0024     		movs	r4, #0
 623 0116 02E0     		b	.L49
 624              	.LVL91:
 625              	.L60:
1359:.\FatFs/ff.c  **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
 626              		.loc 1 1359 0
 627 0118 0024     		movs	r4, #0
 628              	.LVL92:
 629 011a 00E0     		b	.L49
 630              	.LVL93:
 631              	.L61:
1363:.\FatFs/ff.c  **** 				tp[i++] = (XCHAR)w;
 632              		.loc 1 1363 0
 633 011c 0024     		movs	r4, #0
 634              	.LVL94:
 635              	.L49:
1367:.\FatFs/ff.c  **** 	}
 636              		.loc 1 1367 0
 637 011e 0023     		movs	r3, #0
 638 0120 09F80430 		strb	r3, [r9, r4]
 639              	.LVL95:
 640              	.L38:
 641 0124 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 642              	.LBE3:
 643              		.cfi_endproc
 644              	.LFE52:
 646              		.section	.text.sync,"ax",%progbits
 647              		.align	2
 648              		.thumb
 649              		.thumb_func
 651              	sync:
 652              	.LFB34:
 288:.\FatFs/ff.c  **** 	FRESULT res;
 653              		.loc 1 288 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              	.LVL96:
 658 0000 70B5     		push	{r4, r5, r6, lr}
 659              	.LCFI6:
 660              		.cfi_def_cfa_offset 16
 661              		.cfi_offset 4, -16
 662              		.cfi_offset 5, -12
 663              		.cfi_offset 6, -8
 664              		.cfi_offset 14, -4
 665 0002 0446     		mov	r4, r0
 292:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 666              		.loc 1 292 0
 667 0004 0021     		movs	r1, #0
 668 0006 FFF7FEFF 		bl	move_window
 669              	.LVL97:
 293:.\FatFs/ff.c  **** 		/* Update FSInfo sector if needed */
 670              		.loc 1 293 0
 671 000a 0346     		mov	r3, r0
 672 000c 80BB     		cbnz	r0, .L65
 295:.\FatFs/ff.c  **** 			fs->winsect = 0;
 673              		.loc 1 295 0
 674 000e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 675 0010 032B     		cmp	r3, #3
 676 0012 25D1     		bne	.L66
 295:.\FatFs/ff.c  **** 			fs->winsect = 0;
 677              		.loc 1 295 0 is_stmt 0 discriminator 1
 678 0014 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 679 0016 1BB3     		cbz	r3, .L66
 296:.\FatFs/ff.c  **** 			mem_set(fs->win, 0, 512);
 680              		.loc 1 296 0 is_stmt 1
 681 0018 0025     		movs	r5, #0
 682 001a E562     		str	r5, [r4, #44]
 297:.\FatFs/ff.c  **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 683              		.loc 1 297 0
 684 001c 04F13006 		add	r6, r4, #48
 685 0020 3046     		mov	r0, r6
 686              	.LVL98:
 687 0022 2946     		mov	r1, r5
 688 0024 4FF40072 		mov	r2, #512
 689 0028 FFF7FEFF 		bl	mem_set
 690              	.LVL99:
 298:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 691              		.loc 1 298 0
 692 002c 4AF65523 		movw	r3, #43605
 693 0030 A4F82E32 		strh	r3, [r4, #558]	@ movhi
 299:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 694              		.loc 1 299 0
 695 0034 0F4B     		ldr	r3, .L68
 696 0036 2363     		str	r3, [r4, #48]
 300:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 697              		.loc 1 300 0
 698 0038 03F1FF53 		add	r3, r3, #534773760
 699 003c 03F50053 		add	r3, r3, #8192
 700 0040 2033     		adds	r3, r3, #32
 701 0042 C4F81432 		str	r3, [r4, #532]
 301:.\FatFs/ff.c  **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 702              		.loc 1 301 0
 703 0046 2369     		ldr	r3, [r4, #16]
 704 0048 C4F81832 		str	r3, [r4, #536]
 302:.\FatFs/ff.c  **** 			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 705              		.loc 1 302 0
 706 004c E368     		ldr	r3, [r4, #12]
 707 004e C4F81C32 		str	r3, [r4, #540]
 303:.\FatFs/ff.c  **** 			fs->fsi_flag = 0;
 708              		.loc 1 303 0
 709 0052 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 710 0054 3146     		mov	r1, r6
 711 0056 6269     		ldr	r2, [r4, #20]
 712 0058 0123     		movs	r3, #1
 713 005a FFF7FEFF 		bl	disk_write
 714              	.LVL100:
 304:.\FatFs/ff.c  **** 		}
 715              		.loc 1 304 0
 716 005e 6571     		strb	r5, [r4, #5]
 717              	.L66:
 307:.\FatFs/ff.c  **** 			res = FR_DISK_ERR;
 718              		.loc 1 307 0
 719 0060 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 720 0062 0021     		movs	r1, #0
 721 0064 0A46     		mov	r2, r1
 722 0066 FFF7FEFF 		bl	disk_ioctl
 723              	.LVL101:
 292:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 724              		.loc 1 292 0
 725 006a 031C     		adds	r3, r0, #0
 726 006c 18BF     		it	ne
 727 006e 0123     		movne	r3, #1
 728              	.L65:
 729              	.LVL102:
 312:.\FatFs/ff.c  **** #endif
 730              		.loc 1 312 0
 731 0070 1846     		mov	r0, r3
 732 0072 70BD     		pop	{r4, r5, r6, pc}
 733              	.LVL103:
 734              	.L69:
 735              		.align	2
 736              	.L68:
 737 0074 52526141 		.word	1096897106
 738              		.cfi_endproc
 739              	.LFE34:
 741              		.section	.text.get_fat,"ax",%progbits
 742              		.align	2
 743              		.global	get_fat
 744              		.thumb
 745              		.thumb_func
 747              	get_fat:
 748              	.LFB35:
 327:.\FatFs/ff.c  **** 	UINT wc, bc;
 749              		.loc 1 327 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              	.LVL104:
 332:.\FatFs/ff.c  **** 		return 1;
 754              		.loc 1 332 0
 755 0000 0129     		cmp	r1, #1
 756 0002 4DD9     		bls	.L76
 332:.\FatFs/ff.c  **** 		return 1;
 757              		.loc 1 332 0 is_stmt 0 discriminator 1
 758 0004 C369     		ldr	r3, [r0, #28]
 759 0006 9942     		cmp	r1, r3
 760 0008 4CD2     		bcs	.L77
 327:.\FatFs/ff.c  **** 	UINT wc, bc;
 761              		.loc 1 327 0 is_stmt 1
 762 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 763              	.LCFI7:
 764              		.cfi_def_cfa_offset 24
 765              		.cfi_offset 4, -24
 766              		.cfi_offset 5, -20
 767              		.cfi_offset 6, -16
 768              		.cfi_offset 7, -12
 769              		.cfi_offset 8, -8
 770              		.cfi_offset 14, -4
 771 000e 0C46     		mov	r4, r1
 772 0010 0646     		mov	r6, r0
 335:.\FatFs/ff.c  **** 	switch (fs->fs_type) {
 773              		.loc 1 335 0
 774 0012 076A     		ldr	r7, [r0, #32]
 775              	.LVL105:
 336:.\FatFs/ff.c  **** 	case FS_FAT12 :
 776              		.loc 1 336 0
 777 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 778 0016 022B     		cmp	r3, #2
 779 0018 28D0     		beq	.L72
 780 001a 032B     		cmp	r3, #3
 781 001c 32D0     		beq	.L73
 782 001e 012B     		cmp	r3, #1
 783 0020 42D1     		bne	.L83
 784              	.LVL106:
 338:.\FatFs/ff.c  **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 785              		.loc 1 338 0
 786 0022 01EB5108 		add	r8, r1, r1, lsr #1
 787              	.LVL107:
 339:.\FatFs/ff.c  **** 		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 788              		.loc 1 339 0
 789 0026 07EB5821 		add	r1, r7, r8, lsr #9
 790              	.LVL108:
 791 002a FFF7FEFF 		bl	move_window
 792              	.LVL109:
 793 002e 0028     		cmp	r0, #0
 794 0030 3ED1     		bne	.L79
 340:.\FatFs/ff.c  **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 795              		.loc 1 340 0
 796 0032 C8F30803 		ubfx	r3, r8, #0, #9
 797 0036 3344     		add	r3, r3, r6
 798 0038 93F83050 		ldrb	r5, [r3, #48]	@ zero_extendqisi2
 799              	.LVL110:
 800 003c 08F10108 		add	r8, r8, #1
 801              	.LVL111:
 341:.\FatFs/ff.c  **** 		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 802              		.loc 1 341 0
 803 0040 3046     		mov	r0, r6
 804 0042 07EB5821 		add	r1, r7, r8, lsr #9
 805 0046 FFF7FEFF 		bl	move_window
 806              	.LVL112:
 807 004a A8BB     		cbnz	r0, .L80
 342:.\FatFs/ff.c  **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 808              		.loc 1 342 0
 809 004c C8F30808 		ubfx	r8, r8, #0, #9
 810              	.LVL113:
 811 0050 06EB0800 		add	r0, r6, r8
 812 0054 90F83000 		ldrb	r0, [r0, #48]	@ zero_extendqisi2
 813 0058 45EA0020 		orr	r0, r5, r0, lsl #8
 814              	.LVL114:
 343:.\FatFs/ff.c  **** 
 815              		.loc 1 343 0
 816 005c 14F0010F 		tst	r4, #1
 817 0060 14BF     		ite	ne
 818 0062 0009     		lsrne	r0, r0, #4
 819              	.LVL115:
 820 0064 C0F30B00 		ubfxeq	r0, r0, #0, #12
 821 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 822              	.LVL116:
 823              	.L72:
 346:.\FatFs/ff.c  **** 		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 824              		.loc 1 346 0
 825 006c 07EB1121 		add	r1, r7, r1, lsr #8
 826              	.LVL117:
 827 0070 FFF7FEFF 		bl	move_window
 828              	.LVL118:
 829 0074 20BB     		cbnz	r0, .L81
 347:.\FatFs/ff.c  **** 
 830              		.loc 1 347 0
 831 0076 6300     		lsls	r3, r4, #1
 832 0078 03F4FF73 		and	r3, r3, #510
 833 007c 3033     		adds	r3, r3, #48
 834 007e F05A     		ldrh	r0, [r6, r3]
 835 0080 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 836              	.LVL119:
 837              	.L73:
 350:.\FatFs/ff.c  **** 		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 838              		.loc 1 350 0
 839 0084 07EBD111 		add	r1, r7, r1, lsr #7
 840              	.LVL120:
 841 0088 FFF7FEFF 		bl	move_window
 842              	.LVL121:
 843 008c E0B9     		cbnz	r0, .L82
 351:.\FatFs/ff.c  **** 	}
 844              		.loc 1 351 0
 845 008e A300     		lsls	r3, r4, #2
 846 0090 03F4FE73 		and	r3, r3, #508
 847 0094 3033     		adds	r3, r3, #48
 848 0096 F058     		ldr	r0, [r6, r3]
 849 0098 20F07040 		bic	r0, r0, #-268435456
 850 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 851              	.LVL122:
 852              	.L76:
 853              	.LCFI8:
 854              		.cfi_def_cfa_offset 0
 855              		.cfi_restore 4
 856              		.cfi_restore 5
 857              		.cfi_restore 6
 858              		.cfi_restore 7
 859              		.cfi_restore 8
 860              		.cfi_restore 14
 333:.\FatFs/ff.c  **** 
 861              		.loc 1 333 0
 862 00a0 0120     		movs	r0, #1
 863              	.LVL123:
 864 00a2 7047     		bx	lr
 865              	.LVL124:
 866              	.L77:
 867 00a4 0120     		movs	r0, #1
 868              	.LVL125:
 355:.\FatFs/ff.c  **** 
 869              		.loc 1 355 0
 870 00a6 7047     		bx	lr
 871              	.LVL126:
 872              	.L83:
 873              	.LCFI9:
 874              		.cfi_def_cfa_offset 24
 875              		.cfi_offset 4, -24
 876              		.cfi_offset 5, -20
 877              		.cfi_offset 6, -16
 878              		.cfi_offset 7, -12
 879              		.cfi_offset 8, -8
 880              		.cfi_offset 14, -4
 354:.\FatFs/ff.c  **** }
 881              		.loc 1 354 0
 882 00a8 4FF0FF30 		mov	r0, #-1
 883              	.LVL127:
 884 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 885              	.LVL128:
 886              	.L79:
 887 00b0 4FF0FF30 		mov	r0, #-1
 888 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 889              	.LVL129:
 890              	.L80:
 891 00b8 4FF0FF30 		mov	r0, #-1
 892 00bc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 893              	.LVL130:
 894              	.L81:
 895 00c0 4FF0FF30 		mov	r0, #-1
 896 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 897              	.LVL131:
 898              	.L82:
 899 00c8 4FF0FF30 		mov	r0, #-1
 355:.\FatFs/ff.c  **** 
 900              		.loc 1 355 0
 901 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 902              		.cfi_endproc
 903              	.LFE35:
 905              		.section	.text.put_fat,"ax",%progbits
 906              		.align	2
 907              		.global	put_fat
 908              		.thumb
 909              		.thumb_func
 911              	put_fat:
 912              	.LFB36:
 370:.\FatFs/ff.c  **** 	UINT bc;
 913              		.loc 1 370 0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 917              	.LVL132:
 918 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 919              	.LCFI10:
 920              		.cfi_def_cfa_offset 32
 921              		.cfi_offset 3, -32
 922              		.cfi_offset 4, -28
 923              		.cfi_offset 5, -24
 924              		.cfi_offset 6, -20
 925              		.cfi_offset 7, -16
 926              		.cfi_offset 8, -12
 927              		.cfi_offset 9, -8
 928              		.cfi_offset 14, -4
 929 0004 0C46     		mov	r4, r1
 377:.\FatFs/ff.c  **** 		res = FR_INT_ERR;
 930              		.loc 1 377 0
 931 0006 0129     		cmp	r1, #1
 932 0008 63D9     		bls	.L96
 933 000a 0546     		mov	r5, r0
 934 000c 1746     		mov	r7, r2
 377:.\FatFs/ff.c  **** 		res = FR_INT_ERR;
 935              		.loc 1 377 0 is_stmt 0 discriminator 1
 936 000e C369     		ldr	r3, [r0, #28]
 937 0010 9942     		cmp	r1, r3
 938 0012 60D2     		bcs	.L97
 381:.\FatFs/ff.c  **** 		switch (fs->fs_type) {
 939              		.loc 1 381 0 is_stmt 1
 940 0014 D0F82080 		ldr	r8, [r0, #32]
 941              	.LVL133:
 382:.\FatFs/ff.c  **** 		case FS_FAT12 :
 942              		.loc 1 382 0
 943 0018 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 944 001a 022B     		cmp	r3, #2
 945 001c 39D0     		beq	.L89
 946 001e 032B     		cmp	r3, #3
 947 0020 43D0     		beq	.L90
 948 0022 012B     		cmp	r3, #1
 949 0024 4DD1     		bne	.L101
 950              	.LVL134:
 384:.\FatFs/ff.c  **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 951              		.loc 1 384 0
 952 0026 01EB5109 		add	r9, r1, r1, lsr #1
 953              	.LVL135:
 385:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 954              		.loc 1 385 0
 955 002a 08EB5921 		add	r1, r8, r9, lsr #9
 956              	.LVL136:
 957 002e FFF7FEFF 		bl	move_window
 958              	.LVL137:
 386:.\FatFs/ff.c  **** 			p = &fs->win[bc & (SS(fs) - 1)];
 959              		.loc 1 386 0
 960 0032 0646     		mov	r6, r0
 961 0034 0028     		cmp	r0, #0
 962 0036 49D1     		bne	.L88
 387:.\FatFs/ff.c  **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 963              		.loc 1 387 0
 964 0038 C9F30803 		ubfx	r3, r9, #0, #9
 965              	.LVL138:
 388:.\FatFs/ff.c  **** 			bc++;
 966              		.loc 1 388 0
 967 003c 14F0010F 		tst	r4, #1
 968 0040 14D0     		beq	.L92
 388:.\FatFs/ff.c  **** 			bc++;
 969              		.loc 1 388 0 is_stmt 0 discriminator 1
 970 0042 2B44     		add	r3, r3, r5
 971              	.LVL139:
 972 0044 93F83020 		ldrb	r2, [r3, #48]	@ zero_extendqisi2
 973 0048 02F00F02 		and	r2, r2, #15
 974 004c F9B2     		uxtb	r1, r7
 975 004e 42EA0112 		orr	r2, r2, r1, lsl #4
 976 0052 83F83020 		strb	r2, [r3, #48]
 389:.\FatFs/ff.c  **** 			fs->wflag = 1;
 977              		.loc 1 389 0 is_stmt 1 discriminator 1
 978 0056 09F10109 		add	r9, r9, #1
 979              	.LVL140:
 390:.\FatFs/ff.c  **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 980              		.loc 1 390 0 discriminator 1
 981 005a 0123     		movs	r3, #1
 982 005c 2B71     		strb	r3, [r5, #4]
 391:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 983              		.loc 1 391 0 discriminator 1
 984 005e 2846     		mov	r0, r5
 985              	.LVL141:
 986 0060 08EB5921 		add	r1, r8, r9, lsr #9
 987 0064 FFF7FEFF 		bl	move_window
 988              	.LVL142:
 392:.\FatFs/ff.c  **** 			p = &fs->win[bc & (SS(fs) - 1)];
 989              		.loc 1 392 0 discriminator 1
 990 0068 68BB     		cbnz	r0, .L99
 991 006a 36E0     		b	.L102
 992              	.LVL143:
 993              	.L92:
 388:.\FatFs/ff.c  **** 			bc++;
 994              		.loc 1 388 0 discriminator 2
 995 006c 2B44     		add	r3, r3, r5
 996              	.LVL144:
 997 006e 83F83070 		strb	r7, [r3, #48]
 389:.\FatFs/ff.c  **** 			fs->wflag = 1;
 998              		.loc 1 389 0 discriminator 2
 999 0072 09F10109 		add	r9, r9, #1
 1000              	.LVL145:
 390:.\FatFs/ff.c  **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 1001              		.loc 1 390 0 discriminator 2
 1002 0076 0123     		movs	r3, #1
 1003 0078 2B71     		strb	r3, [r5, #4]
 391:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 1004              		.loc 1 391 0 discriminator 2
 1005 007a 2846     		mov	r0, r5
 1006              	.LVL146:
 1007 007c 08EB5921 		add	r1, r8, r9, lsr #9
 1008 0080 FFF7FEFF 		bl	move_window
 1009              	.LVL147:
 392:.\FatFs/ff.c  **** 			p = &fs->win[bc & (SS(fs) - 1)];
 1010              		.loc 1 392 0 discriminator 2
 1011 0084 08BB     		cbnz	r0, .L100
 1012 0086 2DE0     		b	.L103
 1013              	.LVL148:
 1014              	.L95:
 394:.\FatFs/ff.c  **** 			break;
 1015              		.loc 1 394 0 discriminator 4
 1016 0088 05EB0903 		add	r3, r5, r9
 1017 008c 83F83070 		strb	r7, [r3, #48]
 395:.\FatFs/ff.c  **** 
 1018              		.loc 1 395 0 discriminator 4
 1019 0090 1CE0     		b	.L88
 1020              	.LVL149:
 1021              	.L89:
 398:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 1022              		.loc 1 398 0
 1023 0092 08EB1121 		add	r1, r8, r1, lsr #8
 1024              	.LVL150:
 1025 0096 FFF7FEFF 		bl	move_window
 1026              	.LVL151:
 399:.\FatFs/ff.c  **** 			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 1027              		.loc 1 399 0
 1028 009a 0646     		mov	r6, r0
 1029 009c B0B9     		cbnz	r0, .L88
 400:.\FatFs/ff.c  **** 			break;
 1030              		.loc 1 400 0
 1031 009e 6300     		lsls	r3, r4, #1
 1032 00a0 03F4FF73 		and	r3, r3, #510
 1033 00a4 3033     		adds	r3, r3, #48
 1034 00a6 EF52     		strh	r7, [r5, r3]	@ movhi
 401:.\FatFs/ff.c  **** 
 1035              		.loc 1 401 0
 1036 00a8 10E0     		b	.L88
 1037              	.LVL152:
 1038              	.L90:
 404:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 1039              		.loc 1 404 0
 1040 00aa 08EBD111 		add	r1, r8, r1, lsr #7
 1041              	.LVL153:
 1042 00ae FFF7FEFF 		bl	move_window
 1043              	.LVL154:
 405:.\FatFs/ff.c  **** 			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 1044              		.loc 1 405 0
 1045 00b2 0646     		mov	r6, r0
 1046 00b4 50B9     		cbnz	r0, .L88
 406:.\FatFs/ff.c  **** 			break;
 1047              		.loc 1 406 0
 1048 00b6 A300     		lsls	r3, r4, #2
 1049 00b8 03F4FE73 		and	r3, r3, #508
 1050 00bc 3033     		adds	r3, r3, #48
 1051 00be EF50     		str	r7, [r5, r3]
 407:.\FatFs/ff.c  **** 
 1052              		.loc 1 407 0
 1053 00c0 04E0     		b	.L88
 1054              	.LVL155:
 1055              	.L101:
 410:.\FatFs/ff.c  **** 		}
 1056              		.loc 1 410 0
 1057 00c2 0226     		movs	r6, #2
 1058 00c4 02E0     		b	.L88
 1059              	.LVL156:
 1060              	.L99:
 391:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 1061              		.loc 1 391 0
 1062 00c6 0646     		mov	r6, r0
 1063 00c8 00E0     		b	.L88
 1064              	.L100:
 1065 00ca 0646     		mov	r6, r0
 1066              	.LVL157:
 1067              	.L88:
 412:.\FatFs/ff.c  **** 	}
 1068              		.loc 1 412 0
 1069 00cc 0123     		movs	r3, #1
 1070 00ce 2B71     		strb	r3, [r5, #4]
 1071 00d0 14E0     		b	.L104
 1072              	.LVL158:
 1073              	.L96:
 378:.\FatFs/ff.c  **** 
 1074              		.loc 1 378 0
 1075 00d2 0226     		movs	r6, #2
 1076 00d4 12E0     		b	.L104
 1077              	.L97:
 1078 00d6 0226     		movs	r6, #2
 1079              	.LVL159:
 1080 00d8 10E0     		b	.L104
 1081              	.LVL160:
 1082              	.L102:
 393:.\FatFs/ff.c  **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1083              		.loc 1 393 0
 1084 00da C9F30809 		ubfx	r9, r9, #0, #9
 1085              	.LVL161:
 394:.\FatFs/ff.c  **** 			break;
 1086              		.loc 1 394 0
 1087 00de C7F30717 		ubfx	r7, r7, #4, #8
 1088              	.LVL162:
 1089 00e2 D1E7     		b	.L95
 1090              	.LVL163:
 1091              	.L103:
 393:.\FatFs/ff.c  **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1092              		.loc 1 393 0
 1093 00e4 C9F30809 		ubfx	r9, r9, #0, #9
 1094              	.LVL164:
 394:.\FatFs/ff.c  **** 			break;
 1095              		.loc 1 394 0
 1096 00e8 05EB0903 		add	r3, r5, r9
 1097 00ec 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 1098 00f0 23F00F03 		bic	r3, r3, #15
 1099 00f4 C7F30327 		ubfx	r7, r7, #8, #4
 1100              	.LVL165:
 1101 00f8 1F43     		orrs	r7, r7, r3
 1102 00fa C5E7     		b	.L95
 1103              	.LVL166:
 1104              	.L104:
 416:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
 1105              		.loc 1 416 0
 1106 00fc 3046     		mov	r0, r6
 1107 00fe BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1108              		.cfi_endproc
 1109              	.LFE36:
 1111 0102 00BF     		.section	.text.create_chain,"ax",%progbits
 1112              		.align	2
 1113              		.thumb
 1114              		.thumb_func
 1116              	create_chain:
 1117              	.LFB38:
 472:.\FatFs/ff.c  **** 	DWORD cs, ncl, scl, mcl;
 1118              		.loc 1 472 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              	.LVL167:
 1123 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1124              	.LCFI11:
 1125              		.cfi_def_cfa_offset 32
 1126              		.cfi_offset 3, -32
 1127              		.cfi_offset 4, -28
 1128              		.cfi_offset 5, -24
 1129              		.cfi_offset 6, -20
 1130              		.cfi_offset 7, -16
 1131              		.cfi_offset 8, -12
 1132              		.cfi_offset 9, -8
 1133              		.cfi_offset 14, -4
 1134 0004 0646     		mov	r6, r0
 476:.\FatFs/ff.c  **** 	if (clst == 0) {		/* Create new chain */
 1135              		.loc 1 476 0
 1136 0006 C769     		ldr	r7, [r0, #28]
 1137              	.LVL168:
 477:.\FatFs/ff.c  **** 		scl = fs->last_clust;			/* Get suggested start point */
 1138              		.loc 1 477 0
 1139 0008 8946     		mov	r9, r1
 1140 000a 29B9     		cbnz	r1, .L107
 478:.\FatFs/ff.c  **** 		if (scl == 0 || scl >= mcl) scl = 1;
 1141              		.loc 1 478 0
 1142 000c C568     		ldr	r5, [r0, #12]
 1143              	.LVL169:
 479:.\FatFs/ff.c  **** 	}
 1144              		.loc 1 479 0
 1145 000e 5DB1     		cbz	r5, .L115
 479:.\FatFs/ff.c  **** 	}
 1146              		.loc 1 479 0 is_stmt 0 discriminator 2
 1147 0010 AF42     		cmp	r7, r5
 1148 0012 98BF     		it	ls
 1149 0014 0125     		movls	r5, #1
 1150              	.LVL170:
 1151 0016 08E0     		b	.L108
 1152              	.LVL171:
 1153              	.L107:
 482:.\FatFs/ff.c  **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 1154              		.loc 1 482 0 is_stmt 1
 1155 0018 FFF7FEFF 		bl	get_fat
 1156              	.LVL172:
 483:.\FatFs/ff.c  **** 		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 1157              		.loc 1 483 0
 1158 001c 0128     		cmp	r0, #1
 1159 001e 37D9     		bls	.L116
 484:.\FatFs/ff.c  **** 		scl = clst;
 1160              		.loc 1 484 0
 1161 0020 8742     		cmp	r7, r0
 1162 0022 4BD8     		bhi	.L109
 485:.\FatFs/ff.c  **** 	}
 1163              		.loc 1 485 0
 1164 0024 4D46     		mov	r5, r9
 1165 0026 00E0     		b	.L108
 1166              	.LVL173:
 1167              	.L115:
 479:.\FatFs/ff.c  **** 	}
 1168              		.loc 1 479 0
 1169 0028 0125     		movs	r5, #1
 1170              	.LVL174:
 1171              	.L108:
 488:.\FatFs/ff.c  **** 	for (;;) {
 1172              		.loc 1 488 0
 1173 002a 2C46     		mov	r4, r5
 492:.\FatFs/ff.c  **** 			if (ncl > scl) return 0;	/* No free cluster */
 1174              		.loc 1 492 0
 1175 002c 4FF00208 		mov	r8, #2
 1176              	.LVL175:
 1177              	.L112:
 490:.\FatFs/ff.c  **** 		if (ncl >= mcl) {				/* Wrap around */
 1178              		.loc 1 490 0
 1179 0030 0134     		adds	r4, r4, #1
 1180              	.LVL176:
 491:.\FatFs/ff.c  **** 			ncl = 2;
 1181              		.loc 1 491 0
 1182 0032 A742     		cmp	r7, r4
 1183 0034 02D8     		bhi	.L110
 1184              	.LVL177:
 493:.\FatFs/ff.c  **** 		}
 1185              		.loc 1 493 0
 1186 0036 012D     		cmp	r5, #1
 1187 0038 2DD9     		bls	.L118
 492:.\FatFs/ff.c  **** 			if (ncl > scl) return 0;	/* No free cluster */
 1188              		.loc 1 492 0
 1189 003a 4446     		mov	r4, r8
 1190              	.LVL178:
 1191              	.L110:
 495:.\FatFs/ff.c  **** 		if (cs == 0) break;				/* Found a free cluster */
 1192              		.loc 1 495 0
 1193 003c 3046     		mov	r0, r6
 1194 003e 2146     		mov	r1, r4
 1195 0040 FFF7FEFF 		bl	get_fat
 1196              	.LVL179:
 496:.\FatFs/ff.c  **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1197              		.loc 1 496 0
 1198 0044 38B1     		cbz	r0, .L111
 497:.\FatFs/ff.c  **** 			return cs;
 1199              		.loc 1 497 0
 1200 0046 B0F1FF3F 		cmp	r0, #-1
 1201 004a 27D0     		beq	.L119
 497:.\FatFs/ff.c  **** 			return cs;
 1202              		.loc 1 497 0 is_stmt 0 discriminator 1
 1203 004c 0128     		cmp	r0, #1
 1204 004e 29D0     		beq	.L120
 499:.\FatFs/ff.c  **** 	}
 1205              		.loc 1 499 0 is_stmt 1
 1206 0050 AC42     		cmp	r4, r5
 1207 0052 EDD1     		bne	.L112
 1208 0054 29E0     		b	.L121
 1209              	.L111:
 1210 0056 2546     		mov	r5, r4
 1211              	.LVL180:
 502:.\FatFs/ff.c  **** 		return 0xFFFFFFFF;
 1212              		.loc 1 502 0
 1213 0058 3046     		mov	r0, r6
 1214              	.LVL181:
 1215 005a 2146     		mov	r1, r4
 1216 005c 6FF07042 		mvn	r2, #-268435456
 1217 0060 FFF7FEFF 		bl	put_fat
 1218              	.LVL182:
 1219 0064 20BB     		cbnz	r0, .L122
 504:.\FatFs/ff.c  **** 		if (put_fat(fs, clst, ncl))
 1220              		.loc 1 504 0
 1221 0066 B9F1000F 		cmp	r9, #0
 1222 006a 05D0     		beq	.L113
 505:.\FatFs/ff.c  **** 			return 0xFFFFFFFF;
 1223              		.loc 1 505 0
 1224 006c 3046     		mov	r0, r6
 1225 006e 4946     		mov	r1, r9
 1226 0070 2246     		mov	r2, r4
 1227 0072 FFF7FEFF 		bl	put_fat
 1228              	.LVL183:
 1229 0076 F8B9     		cbnz	r0, .L123
 1230              	.L113:
 509:.\FatFs/ff.c  **** 	if (fs->free_clust != 0xFFFFFFFF) {
 1231              		.loc 1 509 0
 1232 0078 F560     		str	r5, [r6, #12]
 510:.\FatFs/ff.c  **** 		fs->free_clust--;
 1233              		.loc 1 510 0
 1234 007a 3369     		ldr	r3, [r6, #16]
 1235 007c B3F1FF3F 		cmp	r3, #-1
 1236 0080 03D0     		beq	.L114
 511:.\FatFs/ff.c  **** 		fs->fsi_flag = 1;
 1237              		.loc 1 511 0
 1238 0082 013B     		subs	r3, r3, #1
 1239 0084 3361     		str	r3, [r6, #16]
 512:.\FatFs/ff.c  **** 	}
 1240              		.loc 1 512 0
 1241 0086 0123     		movs	r3, #1
 1242 0088 7371     		strb	r3, [r6, #5]
 1243              	.L114:
 515:.\FatFs/ff.c  **** }
 1244              		.loc 1 515 0
 1245 008a 2046     		mov	r0, r4
 1246 008c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1247              	.LVL184:
 1248              	.L116:
 483:.\FatFs/ff.c  **** 		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 1249              		.loc 1 483 0
 1250 0090 0120     		movs	r0, #1
 1251              	.LVL185:
 1252 0092 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1253              	.LVL186:
 1254              	.L118:
 493:.\FatFs/ff.c  **** 		}
 1255              		.loc 1 493 0
 1256 0096 0020     		movs	r0, #0
 1257 0098 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1258              	.LVL187:
 1259              	.L119:
 495:.\FatFs/ff.c  **** 		if (cs == 0) break;				/* Found a free cluster */
 1260              		.loc 1 495 0
 1261 009c 4FF0FF30 		mov	r0, #-1
 1262              	.LVL188:
 1263 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1264              	.LVL189:
 1265              	.L120:
 1266 00a4 0120     		movs	r0, #1
 1267              	.LVL190:
 1268 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1269              	.LVL191:
 1270              	.L121:
 499:.\FatFs/ff.c  **** 	}
 1271              		.loc 1 499 0
 1272 00aa 0020     		movs	r0, #0
 1273              	.LVL192:
 1274 00ac BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1275              	.LVL193:
 1276              	.L122:
 503:.\FatFs/ff.c  **** 	if (clst != 0) {					/* Link it to the previous one if needed */
 1277              		.loc 1 503 0
 1278 00b0 4FF0FF30 		mov	r0, #-1
 1279 00b4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1280              	.LVL194:
 1281              	.L123:
 506:.\FatFs/ff.c  **** 	}
 1282              		.loc 1 506 0
 1283 00b8 4FF0FF30 		mov	r0, #-1
 1284              	.LVL195:
 1285              	.L109:
 516:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
 1286              		.loc 1 516 0
 1287 00bc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1288              		.cfi_endproc
 1289              	.LFE38:
 1291              		.section	.text.remove_chain,"ax",%progbits
 1292              		.align	2
 1293              		.thumb
 1294              		.thumb_func
 1296              	remove_chain:
 1297              	.LFB37:
 431:.\FatFs/ff.c  **** 	FRESULT res;
 1298              		.loc 1 431 0
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 0
 1301              		@ frame_needed = 0, uses_anonymous_args = 0
 1302              	.LVL196:
 1303 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1304              	.LCFI12:
 1305              		.cfi_def_cfa_offset 24
 1306              		.cfi_offset 4, -24
 1307              		.cfi_offset 5, -20
 1308              		.cfi_offset 6, -16
 1309              		.cfi_offset 7, -12
 1310              		.cfi_offset 8, -8
 1311              		.cfi_offset 14, -4
 1312 0004 0D46     		mov	r5, r1
 436:.\FatFs/ff.c  **** 		res = FR_INT_ERR;
 1313              		.loc 1 436 0
 1314 0006 0129     		cmp	r1, #1
 1315 0008 27D9     		bls	.L130
 1316 000a 0446     		mov	r4, r0
 436:.\FatFs/ff.c  **** 		res = FR_INT_ERR;
 1317              		.loc 1 436 0 is_stmt 0 discriminator 1
 1318 000c C369     		ldr	r3, [r0, #28]
 1319 000e 9942     		cmp	r1, r3
 1320 0010 25D2     		bcs	.L131
 446:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 1321              		.loc 1 446 0 is_stmt 1
 1322 0012 0027     		movs	r7, #0
 450:.\FatFs/ff.c  **** 			}
 1323              		.loc 1 450 0
 1324 0014 4FF00108 		mov	r8, #1
 1325 0018 1AE0     		b	.L127
 1326              	.LVL197:
 1327              	.L129:
 442:.\FatFs/ff.c  **** 			if (nxt == 0) break;				/* Empty cluster? */
 1328              		.loc 1 442 0
 1329 001a 2046     		mov	r0, r4
 1330 001c 2946     		mov	r1, r5
 1331 001e FFF7FEFF 		bl	get_fat
 1332              	.LVL198:
 443:.\FatFs/ff.c  **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 1333              		.loc 1 443 0
 1334 0022 0646     		mov	r6, r0
 1335 0024 E8B1     		cbz	r0, .L132
 444:.\FatFs/ff.c  **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 1336              		.loc 1 444 0
 1337 0026 0128     		cmp	r0, #1
 1338 0028 1DD0     		beq	.L133
 445:.\FatFs/ff.c  **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 1339              		.loc 1 445 0
 1340 002a B0F1FF3F 		cmp	r0, #-1
 1341 002e 1CD0     		beq	.L134
 446:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 1342              		.loc 1 446 0
 1343 0030 2046     		mov	r0, r4
 1344              	.LVL199:
 1345 0032 2946     		mov	r1, r5
 1346 0034 3A46     		mov	r2, r7
 1347 0036 FFF7FEFF 		bl	put_fat
 1348              	.LVL200:
 447:.\FatFs/ff.c  **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 1349              		.loc 1 447 0
 1350 003a 0346     		mov	r3, r0
 1351 003c B0B9     		cbnz	r0, .L126
 448:.\FatFs/ff.c  **** 				fs->free_clust++;
 1352              		.loc 1 448 0
 1353 003e 2369     		ldr	r3, [r4, #16]
 1354 0040 B3F1FF3F 		cmp	r3, #-1
 1355 0044 03D0     		beq	.L128
 449:.\FatFs/ff.c  **** 				fs->fsi_flag = 1;
 1356              		.loc 1 449 0
 1357 0046 0133     		adds	r3, r3, #1
 1358 0048 2361     		str	r3, [r4, #16]
 450:.\FatFs/ff.c  **** 			}
 1359              		.loc 1 450 0
 1360 004a 84F80580 		strb	r8, [r4, #5]
 1361              	.L128:
 431:.\FatFs/ff.c  **** 	FRESULT res;
 1362              		.loc 1 431 0
 1363 004e 3546     		mov	r5, r6
 1364              	.LVL201:
 1365              	.L127:
 441:.\FatFs/ff.c  **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 1366              		.loc 1 441 0
 1367 0050 E369     		ldr	r3, [r4, #28]
 1368 0052 9D42     		cmp	r5, r3
 1369 0054 E1D3     		bcc	.L129
 1370 0056 0023     		movs	r3, #0
 1371 0058 08E0     		b	.L126
 1372              	.LVL202:
 1373              	.L130:
 437:.\FatFs/ff.c  **** 
 1374              		.loc 1 437 0
 1375 005a 0223     		movs	r3, #2
 1376 005c 06E0     		b	.L126
 1377              	.L131:
 1378 005e 0223     		movs	r3, #2
 1379 0060 04E0     		b	.L126
 1380              	.LVL203:
 1381              	.L132:
 1382 0062 0023     		movs	r3, #0
 1383 0064 02E0     		b	.L126
 1384              	.L133:
 444:.\FatFs/ff.c  **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 1385              		.loc 1 444 0
 1386 0066 0223     		movs	r3, #2
 1387 0068 00E0     		b	.L126
 1388              	.L134:
 445:.\FatFs/ff.c  **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 1389              		.loc 1 445 0
 1390 006a 0123     		movs	r3, #1
 1391              	.LVL204:
 1392              	.L126:
 457:.\FatFs/ff.c  **** #endif
 1393              		.loc 1 457 0
 1394 006c 1846     		mov	r0, r3
 1395 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1396              		.cfi_endproc
 1397              	.LFE37:
 1399 0072 00BF     		.section	.text.clust2sect,"ax",%progbits
 1400              		.align	2
 1401              		.global	clust2sect
 1402              		.thumb
 1403              		.thumb_func
 1405              	clust2sect:
 1406              	.LFB39:
 531:.\FatFs/ff.c  **** 	clst -= 2;
 1407              		.loc 1 531 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 1412              	.LVL205:
 532:.\FatFs/ff.c  **** 	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 1413              		.loc 1 532 0
 1414 0000 0239     		subs	r1, r1, #2
 1415              	.LVL206:
 533:.\FatFs/ff.c  **** 	return clst * fs->csize + fs->database;
 1416              		.loc 1 533 0
 1417 0002 C369     		ldr	r3, [r0, #28]
 1418 0004 023B     		subs	r3, r3, #2
 1419 0006 9942     		cmp	r1, r3
 534:.\FatFs/ff.c  **** }
 1420              		.loc 1 534 0
 1421 0008 3DBF     		ittte	cc
 1422 000a 8278     		ldrbcc	r2, [r0, #2]	@ zero_extendqisi2
 1423 000c 836A     		ldrcc	r3, [r0, #40]
 1424 000e 02FB0130 		mlacc	r0, r2, r1, r3
 1425              	.LVL207:
 533:.\FatFs/ff.c  **** 	return clst * fs->csize + fs->database;
 1426              		.loc 1 533 0
 1427 0012 0020     		movcs	r0, #0
 535:.\FatFs/ff.c  **** 
 1428              		.loc 1 535 0
 1429 0014 7047     		bx	lr
 1430              		.cfi_endproc
 1431              	.LFE39:
 1433 0016 00BF     		.section	.text.dir_seek,"ax",%progbits
 1434              		.align	2
 1435              		.thumb
 1436              		.thumb_func
 1438              	dir_seek:
 1439              	.LFB40:
 549:.\FatFs/ff.c  **** 	DWORD clst;
 1440              		.loc 1 549 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 1444              	.LVL208:
 1445 0000 70B5     		push	{r4, r5, r6, lr}
 1446              	.LCFI13:
 1447              		.cfi_def_cfa_offset 16
 1448              		.cfi_offset 4, -16
 1449              		.cfi_offset 5, -12
 1450              		.cfi_offset 6, -8
 1451              		.cfi_offset 14, -4
 1452 0002 0546     		mov	r5, r0
 1453 0004 0C46     		mov	r4, r1
 554:.\FatFs/ff.c  **** 	clst = dj->sclust;
 1454              		.loc 1 554 0
 1455 0006 E980     		strh	r1, [r5, #6]	@ movhi
 555:.\FatFs/ff.c  **** 	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 1456              		.loc 1 555 0
 1457 0008 8168     		ldr	r1, [r0, #8]
 1458              	.LVL209:
 556:.\FatFs/ff.c  **** 		return FR_INT_ERR;
 1459              		.loc 1 556 0
 1460 000a 0129     		cmp	r1, #1
 1461 000c 38D0     		beq	.L146
 556:.\FatFs/ff.c  **** 		return FR_INT_ERR;
 1462              		.loc 1 556 0 is_stmt 0 discriminator 1
 1463 000e 0368     		ldr	r3, [r0]
 1464 0010 DA69     		ldr	r2, [r3, #28]
 1465 0012 9142     		cmp	r1, r2
 1466 0014 36D2     		bcs	.L147
 558:.\FatFs/ff.c  **** 		clst = dj->fs->dirbase;
 1467              		.loc 1 558 0 is_stmt 1
 1468 0016 71B9     		cbnz	r1, .L141
 558:.\FatFs/ff.c  **** 		clst = dj->fs->dirbase;
 1469              		.loc 1 558 0 is_stmt 0 discriminator 1
 1470 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1471 001a 032A     		cmp	r2, #3
 1472 001c 01D1     		bne	.L142
 559:.\FatFs/ff.c  **** 
 1473              		.loc 1 559 0 is_stmt 1
 1474 001e 596A     		ldr	r1, [r3, #36]
 1475              	.LVL210:
 561:.\FatFs/ff.c  **** 		dj->clust = clst;
 1476              		.loc 1 561 0
 1477 0020 49B9     		cbnz	r1, .L141
 1478              	.L142:
 1479              	.LVL211:
 562:.\FatFs/ff.c  **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 1480              		.loc 1 562 0
 1481 0022 0022     		movs	r2, #0
 1482 0024 EA60     		str	r2, [r5, #12]
 563:.\FatFs/ff.c  **** 			return FR_INT_ERR;
 1483              		.loc 1 563 0
 1484 0026 1A89     		ldrh	r2, [r3, #8]
 1485 0028 A242     		cmp	r2, r4
 1486 002a 2DD9     		bls	.L148
 565:.\FatFs/ff.c  **** 	}
 1487              		.loc 1 565 0
 1488 002c 5B6A     		ldr	r3, [r3, #36]
 1489 002e 03EB1413 		add	r3, r3, r4, lsr #4
 1490 0032 2B61     		str	r3, [r5, #16]
 1491 0034 1BE0     		b	.L143
 1492              	.LVL212:
 1493              	.L141:
 568:.\FatFs/ff.c  **** 		while (idx >= ic) {	/* Follow cluster chain */
 1494              		.loc 1 568 0
 1495 0036 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 1496 0038 3601     		lsls	r6, r6, #4
 1497              	.LVL213:
 569:.\FatFs/ff.c  **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1498              		.loc 1 569 0
 1499 003a B442     		cmp	r4, r6
 1500 003c 10D3     		bcc	.L144
 1501              	.LVL214:
 1502              	.L152:
 570:.\FatFs/ff.c  **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1503              		.loc 1 570 0
 1504 003e 2868     		ldr	r0, [r5]
 1505 0040 FFF7FEFF 		bl	get_fat
 1506              	.LVL215:
 1507 0044 0146     		mov	r1, r0
 1508              	.LVL216:
 571:.\FatFs/ff.c  **** 			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 1509              		.loc 1 571 0
 1510 0046 B0F1FF3F 		cmp	r0, #-1
 1511 004a 1FD0     		beq	.L149
 572:.\FatFs/ff.c  **** 				return FR_INT_ERR;
 1512              		.loc 1 572 0
 1513 004c 0128     		cmp	r0, #1
 1514 004e 1FD9     		bls	.L150
 572:.\FatFs/ff.c  **** 				return FR_INT_ERR;
 1515              		.loc 1 572 0 is_stmt 0 discriminator 1
 1516 0050 2B68     		ldr	r3, [r5]
 1517 0052 DB69     		ldr	r3, [r3, #28]
 1518 0054 9842     		cmp	r0, r3
 1519 0056 1DD2     		bcs	.L151
 574:.\FatFs/ff.c  **** 		}
 1520              		.loc 1 574 0 is_stmt 1
 1521 0058 A41B     		subs	r4, r4, r6
 1522              	.LVL217:
 1523 005a A4B2     		uxth	r4, r4
 1524              	.LVL218:
 569:.\FatFs/ff.c  **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1525              		.loc 1 569 0
 1526 005c A642     		cmp	r6, r4
 1527 005e EED9     		bls	.L152
 1528              	.LVL219:
 1529              	.L144:
 576:.\FatFs/ff.c  **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 1530              		.loc 1 576 0
 1531 0060 E960     		str	r1, [r5, #12]
 577:.\FatFs/ff.c  **** 	}
 1532              		.loc 1 577 0
 1533 0062 2868     		ldr	r0, [r5]
 1534 0064 FFF7FEFF 		bl	clust2sect
 1535              	.LVL220:
 1536 0068 00EB1410 		add	r0, r0, r4, lsr #4
 1537 006c 2861     		str	r0, [r5, #16]
 1538              	.LVL221:
 1539              	.L143:
 580:.\FatFs/ff.c  **** 
 1540              		.loc 1 580 0
 1541 006e 04F00F03 		and	r3, r4, #15
 1542 0072 5B01     		lsls	r3, r3, #5
 1543 0074 3033     		adds	r3, r3, #48
 1544 0076 2A68     		ldr	r2, [r5]
 1545 0078 1344     		add	r3, r3, r2
 1546 007a 6B61     		str	r3, [r5, #20]
 582:.\FatFs/ff.c  **** }
 1547              		.loc 1 582 0
 1548 007c 0020     		movs	r0, #0
 1549 007e 70BD     		pop	{r4, r5, r6, pc}
 1550              	.LVL222:
 1551              	.L146:
 557:.\FatFs/ff.c  **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 1552              		.loc 1 557 0
 1553 0080 0220     		movs	r0, #2
 1554              	.LVL223:
 1555 0082 70BD     		pop	{r4, r5, r6, pc}
 1556              	.LVL224:
 1557              	.L147:
 1558 0084 0220     		movs	r0, #2
 1559              	.LVL225:
 1560 0086 70BD     		pop	{r4, r5, r6, pc}
 1561              	.LVL226:
 1562              	.L148:
 564:.\FatFs/ff.c  **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 1563              		.loc 1 564 0
 1564 0088 0220     		movs	r0, #2
 1565              	.LVL227:
 1566 008a 70BD     		pop	{r4, r5, r6, pc}
 1567              	.LVL228:
 1568              	.L149:
 571:.\FatFs/ff.c  **** 			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 1569              		.loc 1 571 0
 1570 008c 0120     		movs	r0, #1
 1571              	.LVL229:
 1572 008e 70BD     		pop	{r4, r5, r6, pc}
 1573              	.LVL230:
 1574              	.L150:
 573:.\FatFs/ff.c  **** 			idx -= ic;
 1575              		.loc 1 573 0
 1576 0090 0220     		movs	r0, #2
 1577              	.LVL231:
 1578 0092 70BD     		pop	{r4, r5, r6, pc}
 1579              	.LVL232:
 1580              	.L151:
 1581 0094 0220     		movs	r0, #2
 1582              	.LVL233:
 583:.\FatFs/ff.c  **** 
 1583              		.loc 1 583 0
 1584 0096 70BD     		pop	{r4, r5, r6, pc}
 1585              		.cfi_endproc
 1586              	.LFE40:
 1588              		.section	.text.dir_next,"ax",%progbits
 1589              		.align	2
 1590              		.thumb
 1591              		.thumb_func
 1593              	dir_next:
 1594              	.LFB41:
 597:.\FatFs/ff.c  **** 	DWORD clst;
 1595              		.loc 1 597 0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 1599              	.LVL234:
 1600 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1601              	.LCFI14:
 1602              		.cfi_def_cfa_offset 32
 1603              		.cfi_offset 4, -32
 1604              		.cfi_offset 5, -28
 1605              		.cfi_offset 6, -24
 1606              		.cfi_offset 7, -20
 1607              		.cfi_offset 8, -16
 1608              		.cfi_offset 9, -12
 1609              		.cfi_offset 10, -8
 1610              		.cfi_offset 14, -4
 602:.\FatFs/ff.c  **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1611              		.loc 1 602 0
 1612 0004 C488     		ldrh	r4, [r0, #6]
 1613 0006 0134     		adds	r4, r4, #1
 1614 0008 A4B2     		uxth	r4, r4
 1615              	.LVL235:
 603:.\FatFs/ff.c  **** 		return FR_NO_FILE;
 1616              		.loc 1 603 0
 1617 000a 002C     		cmp	r4, #0
 1618 000c 6CD0     		beq	.L162
 603:.\FatFs/ff.c  **** 		return FR_NO_FILE;
 1619              		.loc 1 603 0 is_stmt 0 discriminator 1
 1620 000e 0369     		ldr	r3, [r0, #16]
 1621 0010 002B     		cmp	r3, #0
 1622 0012 6CD0     		beq	.L163
 1623 0014 0E46     		mov	r6, r1
 1624 0016 0546     		mov	r5, r0
 606:.\FatFs/ff.c  **** 		dj->sect++;					/* Next sector */
 1625              		.loc 1 606 0 is_stmt 1
 1626 0018 14F00F07 		ands	r7, r4, #15
 1627 001c 5BD1     		bne	.L157
 607:.\FatFs/ff.c  **** 
 1628              		.loc 1 607 0
 1629 001e 0133     		adds	r3, r3, #1
 1630 0020 0361     		str	r3, [r0, #16]
 609:.\FatFs/ff.c  **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 1631              		.loc 1 609 0
 1632 0022 C168     		ldr	r1, [r0, #12]
 1633              	.LVL236:
 1634 0024 21B9     		cbnz	r1, .L158
 610:.\FatFs/ff.c  **** 				return FR_NO_FILE;
 1635              		.loc 1 610 0
 1636 0026 0368     		ldr	r3, [r0]
 1637 0028 1B89     		ldrh	r3, [r3, #8]
 1638 002a A342     		cmp	r3, r4
 1639 002c 62D9     		bls	.L164
 1640 002e 52E0     		b	.L157
 1641              	.L158:
 614:.\FatFs/ff.c  **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 1642              		.loc 1 614 0
 1643 0030 0068     		ldr	r0, [r0]
 1644              	.LVL237:
 1645 0032 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 1646 0034 013B     		subs	r3, r3, #1
 1647 0036 13EA1413 		ands	r3, r3, r4, lsr #4
 1648 003a 4CD1     		bne	.L157
 615:.\FatFs/ff.c  **** 				if (clst <= 1) return FR_INT_ERR;
 1649              		.loc 1 615 0
 1650 003c FFF7FEFF 		bl	get_fat
 1651              	.LVL238:
 1652 0040 8046     		mov	r8, r0
 1653              	.LVL239:
 616:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1654              		.loc 1 616 0
 1655 0042 0128     		cmp	r0, #1
 1656 0044 59D9     		bls	.L165
 617:.\FatFs/ff.c  **** 				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 1657              		.loc 1 617 0
 1658 0046 B0F1FF3F 		cmp	r0, #-1
 1659 004a 59D0     		beq	.L166
 618:.\FatFs/ff.c  **** #if !_FS_READONLY
 1660              		.loc 1 618 0
 1661 004c 2868     		ldr	r0, [r5]
 1662              	.LVL240:
 1663 004e C369     		ldr	r3, [r0, #28]
 1664 0050 9845     		cmp	r8, r3
 1665 0052 39D3     		bcc	.L159
 1666              	.LBB4:
 621:.\FatFs/ff.c  **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 1667              		.loc 1 621 0
 1668 0054 002E     		cmp	r6, #0
 1669 0056 56D0     		beq	.L167
 622:.\FatFs/ff.c  **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 1670              		.loc 1 622 0
 1671 0058 E968     		ldr	r1, [r5, #12]
 1672 005a FFF7FEFF 		bl	create_chain
 1673              	.LVL241:
 623:.\FatFs/ff.c  **** 					if (clst == 1) return FR_INT_ERR;
 1674              		.loc 1 623 0
 1675 005e 8046     		mov	r8, r0
 1676 0060 0028     		cmp	r0, #0
 1677 0062 53D0     		beq	.L168
 624:.\FatFs/ff.c  **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1678              		.loc 1 624 0
 1679 0064 0128     		cmp	r0, #1
 1680 0066 54D0     		beq	.L169
 625:.\FatFs/ff.c  **** 					/* Clean-up streached table */
 1681              		.loc 1 625 0
 1682 0068 B0F1FF3F 		cmp	r0, #-1
 1683 006c 54D0     		beq	.L170
 627:.\FatFs/ff.c  **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 1684              		.loc 1 627 0
 1685 006e 2868     		ldr	r0, [r5]
 1686              	.LVL242:
 1687 0070 0021     		movs	r1, #0
 1688 0072 FFF7FEFF 		bl	move_window
 1689              	.LVL243:
 1690 0076 0028     		cmp	r0, #0
 1691 0078 51D1     		bne	.L171
 628:.\FatFs/ff.c  **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 1692              		.loc 1 628 0
 1693 007a 2868     		ldr	r0, [r5]
 1694 007c 3030     		adds	r0, r0, #48
 1695 007e 0021     		movs	r1, #0
 1696 0080 4FF40072 		mov	r2, #512
 1697 0084 FFF7FEFF 		bl	mem_set
 1698              	.LVL244:
 629:.\FatFs/ff.c  **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 1699              		.loc 1 629 0
 1700 0088 2E68     		ldr	r6, [r5]
 1701 008a 3046     		mov	r0, r6
 1702 008c 4146     		mov	r1, r8
 1703 008e FFF7FEFF 		bl	clust2sect
 1704              	.LVL245:
 1705 0092 F062     		str	r0, [r6, #44]
 1706              	.LVL246:
 630:.\FatFs/ff.c  **** 						dj->fs->wflag = 1;
 1707              		.loc 1 630 0
 1708 0094 0026     		movs	r6, #0
 631:.\FatFs/ff.c  **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 1709              		.loc 1 631 0
 1710 0096 4FF0010A 		mov	r10, #1
 632:.\FatFs/ff.c  **** 						dj->fs->winsect++;
 1711              		.loc 1 632 0
 1712 009a B146     		mov	r9, r6
 630:.\FatFs/ff.c  **** 						dj->fs->wflag = 1;
 1713              		.loc 1 630 0
 1714 009c 0CE0     		b	.L160
 1715              	.LVL247:
 1716              	.L161:
 631:.\FatFs/ff.c  **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 1717              		.loc 1 631 0
 1718 009e 83F804A0 		strb	r10, [r3, #4]
 632:.\FatFs/ff.c  **** 						dj->fs->winsect++;
 1719              		.loc 1 632 0
 1720 00a2 2868     		ldr	r0, [r5]
 1721 00a4 4946     		mov	r1, r9
 1722              	.LVL248:
 1723 00a6 FFF7FEFF 		bl	move_window
 1724              	.LVL249:
 1725 00aa 0136     		adds	r6, r6, #1
 1726              	.LVL250:
 1727 00ac 0028     		cmp	r0, #0
 1728 00ae 39D1     		bne	.L172
 633:.\FatFs/ff.c  **** 					}
 1729              		.loc 1 633 0 discriminator 2
 1730 00b0 2A68     		ldr	r2, [r5]
 1731 00b2 D36A     		ldr	r3, [r2, #44]
 1732 00b4 0133     		adds	r3, r3, #1
 1733 00b6 D362     		str	r3, [r2, #44]
 1734              	.LVL251:
 1735              	.L160:
 1736 00b8 F1B2     		uxtb	r1, r6
 1737              	.LVL252:
 630:.\FatFs/ff.c  **** 						dj->fs->wflag = 1;
 1738              		.loc 1 630 0 discriminator 1
 1739 00ba 2B68     		ldr	r3, [r5]
 1740 00bc 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 1741 00be 8A42     		cmp	r2, r1
 1742 00c0 EDD8     		bhi	.L161
 635:.\FatFs/ff.c  **** #else
 1743              		.loc 1 635 0
 1744 00c2 DA6A     		ldr	r2, [r3, #44]
 1745 00c4 521A     		subs	r2, r2, r1
 1746 00c6 DA62     		str	r2, [r3, #44]
 1747              	.LVL253:
 1748              	.L159:
 1749              	.LBE4:
 640:.\FatFs/ff.c  **** 				dj->sect = clust2sect(dj->fs, clst);
 1750              		.loc 1 640 0
 1751 00c8 C5F80C80 		str	r8, [r5, #12]
 641:.\FatFs/ff.c  **** 			}
 1752              		.loc 1 641 0
 1753 00cc 2868     		ldr	r0, [r5]
 1754 00ce 4146     		mov	r1, r8
 1755 00d0 FFF7FEFF 		bl	clust2sect
 1756              	.LVL254:
 1757 00d4 2861     		str	r0, [r5, #16]
 1758              	.LVL255:
 1759              	.L157:
 646:.\FatFs/ff.c  **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 1760              		.loc 1 646 0
 1761 00d6 EC80     		strh	r4, [r5, #6]	@ movhi
 647:.\FatFs/ff.c  **** 
 1762              		.loc 1 647 0
 1763 00d8 7F01     		lsls	r7, r7, #5
 1764 00da 3037     		adds	r7, r7, #48
 1765 00dc 2B68     		ldr	r3, [r5]
 1766 00de 1F44     		add	r7, r7, r3
 1767 00e0 6F61     		str	r7, [r5, #20]
 649:.\FatFs/ff.c  **** }
 1768              		.loc 1 649 0
 1769 00e2 0020     		movs	r0, #0
 1770 00e4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1771              	.LVL256:
 1772              	.L162:
 604:.\FatFs/ff.c  **** 
 1773              		.loc 1 604 0
 1774 00e8 0420     		movs	r0, #4
 1775              	.LVL257:
 1776 00ea BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1777              	.LVL258:
 1778              	.L163:
 1779 00ee 0420     		movs	r0, #4
 1780              	.LVL259:
 1781 00f0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1782              	.LVL260:
 1783              	.L164:
 611:.\FatFs/ff.c  **** 		}
 1784              		.loc 1 611 0
 1785 00f4 0420     		movs	r0, #4
 1786              	.LVL261:
 1787 00f6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1788              	.LVL262:
 1789              	.L165:
 616:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1790              		.loc 1 616 0
 1791 00fa 0220     		movs	r0, #2
 1792              	.LVL263:
 1793 00fc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1794              	.LVL264:
 1795              	.L166:
 617:.\FatFs/ff.c  **** 				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 1796              		.loc 1 617 0
 1797 0100 0120     		movs	r0, #1
 1798              	.LVL265:
 1799 0102 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1800              	.LVL266:
 1801              	.L167:
 1802              	.LBB5:
 621:.\FatFs/ff.c  **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 1803              		.loc 1 621 0
 1804 0106 0420     		movs	r0, #4
 1805 0108 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1806              	.LVL267:
 1807              	.L168:
 623:.\FatFs/ff.c  **** 					if (clst == 1) return FR_INT_ERR;
 1808              		.loc 1 623 0
 1809 010c 0720     		movs	r0, #7
 1810              	.LVL268:
 1811 010e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1812              	.LVL269:
 1813              	.L169:
 624:.\FatFs/ff.c  **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1814              		.loc 1 624 0
 1815 0112 0220     		movs	r0, #2
 1816              	.LVL270:
 1817 0114 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1818              	.LVL271:
 1819              	.L170:
 625:.\FatFs/ff.c  **** 					/* Clean-up streached table */
 1820              		.loc 1 625 0
 1821 0118 0120     		movs	r0, #1
 1822              	.LVL272:
 1823 011a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1824              	.LVL273:
 1825              	.L171:
 627:.\FatFs/ff.c  **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 1826              		.loc 1 627 0
 1827 011e 0120     		movs	r0, #1
 1828 0120 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1829              	.LVL274:
 1830              	.L172:
 632:.\FatFs/ff.c  **** 						dj->fs->winsect++;
 1831              		.loc 1 632 0
 1832 0124 0120     		movs	r0, #1
 1833              	.LBE5:
 650:.\FatFs/ff.c  **** 
 1834              		.loc 1 650 0
 1835 0126 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1836              		.cfi_endproc
 1837              	.LFE41:
 1839 012a 00BF     		.section	.text.dir_find,"ax",%progbits
 1840              		.align	2
 1841              		.thumb
 1842              		.thumb_func
 1844              	dir_find:
 1845              	.LFB47:
 833:.\FatFs/ff.c  **** 	FRESULT res;
 1846              		.loc 1 833 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 16
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              	.LVL275:
 1851 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1852              	.LCFI15:
 1853              		.cfi_def_cfa_offset 36
 1854              		.cfi_offset 4, -36
 1855              		.cfi_offset 5, -32
 1856              		.cfi_offset 6, -28
 1857              		.cfi_offset 7, -24
 1858              		.cfi_offset 8, -20
 1859              		.cfi_offset 9, -16
 1860              		.cfi_offset 10, -12
 1861              		.cfi_offset 11, -8
 1862              		.cfi_offset 14, -4
 1863 0004 85B0     		sub	sp, sp, #20
 1864              	.LCFI16:
 1865              		.cfi_def_cfa_offset 56
 1866 0006 0546     		mov	r5, r0
 840:.\FatFs/ff.c  **** 	if (res != FR_OK) return res;
 1867              		.loc 1 840 0
 1868 0008 0021     		movs	r1, #0
 1869 000a FFF7FEFF 		bl	dir_seek
 1870              	.LVL276:
 841:.\FatFs/ff.c  **** 
 1871              		.loc 1 841 0
 1872 000e 0028     		cmp	r0, #0
 1873 0010 40F09280 		bne	.L191
 1874 0014 4FF0FF09 		mov	r9, #255
 1875 0018 4F46     		mov	r7, r9
 855:.\FatFs/ff.c  **** 		} else {
 1876              		.loc 1 855 0
 1877 001a C846     		mov	r8, r9
 1878 001c 504B     		ldr	r3, .L206
 1879 001e 03F10D0B 		add	fp, r3, #13
 1880              	.L190:
 1881              	.LVL277:
 847:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 1882              		.loc 1 847 0
 1883 0022 2868     		ldr	r0, [r5]
 1884              	.LVL278:
 1885 0024 2969     		ldr	r1, [r5, #16]
 1886 0026 FFF7FEFF 		bl	move_window
 1887              	.LVL279:
 848:.\FatFs/ff.c  **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 1888              		.loc 1 848 0
 1889 002a 0028     		cmp	r0, #0
 1890 002c 40F08580 		bne	.L192
 849:.\FatFs/ff.c  **** 		c = dir[DIR_Name];
 1891              		.loc 1 849 0
 1892 0030 6C69     		ldr	r4, [r5, #20]
 1893              	.LVL280:
 850:.\FatFs/ff.c  **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 1894              		.loc 1 850 0
 1895 0032 2678     		ldrb	r6, [r4]	@ zero_extendqisi2
 1896              	.LVL281:
 851:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
 1897              		.loc 1 851 0
 1898 0034 002E     		cmp	r6, #0
 1899 0036 00F08180 		beq	.L193
 853:.\FatFs/ff.c  **** 		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 1900              		.loc 1 853 0
 1901 003a E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 1902 003c 03F03F02 		and	r2, r3, #63
 1903              	.LVL282:
 854:.\FatFs/ff.c  **** 			ord = 0xFF;
 1904              		.loc 1 854 0
 1905 0040 E52E     		cmp	r6, #229
 1906 0042 6AD0     		beq	.L194
 854:.\FatFs/ff.c  **** 			ord = 0xFF;
 1907              		.loc 1 854 0 is_stmt 0 discriminator 1
 1908 0044 13F0080F 		tst	r3, #8
 1909 0048 02D0     		beq	.L177
 854:.\FatFs/ff.c  **** 			ord = 0xFF;
 1910              		.loc 1 854 0 discriminator 2
 1911 004a 0F2A     		cmp	r2, #15
 1912 004c 67D1     		bne	.L195
 1913 004e 01E0     		b	.L178
 1914              	.L177:
 857:.\FatFs/ff.c  **** 				if (dj->lfn) {
 1915              		.loc 1 857 0 is_stmt 1
 1916 0050 0F2A     		cmp	r2, #15
 1917 0052 47D1     		bne	.L179
 1918              	.L178:
 858:.\FatFs/ff.c  **** 					if (c & 0x40) {		/* Is it start of LFN sequence? */
 1919              		.loc 1 858 0
 1920 0054 D5F81CA0 		ldr	r10, [r5, #28]
 1921 0058 BAF1000F 		cmp	r10, #0
 1922 005c 64D0     		beq	.L176
 859:.\FatFs/ff.c  **** 						sum = dir[LDIR_Chksum];
 1923              		.loc 1 859 0
 1924 005e 16F0400F 		tst	r6, #64
 1925 0062 06D0     		beq	.L180
 860:.\FatFs/ff.c  **** 						c &= 0xBF; ord = c;	/* LFN start order */
 1926              		.loc 1 860 0
 1927 0064 94F80D90 		ldrb	r9, [r4, #13]	@ zero_extendqisi2
 1928              	.LVL283:
 861:.\FatFs/ff.c  **** 						dj->lfn_idx = dj->index;
 1929              		.loc 1 861 0
 1930 0068 06F0BF06 		and	r6, r6, #191
 1931              	.LVL284:
 862:.\FatFs/ff.c  **** 					}
 1932              		.loc 1 862 0
 1933 006c EB88     		ldrh	r3, [r5, #6]
 1934 006e 2B84     		strh	r3, [r5, #32]	@ movhi
 1935 0070 03E0     		b	.L181
 1936              	.LVL285:
 1937              	.L180:
 865:.\FatFs/ff.c  **** 				}
 1938              		.loc 1 865 0
 1939 0072 B742     		cmp	r7, r6
 1940 0074 18BF     		it	ne
 1941 0076 4746     		movne	r7, r8
 1942              	.LVL286:
 1943 0078 56D1     		bne	.L176
 1944              	.L181:
 1945              	.LVL287:
 865:.\FatFs/ff.c  **** 				}
 1946              		.loc 1 865 0 is_stmt 0 discriminator 1
 1947 007a 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 1948 007c 0193     		str	r3, [sp, #4]
 1949 007e 4B45     		cmp	r3, r9
 1950 0080 4FD1     		bne	.L197
 1951              	.LVL288:
 1952              	.LBB10:
 1953              	.LBB11:
 673:.\FatFs/ff.c  **** 	s = 0; wc = 1;
 1954              		.loc 1 673 0 is_stmt 1
 1955 0082 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1956 0084 03F0BF03 		and	r3, r3, #191
 1957 0088 013B     		subs	r3, r3, #1
 1958 008a 03EB4309 		add	r9, r3, r3, lsl #1
 1959              	.LVL289:
 1960 008e 03EB8909 		add	r9, r3, r9, lsl #2
 1961              	.LVL290:
 1962 0092 334F     		ldr	r7, .L206
 674:.\FatFs/ff.c  **** 	do {
 1963              		.loc 1 674 0
 1964 0094 0120     		movs	r0, #1
 1965              	.LVL291:
 1966              	.L185:
 676:.\FatFs/ff.c  **** 		if (wc) {	/* Last char has not been processed */
 1967              		.loc 1 676 0
 1968 0096 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 1969              	.LVL292:
 1970 009a E35A     		ldrh	r3, [r4, r3]
 1971              	.LVL293:
 677:.\FatFs/ff.c  **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 1972              		.loc 1 677 0
 1973 009c 98B1     		cbz	r0, .L182
 1974              	.LVL294:
 678:.\FatFs/ff.c  **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 1975              		.loc 1 678 0
 1976 009e 1846     		mov	r0, r3
 1977 00a0 FFF7FEFF 		bl	ff_wtoupper
 1978              	.LVL295:
 1979 00a4 0290     		str	r0, [sp, #8]
 1980              	.LVL296:
 679:.\FatFs/ff.c  **** 				return FALSE;			/* Not matched */
 1981              		.loc 1 679 0
 1982 00a6 B9F1FE0F 		cmp	r9, #254
 1983 00aa 52DC     		bgt	.L183
 1984 00ac 09F10103 		add	r3, r9, #1
 1985 00b0 0393     		str	r3, [sp, #12]
 1986              	.LVL297:
 1987 00b2 3AF81900 		ldrh	r0, [r10, r9, lsl #1]
 1988 00b6 FFF7FEFF 		bl	ff_wtoupper
 1989              	.LVL298:
 1990 00ba 029A     		ldr	r2, [sp, #8]
 1991 00bc 8242     		cmp	r2, r0
 1992 00be 48D1     		bne	.L183
 1993 00c0 DDF80C90 		ldr	r9, [sp, #12]
 1994 00c4 03E0     		b	.L184
 1995              	.LVL299:
 1996              	.L182:
 682:.\FatFs/ff.c  **** 		}
 1997              		.loc 1 682 0
 1998 00c6 4FF6FF72 		movw	r2, #65535
 1999 00ca 9342     		cmp	r3, r2
 2000 00cc 41D1     		bne	.L183
 2001              	.LVL300:
 2002              	.L184:
 684:.\FatFs/ff.c  **** 
 2003              		.loc 1 684 0
 2004 00ce 5F45     		cmp	r7, fp
 2005 00d0 E1D1     		bne	.L185
 686:.\FatFs/ff.c  **** 		return FALSE;
 2006              		.loc 1 686 0
 2007 00d2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2008 00d4 13F0400F 		tst	r3, #64
 2009 00d8 36D0     		beq	.L186
 2010 00da A8B3     		cbz	r0, .L186
 2011 00dc 3AF81930 		ldrh	r3, [r10, r9, lsl #1]
 2012 00e0 93B3     		cbz	r3, .L186
 2013 00e2 36E0     		b	.L183
 2014              	.LVL301:
 2015              	.L179:
 2016              	.LBE11:
 2017              	.LBE10:
 868:.\FatFs/ff.c  **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 2018              		.loc 1 868 0
 2019 00e4 27B9     		cbnz	r7, .L187
 868:.\FatFs/ff.c  **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 2020              		.loc 1 868 0 is_stmt 0 discriminator 1
 2021 00e6 2046     		mov	r0, r4
 2022              	.LVL302:
 2023 00e8 FFF7FEFF 		bl	sum_sfn
 2024              	.LVL303:
 2025 00ec 4845     		cmp	r0, r9
 2026 00ee 27D0     		beq	.L198
 2027              	.L187:
 2028              	.LVL304:
 869:.\FatFs/ff.c  **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 2029              		.loc 1 869 0 is_stmt 1
 2030 00f0 4FF6FF73 		movw	r3, #65535
 2031 00f4 2B84     		strh	r3, [r5, #32]	@ movhi
 870:.\FatFs/ff.c  **** 			}
 2032              		.loc 1 870 0
 2033 00f6 AB69     		ldr	r3, [r5, #24]
 2034 00f8 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 2035 00fa 12F0010F 		tst	r2, #1
 2036 00fe 12D1     		bne	.L199
 2037 0100 04F10B00 		add	r0, r4, #11
 2038 0104 01E0     		b	.L188
 2039              	.LVL305:
 2040              	.L189:
 2041              	.LBB12:
 2042              	.LBB13:
 194:.\FatFs/ff.c  **** 	return r;
 2043              		.loc 1 194 0
 2044 0106 8442     		cmp	r4, r0
 2045 0108 1CD0     		beq	.L200
 2046              	.LVL306:
 2047              	.L188:
 2048 010a 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 2049              	.LVL307:
 2050 010e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 2051              	.LVL308:
 2052 0112 9142     		cmp	r1, r2
 2053 0114 F7D0     		beq	.L189
 2054              	.LBE13:
 2055              	.LBE12:
 869:.\FatFs/ff.c  **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 2056              		.loc 1 869 0
 2057 0116 4746     		mov	r7, r8
 2058 0118 06E0     		b	.L176
 2059              	.LVL309:
 2060              	.L194:
 855:.\FatFs/ff.c  **** 		} else {
 2061              		.loc 1 855 0
 2062 011a 4746     		mov	r7, r8
 2063              	.LVL310:
 2064 011c 04E0     		b	.L176
 2065              	.LVL311:
 2066              	.L195:
 2067 011e 4746     		mov	r7, r8
 2068              	.LVL312:
 2069 0120 02E0     		b	.L176
 2070              	.LVL313:
 2071              	.L197:
 865:.\FatFs/ff.c  **** 				}
 2072              		.loc 1 865 0
 2073 0122 4746     		mov	r7, r8
 2074 0124 00E0     		b	.L176
 2075              	.LVL314:
 2076              	.L199:
 869:.\FatFs/ff.c  **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 2077              		.loc 1 869 0
 2078 0126 4746     		mov	r7, r8
 2079              	.LVL315:
 2080              	.L176:
 877:.\FatFs/ff.c  **** 	} while (res == FR_OK);
 2081              		.loc 1 877 0
 2082 0128 2846     		mov	r0, r5
 2083 012a 0021     		movs	r1, #0
 2084 012c FFF7FEFF 		bl	dir_next
 2085              	.LVL316:
 878:.\FatFs/ff.c  **** 
 2086              		.loc 1 878 0
 2087 0130 0028     		cmp	r0, #0
 2088 0132 3FF476AF 		beq	.L190
 2089 0136 10E0     		b	.L204
 2090              	.LVL317:
 2091              	.L191:
 2092 0138 0FE0     		b	.L204
 2093              	.LVL318:
 2094              	.L192:
 2095 013a 0EE0     		b	.L204
 2096              	.LVL319:
 2097              	.L193:
 851:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
 2098              		.loc 1 851 0
 2099 013c 0420     		movs	r0, #4
 2100              	.LVL320:
 2101 013e 0CE0     		b	.L204
 2102              	.L198:
 847:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 2103              		.loc 1 847 0
 2104 0140 0020     		movs	r0, #0
 2105 0142 0AE0     		b	.L204
 2106              	.LVL321:
 2107              	.L200:
 2108 0144 0020     		movs	r0, #0
 2109              	.LVL322:
 2110 0146 08E0     		b	.L204
 2111              	.LVL323:
 2112              	.L186:
 865:.\FatFs/ff.c  **** 				}
 2113              		.loc 1 865 0
 2114 0148 013E     		subs	r6, r6, #1
 2115              	.LVL324:
 2116 014a F7B2     		uxtb	r7, r6
 2117              	.LVL325:
 2118 014c DDF80490 		ldr	r9, [sp, #4]
 2119              	.LVL326:
 2120 0150 EAE7     		b	.L176
 2121              	.LVL327:
 2122              	.L183:
 869:.\FatFs/ff.c  **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 2123              		.loc 1 869 0
 2124 0152 DDF80490 		ldr	r9, [sp, #4]
 865:.\FatFs/ff.c  **** 				}
 2125              		.loc 1 865 0
 2126 0156 4746     		mov	r7, r8
 2127 0158 E6E7     		b	.L176
 2128              	.LVL328:
 2129              	.L204:
 881:.\FatFs/ff.c  **** 
 2130              		.loc 1 881 0
 2131 015a 05B0     		add	sp, sp, #20
 2132              	.LCFI17:
 2133              		.cfi_def_cfa_offset 36
 2134              		@ sp needed
 2135 015c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2136              	.LVL329:
 2137              	.L207:
 2138              		.align	2
 2139              	.L206:
 2140 0160 00000000 		.word	.LANCHOR0
 2141              		.cfi_endproc
 2142              	.LFE47:
 2144              		.section	.text.follow_path,"ax",%progbits
 2145              		.align	2
 2146              		.thumb
 2147              		.thumb_func
 2149              	follow_path:
 2150              	.LFB53:
1385:.\FatFs/ff.c  **** 	FRESULT res;
 2151              		.loc 1 1385 0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 8
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
 2155              	.LVL330:
 2156 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2157              	.LCFI18:
 2158              		.cfi_def_cfa_offset 36
 2159              		.cfi_offset 4, -36
 2160              		.cfi_offset 5, -32
 2161              		.cfi_offset 6, -28
 2162              		.cfi_offset 7, -24
 2163              		.cfi_offset 8, -20
 2164              		.cfi_offset 9, -16
 2165              		.cfi_offset 10, -12
 2166              		.cfi_offset 11, -8
 2167              		.cfi_offset 14, -4
 2168 0004 83B0     		sub	sp, sp, #12
 2169              	.LCFI19:
 2170              		.cfi_def_cfa_offset 48
 2171 0006 0546     		mov	r5, r0
 2172 0008 8B46     		mov	fp, r1
1398:.\FatFs/ff.c  **** 		path++;
 2173              		.loc 1 1398 0
 2174 000a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 2175 000c 2F2B     		cmp	r3, #47
 2176 000e 01D0     		beq	.L209
1398:.\FatFs/ff.c  **** 		path++;
 2177              		.loc 1 1398 0 is_stmt 0 discriminator 1
 2178 0010 5C2B     		cmp	r3, #92
 2179 0012 01D1     		bne	.L210
 2180              	.L209:
1399:.\FatFs/ff.c  **** 	dj->sclust = 0;						/* Start from the root dir */
 2181              		.loc 1 1399 0 is_stmt 1
 2182 0014 0BF1010B 		add	fp, fp, #1
 2183              	.LVL331:
 2184              	.L210:
1400:.\FatFs/ff.c  **** #endif
 2185              		.loc 1 1400 0
 2186 0018 0023     		movs	r3, #0
 2187 001a AB60     		str	r3, [r5, #8]
1403:.\FatFs/ff.c  **** 		res = dir_seek(dj, 0);
 2188              		.loc 1 1403 0
 2189 001c 9BF80030 		ldrb	r3, [fp]	@ zero_extendqisi2
 2190 0020 1F2B     		cmp	r3, #31
 2191 0022 07D8     		bhi	.L277
1404:.\FatFs/ff.c  **** 		dj->dir = NULL;
 2192              		.loc 1 1404 0
 2193 0024 2846     		mov	r0, r5
 2194              	.LVL332:
 2195 0026 0021     		movs	r1, #0
 2196 0028 FFF7FEFF 		bl	dir_seek
 2197              	.LVL333:
 2198 002c 0246     		mov	r2, r0
 2199              	.LVL334:
1405:.\FatFs/ff.c  **** 
 2200              		.loc 1 1405 0
 2201 002e 0023     		movs	r3, #0
 2202 0030 6B61     		str	r3, [r5, #20]
 2203 0032 52E1     		b	.L268
 2204              	.LVL335:
 2205              	.L277:
 2206              	.LBB20:
 2207              	.LBB21:
1115:.\FatFs/ff.c  **** 	for (;;) {
 2208              		.loc 1 1115 0
 2209 0034 EE69     		ldr	r6, [r5, #28]
 2210              	.LVL336:
1117:.\FatFs/ff.c  **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 2211              		.loc 1 1117 0
 2212 0036 9BF80000 		ldrb	r0, [fp]	@ zero_extendqisi2
 2213              	.LVL337:
1118:.\FatFs/ff.c  **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 2214              		.loc 1 1118 0
 2215 003a 1F28     		cmp	r0, #31
 2216 003c 40F22B81 		bls	.L261
 2217 0040 2F28     		cmp	r0, #47
 2218 0042 00F02081 		beq	.L262
 2219 0046 5C28     		cmp	r0, #92
 2220 0048 00F02081 		beq	.L263
 2221 004c A6F10208 		sub	r8, r6, #2
 2222 0050 5F46     		mov	r7, fp
 2223 0052 0124     		movs	r4, #1
1129:.\FatFs/ff.c  **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 2224              		.loc 1 1129 0
 2225 0054 A146     		mov	r9, r4
 2226 0056 0AE0     		b	.L215
 2227              	.LVL338:
 2228              	.L273:
1118:.\FatFs/ff.c  **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 2229              		.loc 1 1118 0
 2230 0058 2F28     		cmp	r0, #47
 2231 005a 00F01981 		beq	.L214
 2232 005e 5C28     		cmp	r0, #92
 2233 0060 00F01681 		beq	.L214
1119:.\FatFs/ff.c  **** 			return FR_INVALID_NAME;
 2234              		.loc 1 1119 0
 2235 0064 B3F5807F 		cmp	r3, #256
 2236 0068 00F02D81 		beq	.L216
1117:.\FatFs/ff.c  **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 2237              		.loc 1 1117 0
 2238 006c 1C46     		mov	r4, r3
 2239              	.LVL339:
 2240              	.L215:
1129:.\FatFs/ff.c  **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 2241              		.loc 1 1129 0
 2242 006e 4946     		mov	r1, r9
 2243 0070 FFF7FEFF 		bl	ff_convert
 2244              	.LVL340:
1130:.\FatFs/ff.c  **** #endif
 2245              		.loc 1 1130 0
 2246 0074 0146     		mov	r1, r0
 2247 0076 0028     		cmp	r0, #0
 2248 0078 00F02581 		beq	.L216
1132:.\FatFs/ff.c  **** 			return FR_INVALID_NAME;
 2249              		.loc 1 1132 0
 2250 007c 7F28     		cmp	r0, #127
 2251 007e 09D8     		bhi	.L217
 2252              	.LVL341:
 2253              	.LBB22:
 2254              	.LBB23:
 201:.\FatFs/ff.c  **** 	return *str;
 2255              		.loc 1 201 0
 2256 0080 2229     		cmp	r1, #34
 2257 0082 00F0E980 		beq	.L218
 2258 0086 974A     		ldr	r2, .L284
 2259              	.LVL342:
 2260              	.L219:
 2261 0088 12F8013F 		ldrb	r3, [r2, #1]!	@ zero_extendqisi2
 2262              	.LVL343:
 2263 008c 13B1     		cbz	r3, .L217
 2264 008e 9842     		cmp	r0, r3
 2265 0090 FAD1     		bne	.L219
 2266 0092 E1E0     		b	.L218
 2267              	.LVL344:
 2268              	.L217:
 2269              	.LBE23:
 2270              	.LBE22:
1134:.\FatFs/ff.c  **** 	}
 2271              		.loc 1 1134 0
 2272 0094 28F8021F 		strh	r1, [r8, #2]!	@ movhi
1117:.\FatFs/ff.c  **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 2273              		.loc 1 1117 0
 2274 0098 631C     		adds	r3, r4, #1
 2275              	.LVL345:
 2276 009a 17F8010F 		ldrb	r0, [r7, #1]!	@ zero_extendqisi2
 2277              	.LVL346:
1118:.\FatFs/ff.c  **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 2278              		.loc 1 1118 0
 2279 009e 1F28     		cmp	r0, #31
 2280 00a0 DAD8     		bhi	.L273
 2281 00a2 FAE0     		b	.L213
 2282              	.LVL347:
 2283              	.L256:
1148:.\FatFs/ff.c  **** 		w = lfn[di - 1];
 2284              		.loc 1 1148 0
 2285 00a4 002C     		cmp	r4, #0
 2286 00a6 00F0D780 		beq	.L218
 2287 00aa 06EB4402 		add	r2, r6, r4, lsl #1
 2288              	.LVL348:
 2289              	.L223:
1149:.\FatFs/ff.c  **** 		if (w != ' ' && w != '.') break;
 2290              		.loc 1 1149 0
 2291 00ae 32F8023D 		ldrh	r3, [r2, #-2]!
 2292              	.LVL349:
1150:.\FatFs/ff.c  **** 		di--;
 2293              		.loc 1 1150 0
 2294 00b2 202B     		cmp	r3, #32
 2295 00b4 01D0     		beq	.L221
 2296 00b6 2E2B     		cmp	r3, #46
 2297 00b8 02D1     		bne	.L222
 2298              	.L221:
 2299              	.LVL350:
1148:.\FatFs/ff.c  **** 		w = lfn[di - 1];
 2300              		.loc 1 1148 0
 2301 00ba 013C     		subs	r4, r4, #1
 2302              	.LVL351:
 2303 00bc F7D1     		bne	.L223
 2304 00be CBE0     		b	.L218
 2305              	.L222:
1153:.\FatFs/ff.c  **** 
 2306              		.loc 1 1153 0
 2307 00c0 002C     		cmp	r4, #0
 2308 00c2 00F00081 		beq	.L216
1155:.\FatFs/ff.c  **** 
 2309              		.loc 1 1155 0
 2310 00c6 4FEA4408 		lsl	r8, r4, #1
 2311 00ca 4FF00003 		mov	r3, #0	@ movhi
 2312              	.LVL352:
 2313 00ce 26F81430 		strh	r3, [r6, r4, lsl #1]	@ movhi
 2314              	.LVL353:
1158:.\FatFs/ff.c  **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 2315              		.loc 1 1158 0
 2316 00d2 A869     		ldr	r0, [r5, #24]
 2317 00d4 2021     		movs	r1, #32
 2318 00d6 0B22     		movs	r2, #11
 2319 00d8 FFF7FEFF 		bl	mem_set
 2320              	.LVL354:
 2321 00dc B11E     		subs	r1, r6, #2
1159:.\FatFs/ff.c  **** 	if (si) cf |= NS_LOSS | NS_LFN;
 2322              		.loc 1 1159 0
 2323 00de 0023     		movs	r3, #0
 2324 00e0 00E0     		b	.L224
 2325              	.LVL355:
 2326              	.L225:
 2327 00e2 0133     		adds	r3, r3, #1
 2328              	.LVL356:
 2329              	.L224:
 2330 00e4 31F8022F 		ldrh	r2, [r1, #2]!
 2331 00e8 202A     		cmp	r2, #32
 2332 00ea FAD0     		beq	.L225
 2333 00ec 2E2A     		cmp	r2, #46
 2334 00ee F8D0     		beq	.L225
1160:.\FatFs/ff.c  **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 2335              		.loc 1 1160 0
 2336 00f0 002B     		cmp	r3, #0
 2337 00f2 00F0D580 		beq	.L226
 2338 00f6 47F00307 		orr	r7, r7, #3
 2339              	.LVL357:
 2340 00fa D1E0     		b	.L226
 2341              	.LVL358:
 2342              	.L229:
1161:.\FatFs/ff.c  **** 
 2343              		.loc 1 1161 0
 2344 00fc 013C     		subs	r4, r4, #1
 2345              	.LVL359:
 2346 00fe 07D1     		bne	.L227
 2347              	.LVL360:
 2348              	.L230:
1165:.\FatFs/ff.c  **** 		if (!w) break;					/* Break on end of the LFN */
 2349              		.loc 1 1165 0
 2350 0100 4FF00809 		mov	r9, #8
 2351 0104 4FF0000A 		mov	r10, #0
 2352 0108 CDF800A0 		str	r10, [sp]
1178:.\FatFs/ff.c  **** 		}
 2353              		.loc 1 1178 0
 2354 010c 0194     		str	r4, [sp, #4]
 2355 010e 04E0     		b	.L228
 2356              	.LVL361:
 2357              	.L227:
1161:.\FatFs/ff.c  **** 
 2358              		.loc 1 1161 0
 2359 0110 32F8021D 		ldrh	r1, [r2, #-2]!
 2360 0114 2E29     		cmp	r1, #46
 2361 0116 F1D1     		bne	.L229
 2362 0118 F2E7     		b	.L230
 2363              	.LVL362:
 2364              	.L228:
1165:.\FatFs/ff.c  **** 		if (!w) break;					/* Break on end of the LFN */
 2365              		.loc 1 1165 0
 2366 011a 03F10108 		add	r8, r3, #1
 2367              	.LVL363:
 2368 011e 36F81300 		ldrh	r0, [r6, r3, lsl #1]
 2369              	.LVL364:
1166:.\FatFs/ff.c  **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 2370              		.loc 1 1166 0
 2371 0122 0028     		cmp	r0, #0
 2372 0124 60D0     		beq	.L231
1167:.\FatFs/ff.c  **** 			cf |= NS_LOSS | NS_LFN; continue;
 2373              		.loc 1 1167 0
 2374 0126 2028     		cmp	r0, #32
 2375 0128 04D0     		beq	.L232
 2376 012a 2E28     		cmp	r0, #46
 2377 012c 06D1     		bne	.L233
 2378 012e 4445     		cmp	r4, r8
 2379 0130 00F0CB80 		beq	.L234
 2380              	.L232:
1168:.\FatFs/ff.c  **** 		}
 2381              		.loc 1 1168 0
 2382 0134 47F00307 		orr	r7, r7, #3
 2383              	.LVL365:
1165:.\FatFs/ff.c  **** 		if (!w) break;					/* Break on end of the LFN */
 2384              		.loc 1 1165 0
 2385 0138 4346     		mov	r3, r8
 2386 013a EEE7     		b	.L228
 2387              	.L233:
1171:.\FatFs/ff.c  **** 			if (ni == 11) {				/* Long extension */
 2388              		.loc 1 1171 0
 2389 013c CA45     		cmp	r10, r9
 2390 013e 02DA     		bge	.L236
 2391 0140 4445     		cmp	r4, r8
 2392 0142 1AD1     		bne	.L274
 2393 0144 C1E0     		b	.L234
 2394              	.L236:
1172:.\FatFs/ff.c  **** 				cf |= NS_LOSS | NS_LFN; break;
 2395              		.loc 1 1172 0
 2396 0146 B9F10B0F 		cmp	r9, #11
 2397 014a 06D1     		bne	.L238
 2398              	.L260:
1173:.\FatFs/ff.c  **** 			}
 2399              		.loc 1 1173 0
 2400 014c 47F00307 		orr	r7, r7, #3
 2401              	.LVL366:
1212:.\FatFs/ff.c  **** 
 2402              		.loc 1 1212 0
 2403 0150 AB69     		ldr	r3, [r5, #24]
 2404 0152 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2405 0154 E52A     		cmp	r2, #229
 2406 0156 59D1     		bne	.L240
 2407 0158 4BE0     		b	.L264
 2408              	.L238:
1175:.\FatFs/ff.c  **** 			if (si > di) break;			/* No extension */
 2409              		.loc 1 1175 0
 2410 015a 4445     		cmp	r4, r8
 2411 015c 03D0     		beq	.L241
 2412 015e 47F00307 		orr	r7, r7, #3
 2413              	.LVL367:
1176:.\FatFs/ff.c  **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
 2414              		.loc 1 1176 0
 2415 0162 A045     		cmp	r8, r4
 2416 0164 40DC     		bgt	.L231
 2417              	.L241:
 2418              	.LVL368:
1178:.\FatFs/ff.c  **** 		}
 2419              		.loc 1 1178 0
 2420 0166 009B     		ldr	r3, [sp]
 2421 0168 9B00     		lsls	r3, r3, #2
 2422 016a DBB2     		uxtb	r3, r3
 2423 016c 0093     		str	r3, [sp]
 2424              	.LVL369:
 2425 016e 019B     		ldr	r3, [sp, #4]
1177:.\FatFs/ff.c  **** 			b <<= 2; continue;
 2426              		.loc 1 1177 0
 2427 0170 4FF00B09 		mov	r9, #11
 2428 0174 4FF0080A 		mov	r10, #8
 2429 0178 CFE7     		b	.L228
 2430              	.LVL370:
 2431              	.L274:
1181:.\FatFs/ff.c  **** #ifdef _EXCVT
 2432              		.loc 1 1181 0
 2433 017a 7F28     		cmp	r0, #127
 2434 017c 40F29A80 		bls	.L242
1183:.\FatFs/ff.c  **** 			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 2435              		.loc 1 1183 0
 2436 0180 0021     		movs	r1, #0
 2437 0182 FFF7FEFF 		bl	ff_convert
 2438              	.LVL371:
1184:.\FatFs/ff.c  **** #else
 2439              		.loc 1 1184 0
 2440 0186 0346     		mov	r3, r0
 2441 0188 0028     		cmp	r0, #0
 2442 018a 00F0A380 		beq	.L243
 2443 018e 564A     		ldr	r2, .L284+4
 2444 0190 1344     		add	r3, r3, r2
 2445 0192 13F8801C 		ldrb	r1, [r3, #-128]	@ zero_extendqisi2
 2446 0196 88B2     		uxth	r0, r1
 2447              	.LVL372:
1188:.\FatFs/ff.c  **** 		}
 2448              		.loc 1 1188 0
 2449 0198 47F00207 		orr	r7, r7, #2
 2450              	.LVL373:
1197:.\FatFs/ff.c  **** 				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
 2451              		.loc 1 1197 0
 2452 019c 48B1     		cbz	r0, .L244
 2453              	.L257:
 2454              	.LVL374:
 2455              	.LBB24:
 2456              	.LBB25:
 201:.\FatFs/ff.c  **** 	return *str;
 2457              		.loc 1 201 0
 2458 019e 2B29     		cmp	r1, #43
 2459 01a0 07D0     		beq	.L244
 2460 01a2 524A     		ldr	r2, .L284+8
 2461              	.LVL375:
 2462              	.L247:
 2463 01a4 12F8013F 		ldrb	r3, [r2, #1]!	@ zero_extendqisi2
 2464              	.LVL376:
 2465 01a8 002B     		cmp	r3, #0
 2466 01aa 00F08580 		beq	.L246
 2467 01ae 9942     		cmp	r1, r3
 2468 01b0 F8D1     		bne	.L247
 2469              	.LVL377:
 2470              	.L244:
 2471              	.LBE25:
 2472              	.LBE24:
1198:.\FatFs/ff.c  **** 			} else {
 2473              		.loc 1 1198 0
 2474 01b2 47F00307 		orr	r7, r7, #3
 2475              	.LVL378:
 2476 01b6 5F20     		movs	r0, #95
 2477 01b8 0FE0     		b	.L248
 2478              	.LVL379:
 2479              	.L258:
1201:.\FatFs/ff.c  **** 				} else {
 2480              		.loc 1 1201 0
 2481 01ba 009B     		ldr	r3, [sp]
 2482 01bc 43F00203 		orr	r3, r3, #2
 2483 01c0 0093     		str	r3, [sp]
 2484              	.LVL380:
 2485 01c2 0AE0     		b	.L248
 2486              	.L278:
1203:.\FatFs/ff.c  **** 						b |= 1; w -= 0x20;
 2487              		.loc 1 1203 0
 2488 01c4 A0F16103 		sub	r3, r0, #97
 2489 01c8 9BB2     		uxth	r3, r3
 2490 01ca 192B     		cmp	r3, #25
 2491 01cc 05D8     		bhi	.L248
1204:.\FatFs/ff.c  **** 					}
 2492              		.loc 1 1204 0
 2493 01ce 009B     		ldr	r3, [sp]
 2494 01d0 43F00103 		orr	r3, r3, #1
 2495 01d4 0093     		str	r3, [sp]
 2496              	.LVL381:
 2497 01d6 2038     		subs	r0, r0, #32
 2498              	.LVL382:
 2499 01d8 80B2     		uxth	r0, r0
 2500              	.LVL383:
 2501              	.L248:
1209:.\FatFs/ff.c  **** 	}
 2502              		.loc 1 1209 0
 2503 01da AB69     		ldr	r3, [r5, #24]
 2504 01dc 03F80A00 		strb	r0, [r3, r10]
1165:.\FatFs/ff.c  **** 		if (!w) break;					/* Break on end of the LFN */
 2505              		.loc 1 1165 0
 2506 01e0 4346     		mov	r3, r8
1209:.\FatFs/ff.c  **** 	}
 2507              		.loc 1 1209 0
 2508 01e2 0AF1010A 		add	r10, r10, #1
 2509              	.LVL384:
 2510 01e6 98E7     		b	.L228
 2511              	.L231:
1212:.\FatFs/ff.c  **** 
 2512              		.loc 1 1212 0
 2513 01e8 AB69     		ldr	r3, [r5, #24]
 2514 01ea 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2515 01ec E52A     		cmp	r2, #229
 2516 01ee 06D1     		bne	.L265
 2517 01f0 01E0     		b	.L239
 2518              	.L264:
 2519 01f2 4FF00B09 		mov	r9, #11
 2520              	.LVL385:
 2521              	.L239:
 2522 01f6 0522     		movs	r2, #5
 2523 01f8 1A70     		strb	r2, [r3]
 2524 01fa 009B     		ldr	r3, [sp]
 2525 01fc 00E0     		b	.L249
 2526              	.LVL386:
 2527              	.L265:
 2528 01fe 009B     		ldr	r3, [sp]
 2529              	.LVL387:
 2530              	.L249:
1214:.\FatFs/ff.c  **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 2531              		.loc 1 1214 0
 2532 0200 B9F1080F 		cmp	r9, #8
 2533 0204 02D1     		bne	.L240
 2534 0206 9B00     		lsls	r3, r3, #2
 2535 0208 DBB2     		uxtb	r3, r3
 2536 020a 0093     		str	r3, [sp]
 2537              	.LVL388:
 2538              	.L240:
1215:.\FatFs/ff.c  **** 		cf |= NS_LFN;
 2539              		.loc 1 1215 0
 2540 020c 009A     		ldr	r2, [sp]
 2541 020e 02F00C03 		and	r3, r2, #12
 2542 0212 0C2B     		cmp	r3, #12
 2543 0214 03D0     		beq	.L250
 2544 0216 02F00302 		and	r2, r2, #3
 2545 021a 032A     		cmp	r2, #3
 2546 021c 01D1     		bne	.L251
 2547              	.L250:
1216:.\FatFs/ff.c  **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
 2548              		.loc 1 1216 0
 2549 021e 47F00207 		orr	r7, r7, #2
 2550              	.LVL389:
 2551              	.L251:
1217:.\FatFs/ff.c  **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 2552              		.loc 1 1217 0
 2553 0222 17F0020F 		tst	r7, #2
 2554 0226 0AD1     		bne	.L252
1218:.\FatFs/ff.c  **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 2555              		.loc 1 1218 0
 2556 0228 009A     		ldr	r2, [sp]
 2557 022a 02F00302 		and	r2, r2, #3
 2558 022e 012A     		cmp	r2, #1
 2559 0230 08BF     		it	eq
 2560 0232 47F01007 		orreq	r7, r7, #16
 2561              	.LVL390:
1219:.\FatFs/ff.c  **** 	}
 2562              		.loc 1 1219 0
 2563 0236 042B     		cmp	r3, #4
 2564 0238 08BF     		it	eq
 2565 023a 47F00807 		orreq	r7, r7, #8
 2566              	.LVL391:
 2567              	.L252:
1222:.\FatFs/ff.c  **** 
 2568              		.loc 1 1222 0
 2569 023e AB69     		ldr	r3, [r5, #24]
 2570 0240 DF72     		strb	r7, [r3, #11]
 2571              	.LBE21:
 2572              	.LBE20:
1411:.\FatFs/ff.c  **** 			last = *(dj->fn+NS) & NS_LAST;
 2573              		.loc 1 1411 0
 2574 0242 2846     		mov	r0, r5
 2575              	.LVL392:
 2576 0244 FFF7FEFF 		bl	dir_find
 2577              	.LVL393:
1412:.\FatFs/ff.c  **** 			if (res != FR_OK) {				/* Could not find the object */
 2578              		.loc 1 1412 0
 2579 0248 AB69     		ldr	r3, [r5, #24]
 2580 024a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 2581 024c 03F00403 		and	r3, r3, #4
 2582 0250 DBB2     		uxtb	r3, r3
 2583              	.LVL394:
1413:.\FatFs/ff.c  **** 				if (res == FR_NO_FILE && !last)
 2584              		.loc 1 1413 0
 2585 0252 0246     		mov	r2, r0
 2586 0254 48B1     		cbz	r0, .L276
 2587 0256 01E0     		b	.L254
 2588              	.LVL395:
 2589              	.L218:
 2590 0258 0622     		movs	r2, #6
 2591 025a 3EE0     		b	.L268
 2592              	.LVL396:
 2593              	.L254:
1414:.\FatFs/ff.c  **** 					res = FR_NO_PATH;
 2594              		.loc 1 1414 0
 2595 025c 0428     		cmp	r0, #4
 2596 025e 3CD1     		bne	.L268
1415:.\FatFs/ff.c  **** 				break;
 2597              		.loc 1 1415 0 discriminator 1
 2598 0260 002B     		cmp	r3, #0
 2599 0262 14BF     		ite	ne
 2600 0264 0246     		movne	r2, r0
 2601 0266 0522     		moveq	r2, #5
 2602 0268 37E0     		b	.L268
 2603              	.L276:
1418:.\FatFs/ff.c  **** 			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 2604              		.loc 1 1418 0
 2605 026a B3BB     		cbnz	r3, .L268
1419:.\FatFs/ff.c  **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 2606              		.loc 1 1419 0
 2607 026c 6A69     		ldr	r2, [r5, #20]
 2608              	.LVL397:
1420:.\FatFs/ff.c  **** 				res = FR_NO_PATH; break;
 2609              		.loc 1 1420 0
 2610 026e D37A     		ldrb	r3, [r2, #11]	@ zero_extendqisi2
 2611              	.LVL398:
 2612 0270 13F0100F 		tst	r3, #16
 2613 0274 05D0     		beq	.L267
1423:.\FatFs/ff.c  **** 		}
 2614              		.loc 1 1423 0
 2615 0276 918A     		ldrh	r1, [r2, #20]
 2616 0278 538B     		ldrh	r3, [r2, #26]
 2617 027a 43EA0143 		orr	r3, r3, r1, lsl #16
 2618 027e AB60     		str	r3, [r5, #8]
 2619              	.LVL399:
1424:.\FatFs/ff.c  **** 	}
 2620              		.loc 1 1424 0
 2621 0280 D8E6     		b	.L277
 2622              	.LVL400:
 2623              	.L267:
1421:.\FatFs/ff.c  **** 			}
 2624              		.loc 1 1421 0
 2625 0282 0522     		movs	r2, #5
 2626              	.LVL401:
 2627 0284 29E0     		b	.L268
 2628              	.LVL402:
 2629              	.L262:
 2630              	.LBB28:
 2631              	.LBB26:
1113:.\FatFs/ff.c  **** 	p = *path;
 2632              		.loc 1 1113 0
 2633 0286 0024     		movs	r4, #0
1117:.\FatFs/ff.c  **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 2634              		.loc 1 1117 0
 2635 0288 0123     		movs	r3, #1
 2636 028a 01E0     		b	.L214
 2637              	.L263:
1113:.\FatFs/ff.c  **** 	p = *path;
 2638              		.loc 1 1113 0
 2639 028c 0024     		movs	r4, #0
1117:.\FatFs/ff.c  **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 2640              		.loc 1 1117 0
 2641 028e 0123     		movs	r3, #1
 2642              	.LVL403:
 2643              	.L214:
1136:.\FatFs/ff.c  **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 2644              		.loc 1 1136 0
 2645 0290 9B44     		add	fp, fp, r3
 2646              	.LVL404:
1137:.\FatFs/ff.c  **** #if _FS_RPATH
 2647              		.loc 1 1137 0
 2648 0292 0027     		movs	r7, #0
 2649 0294 06E7     		b	.L256
 2650              	.LVL405:
 2651              	.L261:
1113:.\FatFs/ff.c  **** 	p = *path;
 2652              		.loc 1 1113 0
 2653 0296 0024     		movs	r4, #0
1117:.\FatFs/ff.c  **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 2654              		.loc 1 1117 0
 2655 0298 0123     		movs	r3, #1
 2656              	.LVL406:
 2657              	.L213:
1136:.\FatFs/ff.c  **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 2658              		.loc 1 1136 0
 2659 029a 9B44     		add	fp, fp, r3
 2660              	.LVL407:
1137:.\FatFs/ff.c  **** #if _FS_RPATH
 2661              		.loc 1 1137 0
 2662 029c 0427     		movs	r7, #4
 2663 029e 01E7     		b	.L256
 2664              	.LVL408:
 2665              	.L226:
1161:.\FatFs/ff.c  **** 
 2666              		.loc 1 1161 0
 2667 02a0 A8F10208 		sub	r8, r8, #2
 2668 02a4 06EB0802 		add	r2, r6, r8
 2669 02a8 36F80810 		ldrh	r1, [r6, r8]
 2670 02ac 2E29     		cmp	r1, #46
 2671 02ae 3FF427AF 		beq	.L230
 2672 02b2 23E7     		b	.L229
 2673              	.LVL409:
 2674              	.L242:
1197:.\FatFs/ff.c  **** 				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
 2675              		.loc 1 1197 0
 2676 02b4 0146     		mov	r1, r0
 2677              	.LVL410:
 2678 02b6 72E7     		b	.L257
 2679              	.LVL411:
 2680              	.L246:
1200:.\FatFs/ff.c  **** 					b |= 2;
 2681              		.loc 1 1200 0
 2682 02b8 A0F14103 		sub	r3, r0, #65
 2683 02bc 9BB2     		uxth	r3, r3
 2684 02be 192B     		cmp	r3, #25
 2685 02c0 7FF67BAF 		bls	.L258
 2686 02c4 7EE7     		b	.L278
 2687              	.LVL412:
 2688              	.L216:
 2689              	.LBE26:
 2690              	.LBE28:
1415:.\FatFs/ff.c  **** 				break;
 2691              		.loc 1 1415 0
 2692 02c6 0622     		movs	r2, #6
 2693              	.LVL413:
 2694 02c8 07E0     		b	.L268
 2695              	.LVL414:
 2696              	.L234:
 2697              	.LBB29:
 2698              	.LBB27:
1172:.\FatFs/ff.c  **** 				cf |= NS_LOSS | NS_LFN; break;
 2699              		.loc 1 1172 0
 2700 02ca B9F10B0F 		cmp	r9, #11
 2701 02ce 7FF44AAF 		bne	.L241
 2702 02d2 3BE7     		b	.L260
 2703              	.L243:
 2704              	.LVL415:
1188:.\FatFs/ff.c  **** 		}
 2705              		.loc 1 1188 0
 2706 02d4 47F00207 		orr	r7, r7, #2
 2707              	.LVL416:
 2708 02d8 6BE7     		b	.L244
 2709              	.LVL417:
 2710              	.L268:
 2711              	.LBE27:
 2712              	.LBE29:
1428:.\FatFs/ff.c  **** 
 2713              		.loc 1 1428 0
 2714 02da 1046     		mov	r0, r2
 2715 02dc 03B0     		add	sp, sp, #12
 2716              	.LCFI20:
 2717              		.cfi_def_cfa_offset 36
 2718              		@ sp needed
 2719 02de BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2720              	.LVL418:
 2721              	.L285:
 2722 02e2 00BF     		.align	2
 2723              	.L284:
 2724 02e4 00000000 		.word	.LC0
 2725 02e8 00000000 		.word	.LANCHOR1
 2726 02ec 0C000000 		.word	.LC1
 2727              		.cfi_endproc
 2728              	.LFE53:
 2730              		.section	.text.dir_read,"ax",%progbits
 2731              		.align	2
 2732              		.thumb
 2733              		.thumb_func
 2735              	dir_read:
 2736              	.LFB48:
 894:.\FatFs/ff.c  **** 	FRESULT res;
 2737              		.loc 1 894 0
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 0
 2740              		@ frame_needed = 0, uses_anonymous_args = 0
 2741              	.LVL419:
 2742 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2743              	.LCFI21:
 2744              		.cfi_def_cfa_offset 32
 2745              		.cfi_offset 4, -32
 2746              		.cfi_offset 5, -28
 2747              		.cfi_offset 6, -24
 2748              		.cfi_offset 7, -20
 2749              		.cfi_offset 8, -16
 2750              		.cfi_offset 9, -12
 2751              		.cfi_offset 10, -8
 2752              		.cfi_offset 14, -4
 2753 0004 0446     		mov	r4, r0
 2754              	.LVL420:
 898:.\FatFs/ff.c  **** #endif
 2755              		.loc 1 898 0
 2756 0006 4FF0FF0A 		mov	r10, #255
 2757 000a 5546     		mov	r5, r10
 901:.\FatFs/ff.c  **** 	while (dj->sect) {
 2758              		.loc 1 901 0
 2759 000c 0423     		movs	r3, #4
 911:.\FatFs/ff.c  **** 		} else {
 2760              		.loc 1 911 0
 2761 000e 5746     		mov	r7, r10
 2762 0010 DFF80891 		ldr	r9, .L315
 2763 0014 09F10D08 		add	r8, r9, #13
 902:.\FatFs/ff.c  **** 		res = move_window(dj->fs, dj->sect);
 2764              		.loc 1 902 0
 2765 0018 69E0     		b	.L287
 2766              	.LVL421:
 2767              	.L302:
 903:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 2768              		.loc 1 903 0
 2769 001a 2068     		ldr	r0, [r4]
 2770 001c FFF7FEFF 		bl	move_window
 2771              	.LVL422:
 904:.\FatFs/ff.c  **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 2772              		.loc 1 904 0
 2773 0020 0646     		mov	r6, r0
 2774 0022 0028     		cmp	r0, #0
 2775 0024 68D1     		bne	.L304
 905:.\FatFs/ff.c  **** 		c = dir[DIR_Name];
 2776              		.loc 1 905 0
 2777 0026 6069     		ldr	r0, [r4, #20]
 2778              	.LVL423:
 906:.\FatFs/ff.c  **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2779              		.loc 1 906 0
 2780 0028 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2781              	.LVL424:
 907:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
 2782              		.loc 1 907 0
 2783 002a 002B     		cmp	r3, #0
 2784 002c 6ED0     		beq	.L305
 909:.\FatFs/ff.c  **** 		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without
 2785              		.loc 1 909 0
 2786 002e C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 2787              	.LVL425:
 910:.\FatFs/ff.c  **** 			ord = 0xFF;
 2788              		.loc 1 910 0
 2789 0030 E52B     		cmp	r3, #229
 2790 0032 4FD0     		beq	.L306
 910:.\FatFs/ff.c  **** 			ord = 0xFF;
 2791              		.loc 1 910 0 is_stmt 0 discriminator 1
 2792 0034 2E2B     		cmp	r3, #46
 2793 0036 4FD0     		beq	.L307
 909:.\FatFs/ff.c  **** 		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without
 2794              		.loc 1 909 0 is_stmt 1 discriminator 2
 2795 0038 02F03F01 		and	r1, r2, #63
 910:.\FatFs/ff.c  **** 			ord = 0xFF;
 2796              		.loc 1 910 0 discriminator 2
 2797 003c 12F0080F 		tst	r2, #8
 2798 0040 02D0     		beq	.L290
 910:.\FatFs/ff.c  **** 			ord = 0xFF;
 2799              		.loc 1 910 0 is_stmt 0 discriminator 3
 2800 0042 0F29     		cmp	r1, #15
 2801 0044 4AD1     		bne	.L308
 2802 0046 01E0     		b	.L291
 2803              	.L290:
 913:.\FatFs/ff.c  **** 				if (c & 0x40) {			/* Is it start of LFN sequence? */
 2804              		.loc 1 913 0 is_stmt 1
 2805 0048 0F29     		cmp	r1, #15
 2806 004a 3AD1     		bne	.L292
 2807              	.L291:
 914:.\FatFs/ff.c  **** 					sum = dir[LDIR_Chksum];
 2808              		.loc 1 914 0
 2809 004c 13F0400F 		tst	r3, #64
 2810 0050 06D0     		beq	.L293
 915:.\FatFs/ff.c  **** 					c &= 0xBF; ord = c;
 2811              		.loc 1 915 0
 2812 0052 90F80DA0 		ldrb	r10, [r0, #13]	@ zero_extendqisi2
 2813              	.LVL426:
 916:.\FatFs/ff.c  **** 					dj->lfn_idx = dj->index;
 2814              		.loc 1 916 0
 2815 0056 03F0BF03 		and	r3, r3, #191
 2816              	.LVL427:
 917:.\FatFs/ff.c  **** 				}
 2817              		.loc 1 917 0
 2818 005a E288     		ldrh	r2, [r4, #6]
 2819              	.LVL428:
 2820 005c 2284     		strh	r2, [r4, #32]	@ movhi
 2821              	.LVL429:
 2822 005e 03E0     		b	.L294
 2823              	.LVL430:
 2824              	.L293:
 920:.\FatFs/ff.c  **** 			} else {					/* An SFN entry is found */
 2825              		.loc 1 920 0
 2826 0060 9D42     		cmp	r5, r3
 2827 0062 18BF     		it	ne
 2828 0064 3D46     		movne	r5, r7
 2829              	.LVL431:
 2830 0066 3CD1     		bne	.L289
 2831              	.LVL432:
 2832              	.L294:
 920:.\FatFs/ff.c  **** 			} else {					/* An SFN entry is found */
 2833              		.loc 1 920 0 is_stmt 0 discriminator 1
 2834 0068 467B     		ldrb	r6, [r0, #13]	@ zero_extendqisi2
 2835 006a 5645     		cmp	r6, r10
 2836 006c 38D1     		bne	.L310
 920:.\FatFs/ff.c  **** 			} else {					/* An SFN entry is found */
 2837              		.loc 1 920 0 discriminator 3
 2838 006e D4F81CC0 		ldr	ip, [r4, #28]
 2839              	.LVL433:
 2840              	.LBB32:
 2841              	.LBB33:
 704:.\FatFs/ff.c  **** 
 2842              		.loc 1 704 0 is_stmt 1 discriminator 3
 2843 0072 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 2844 0074 02F03F02 		and	r2, r2, #63
 2845 0078 013A     		subs	r2, r2, #1
 2846 007a 02EB4201 		add	r1, r2, r2, lsl #1
 2847 007e 02EB8101 		add	r1, r2, r1, lsl #2
 2848              	.LVL434:
 2849 0082 4A46     		mov	r2, r9
 706:.\FatFs/ff.c  **** 	do {
 2850              		.loc 1 706 0 discriminator 3
 2851 0084 4FF0010E 		mov	lr, #1
 713:.\FatFs/ff.c  **** 		}
 2852              		.loc 1 713 0 discriminator 3
 2853 0088 4FF6FF7A 		movw	r10, #65535
 2854              	.LVL435:
 2855              	.L298:
 708:.\FatFs/ff.c  **** 		if (wc) {	/* Last char has not been processed */
 2856              		.loc 1 708 0
 2857 008c 12F8015B 		ldrb	r5, [r2], #1	@ zero_extendqisi2
 2858              	.LVL436:
 2859 0090 455B     		ldrh	r5, [r0, r5]
 2860              	.LVL437:
 709:.\FatFs/ff.c  **** 			if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 2861              		.loc 1 709 0
 2862 0092 BEF1000F 		cmp	lr, #0
 2863 0096 06D0     		beq	.L295
 2864              	.LVL438:
 710:.\FatFs/ff.c  **** 			lfnbuf[i++] = wc = uc;				/* Store it */
 2865              		.loc 1 710 0
 2866 0098 FE29     		cmp	r1, #254
 2867 009a 30DC     		bgt	.L296
 2868              	.LVL439:
 711:.\FatFs/ff.c  **** 		} else {
 2869              		.loc 1 711 0
 2870 009c 2CF81150 		strh	r5, [ip, r1, lsl #1]	@ movhi
 2871 00a0 AE46     		mov	lr, r5
 2872 00a2 0131     		adds	r1, r1, #1
 2873              	.LVL440:
 2874 00a4 01E0     		b	.L297
 2875              	.LVL441:
 2876              	.L295:
 713:.\FatFs/ff.c  **** 		}
 2877              		.loc 1 713 0
 2878 00a6 5545     		cmp	r5, r10
 2879 00a8 29D1     		bne	.L296
 2880              	.LVL442:
 2881              	.L297:
 715:.\FatFs/ff.c  **** 
 2882              		.loc 1 715 0
 2883 00aa 4245     		cmp	r2, r8
 2884 00ac EED1     		bne	.L298
 717:.\FatFs/ff.c  **** 		if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 2885              		.loc 1 717 0
 2886 00ae 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 2887              	.LVL443:
 2888 00b0 12F0400F 		tst	r2, #64
 2889 00b4 26D0     		beq	.L299
 718:.\FatFs/ff.c  **** 		lfnbuf[i] = 0;
 2890              		.loc 1 718 0
 2891 00b6 FE29     		cmp	r1, #254
 2892 00b8 21DC     		bgt	.L296
 719:.\FatFs/ff.c  **** 	}
 2893              		.loc 1 719 0
 2894 00ba 0022     		movs	r2, #0
 2895 00bc 2CF81120 		strh	r2, [ip, r1, lsl #1]	@ movhi
 2896 00c0 20E0     		b	.L299
 2897              	.LVL444:
 2898              	.L292:
 2899              	.LBE33:
 2900              	.LBE32:
 922:.\FatFs/ff.c  **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
 2901              		.loc 1 922 0
 2902 00c2 1DB9     		cbnz	r5, .L300
 922:.\FatFs/ff.c  **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
 2903              		.loc 1 922 0 is_stmt 0 discriminator 1
 2904 00c4 FFF7FEFF 		bl	sum_sfn
 2905              	.LVL445:
 2906 00c8 5045     		cmp	r0, r10
 2907 00ca 23D0     		beq	.L312
 2908              	.L300:
 923:.\FatFs/ff.c  **** 				break;
 2909              		.loc 1 923 0 is_stmt 1
 2910 00cc 4FF6FF73 		movw	r3, #65535
 2911 00d0 2384     		strh	r3, [r4, #32]	@ movhi
 2912 00d2 1FE0     		b	.L312
 2913              	.LVL446:
 2914              	.L306:
 911:.\FatFs/ff.c  **** 		} else {
 2915              		.loc 1 911 0
 2916 00d4 3D46     		mov	r5, r7
 2917              	.LVL447:
 2918 00d6 04E0     		b	.L289
 2919              	.LVL448:
 2920              	.L307:
 2921 00d8 3D46     		mov	r5, r7
 2922              	.LVL449:
 2923 00da 02E0     		b	.L289
 2924              	.LVL450:
 2925              	.L308:
 2926 00dc 3D46     		mov	r5, r7
 2927              	.LVL451:
 2928 00de 00E0     		b	.L289
 2929              	.LVL452:
 2930              	.L310:
 920:.\FatFs/ff.c  **** 			} else {					/* An SFN entry is found */
 2931              		.loc 1 920 0
 2932 00e0 3D46     		mov	r5, r7
 2933              	.LVL453:
 2934              	.L289:
 931:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 2935              		.loc 1 931 0
 2936 00e2 2046     		mov	r0, r4
 2937              	.LVL454:
 2938 00e4 0021     		movs	r1, #0
 2939 00e6 FFF7FEFF 		bl	dir_next
 2940              	.LVL455:
 932:.\FatFs/ff.c  **** 	}
 2941              		.loc 1 932 0
 2942 00ea 0346     		mov	r3, r0
 2943 00ec 80B9     		cbnz	r0, .L311
 2944              	.LVL456:
 2945              	.L287:
 902:.\FatFs/ff.c  **** 		res = move_window(dj->fs, dj->sect);
 2946              		.loc 1 902 0
 2947 00ee 2169     		ldr	r1, [r4, #16]
 2948 00f0 0029     		cmp	r1, #0
 2949 00f2 92D1     		bne	.L302
 2950 00f4 1E46     		mov	r6, r3
 935:.\FatFs/ff.c  **** 
 2951              		.loc 1 935 0
 2952 00f6 6BB1     		cbz	r3, .L312
 2953              	.L304:
 2954              	.LVL457:
 935:.\FatFs/ff.c  **** 
 2955              		.loc 1 935 0 is_stmt 0 discriminator 1
 2956 00f8 0023     		movs	r3, #0
 2957 00fa 2361     		str	r3, [r4, #16]
 2958 00fc 0AE0     		b	.L312
 2959              	.LVL458:
 2960              	.L296:
 920:.\FatFs/ff.c  **** 			} else {					/* An SFN entry is found */
 2961              		.loc 1 920 0 is_stmt 1
 2962 00fe B246     		mov	r10, r6
 2963 0100 3D46     		mov	r5, r7
 2964              	.LVL459:
 2965 0102 EEE7     		b	.L289
 2966              	.LVL460:
 2967              	.L299:
 2968 0104 013B     		subs	r3, r3, #1
 2969              	.LVL461:
 2970 0106 DDB2     		uxtb	r5, r3
 2971              	.LVL462:
 2972 0108 B246     		mov	r10, r6
 2973 010a EAE7     		b	.L289
 2974              	.LVL463:
 2975              	.L305:
 907:.\FatFs/ff.c  **** #if _USE_LFN	/* LFN configuration */
 2976              		.loc 1 907 0
 2977 010c 0426     		movs	r6, #4
 2978 010e F3E7     		b	.L304
 2979              	.LVL464:
 2980              	.L311:
 931:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 2981              		.loc 1 931 0
 2982 0110 0646     		mov	r6, r0
 2983 0112 F1E7     		b	.L304
 2984              	.LVL465:
 2985              	.L312:
 938:.\FatFs/ff.c  **** #endif
 2986              		.loc 1 938 0
 2987 0114 3046     		mov	r0, r6
 2988 0116 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2989              	.LVL466:
 2990              	.L316:
 2991 011a 00BF     		.align	2
 2992              	.L315:
 2993 011c 00000000 		.word	.LANCHOR0
 2994              		.cfi_endproc
 2995              	.LFE48:
 2997              		.section	.text.dir_remove,"ax",%progbits
 2998              		.align	2
 2999              		.thumb
 3000              		.thumb_func
 3002              	dir_remove:
 3003              	.LFB50:
1055:.\FatFs/ff.c  **** 	FRESULT res;
 3004              		.loc 1 1055 0
 3005              		.cfi_startproc
 3006              		@ args = 0, pretend = 0, frame = 0
 3007              		@ frame_needed = 0, uses_anonymous_args = 0
 3008              	.LVL467:
 3009 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3010              	.LCFI22:
 3011              		.cfi_def_cfa_offset 24
 3012              		.cfi_offset 4, -24
 3013              		.cfi_offset 5, -20
 3014              		.cfi_offset 6, -16
 3015              		.cfi_offset 7, -12
 3016              		.cfi_offset 8, -8
 3017              		.cfi_offset 14, -4
 3018 0004 0446     		mov	r4, r0
1060:.\FatFs/ff.c  **** 	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of t
 3019              		.loc 1 1060 0
 3020 0006 C588     		ldrh	r5, [r0, #6]
 3021              	.LVL468:
1061:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 3022              		.loc 1 1061 0
 3023 0008 018C     		ldrh	r1, [r0, #32]
 3024 000a 4FF6FF73 		movw	r3, #65535
 3025 000e 9942     		cmp	r1, r3
 3026 0010 08BF     		it	eq
 3027 0012 2946     		moveq	r1, r5
 3028 0014 FFF7FEFF 		bl	dir_seek
 3029              	.LVL469:
1062:.\FatFs/ff.c  **** 		do {
 3030              		.loc 1 1062 0
 3031 0018 0346     		mov	r3, r0
 3032 001a D0B9     		cbnz	r0, .L319
1066:.\FatFs/ff.c  **** 			dj->fs->wflag = 1;
 3033              		.loc 1 1066 0
 3034 001c E527     		movs	r7, #229
1067:.\FatFs/ff.c  **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 3035              		.loc 1 1067 0
 3036 001e 0126     		movs	r6, #1
1069:.\FatFs/ff.c  **** 		} while (res == FR_OK);
 3037              		.loc 1 1069 0
 3038 0020 4FF00008 		mov	r8, #0
 3039              	.L322:
1064:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 3040              		.loc 1 1064 0
 3041 0024 2068     		ldr	r0, [r4]
 3042              	.LVL470:
 3043 0026 2169     		ldr	r1, [r4, #16]
 3044 0028 FFF7FEFF 		bl	move_window
 3045              	.LVL471:
1065:.\FatFs/ff.c  **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
 3046              		.loc 1 1065 0
 3047 002c 0346     		mov	r3, r0
 3048 002e 68B9     		cbnz	r0, .L320
1066:.\FatFs/ff.c  **** 			dj->fs->wflag = 1;
 3049              		.loc 1 1066 0
 3050 0030 6269     		ldr	r2, [r4, #20]
 3051 0032 1770     		strb	r7, [r2]
1067:.\FatFs/ff.c  **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 3052              		.loc 1 1067 0
 3053 0034 2268     		ldr	r2, [r4]
 3054 0036 1671     		strb	r6, [r2, #4]
1068:.\FatFs/ff.c  **** 			res = dir_next(dj, FALSE);	/* Next entry */
 3055              		.loc 1 1068 0
 3056 0038 E288     		ldrh	r2, [r4, #6]
 3057 003a AA42     		cmp	r2, r5
 3058 003c 09D2     		bcs	.L319
1069:.\FatFs/ff.c  **** 		} while (res == FR_OK);
 3059              		.loc 1 1069 0
 3060 003e 2046     		mov	r0, r4
 3061              	.LVL472:
 3062 0040 4146     		mov	r1, r8
 3063 0042 FFF7FEFF 		bl	dir_next
 3064              	.LVL473:
1070:.\FatFs/ff.c  **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 3065              		.loc 1 1070 0
 3066 0046 0346     		mov	r3, r0
 3067 0048 0028     		cmp	r0, #0
 3068 004a EBD0     		beq	.L322
 3069              	.L320:
 3070              	.LVL474:
1071:.\FatFs/ff.c  **** 	}
 3071              		.loc 1 1071 0
 3072 004c 042B     		cmp	r3, #4
 3073 004e 08BF     		it	eq
 3074 0050 0223     		moveq	r3, #2
 3075              	.LVL475:
 3076              	.L319:
1086:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
 3077              		.loc 1 1086 0
 3078 0052 1846     		mov	r0, r3
 3079 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3080              		.cfi_endproc
 3081              	.LFE50:
 3083              		.section	.text.gen_numname,"ax",%progbits
 3084              		.align	2
 3085              		.global	gen_numname
 3086              		.thumb
 3087              		.thumb_func
 3089              	gen_numname:
 3090              	.LFB45:
 770:.\FatFs/ff.c  **** 	char ns[8];
 3091              		.loc 1 770 0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 8
 3094              		@ frame_needed = 0, uses_anonymous_args = 0
 3095              	.LVL476:
 3096 0000 70B5     		push	{r4, r5, r6, lr}
 3097              	.LCFI23:
 3098              		.cfi_def_cfa_offset 16
 3099              		.cfi_offset 4, -16
 3100              		.cfi_offset 5, -12
 3101              		.cfi_offset 6, -8
 3102              		.cfi_offset 14, -4
 3103 0002 82B0     		sub	sp, sp, #8
 3104              	.LCFI24:
 3105              		.cfi_def_cfa_offset 24
 3106 0004 0546     		mov	r5, r0
 3107 0006 1646     		mov	r6, r2
 3108 0008 1C46     		mov	r4, r3
 775:.\FatFs/ff.c  **** 
 3109              		.loc 1 775 0
 3110 000a 0B22     		movs	r2, #11
 3111              	.LVL477:
 3112 000c FFF7FEFF 		bl	mem_cpy
 3113              	.LVL478:
 777:.\FatFs/ff.c  **** 		do num = (num >> 1) + (num << 15) + (WORD)*lfn++; while (*lfn);
 3114              		.loc 1 777 0
 3115 0010 052C     		cmp	r4, #5
 3116 0012 09D9     		bls	.L326
 3117              	.LVL479:
 3118              	.L337:
 778:.\FatFs/ff.c  **** 	}
 3119              		.loc 1 778 0 discriminator 1
 3120 0014 E303     		lsls	r3, r4, #15
 3121 0016 43EA5404 		orr	r4, r3, r4, lsr #1
 3122              	.LVL480:
 3123 001a 36F8023B 		ldrh	r3, [r6], #2
 3124              	.LVL481:
 3125 001e 1C44     		add	r4, r4, r3
 3126 0020 A4B2     		uxth	r4, r4
 3127              	.LVL482:
 3128 0022 3388     		ldrh	r3, [r6]
 3129 0024 002B     		cmp	r3, #0
 3130 0026 F5D1     		bne	.L337
 3131              	.LVL483:
 3132              	.L326:
 3133 0028 02A8     		add	r0, sp, #8
 770:.\FatFs/ff.c  **** 	char ns[8];
 3134              		.loc 1 770 0 discriminator 1
 3135 002a 0722     		movs	r2, #7
 784:.\FatFs/ff.c  **** 		num /= 10;
 3136              		.loc 1 784 0 discriminator 1
 3137 002c 1D4E     		ldr	r6, .L344
 3138              	.L328:
 3139              	.LVL484:
 3140 002e 013A     		subs	r2, r2, #1
 3141              	.LVL485:
 3142 0030 A6FB0413 		umull	r1, r3, r6, r4
 3143 0034 DB08     		lsrs	r3, r3, #3
 3144 0036 03EB8301 		add	r1, r3, r3, lsl #2
 3145 003a A4EB4104 		sub	r4, r4, r1, lsl #1
 3146              	.LVL486:
 3147 003e 3034     		adds	r4, r4, #48
 3148 0040 00F8014D 		strb	r4, [r0, #-1]!
 785:.\FatFs/ff.c  **** 	} while (num);
 3149              		.loc 1 785 0 discriminator 1
 3150 0044 9CB2     		uxth	r4, r3
 3151              	.LVL487:
 786:.\FatFs/ff.c  **** 	ns[i] = '~';
 3152              		.loc 1 786 0 discriminator 1
 3153 0046 002C     		cmp	r4, #0
 3154 0048 F1D1     		bne	.L328
 784:.\FatFs/ff.c  **** 		num /= 10;
 3155              		.loc 1 784 0
 3156 004a 1446     		mov	r4, r2
 3157              	.LVL488:
 787:.\FatFs/ff.c  **** 
 3158              		.loc 1 787 0
 3159 004c 7E21     		movs	r1, #126
 3160 004e 02AB     		add	r3, sp, #8
 3161              	.LVL489:
 3162 0050 1344     		add	r3, r3, r2
 3163 0052 03F8081C 		strb	r1, [r3, #-8]
 3164              	.LVL490:
 790:.\FatFs/ff.c  **** 		if (IsDBCS1(dst[j])) {
 3165              		.loc 1 790 0
 3166 0056 002A     		cmp	r2, #0
 3167 0058 0CDD     		ble	.L333
 3168 005a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 3169 005c 202B     		cmp	r3, #32
 3170 005e 0BD0     		beq	.L334
 3171 0060 2946     		mov	r1, r5
 3172 0062 0023     		movs	r3, #0
 3173              	.LVL491:
 3174              	.L330:
 790:.\FatFs/ff.c  **** 		if (IsDBCS1(dst[j])) {
 3175              		.loc 1 790 0 is_stmt 0 discriminator 2
 3176 0064 0133     		adds	r3, r3, #1
 3177              	.LVL492:
 3178 0066 A342     		cmp	r3, r4
 3179 0068 08D0     		beq	.L335
 790:.\FatFs/ff.c  **** 		if (IsDBCS1(dst[j])) {
 3180              		.loc 1 790 0 discriminator 3
 3181 006a 11F8010F 		ldrb	r0, [r1, #1]!	@ zero_extendqisi2
 3182 006e 2028     		cmp	r0, #32
 3183 0070 F8D1     		bne	.L330
 3184 0072 04E0     		b	.L329
 3185              	.LVL493:
 3186              	.L333:
 790:.\FatFs/ff.c  **** 		if (IsDBCS1(dst[j])) {
 3187              		.loc 1 790 0
 3188 0074 0023     		movs	r3, #0
 3189 0076 02E0     		b	.L329
 3190              	.L334:
 3191 0078 0023     		movs	r3, #0
 3192 007a 00E0     		b	.L329
 3193              	.LVL494:
 3194              	.L335:
 3195 007c 1346     		mov	r3, r2
 3196              	.LVL495:
 3197              	.L329:
 3198 007e 1D44     		add	r5, r5, r3
 3199              	.LVL496:
 797:.\FatFs/ff.c  **** 	} while (j < 8);
 3200              		.loc 1 797 0 is_stmt 1
 3201 0080 2020     		movs	r0, #32
 3202              	.L332:
 3203              	.LVL497:
 3204 0082 0133     		adds	r3, r3, #1
 3205              	.LVL498:
 3206 0084 072A     		cmp	r2, #7
 3207 0086 05DC     		bgt	.L336
 3208              	.LVL499:
 797:.\FatFs/ff.c  **** 	} while (j < 8);
 3209              		.loc 1 797 0 is_stmt 0 discriminator 1
 3210 0088 02A9     		add	r1, sp, #8
 3211 008a 1144     		add	r1, r1, r2
 3212 008c 11F8081C 		ldrb	r1, [r1, #-8]	@ zero_extendqisi2
 3213 0090 0132     		adds	r2, r2, #1
 3214              	.LVL500:
 3215 0092 00E0     		b	.L331
 3216              	.L336:
 797:.\FatFs/ff.c  **** 	} while (j < 8);
 3217              		.loc 1 797 0
 3218 0094 0146     		mov	r1, r0
 3219              	.L331:
 797:.\FatFs/ff.c  **** 	} while (j < 8);
 3220              		.loc 1 797 0 discriminator 4
 3221 0096 05F8011B 		strb	r1, [r5], #1
 798:.\FatFs/ff.c  **** }
 3222              		.loc 1 798 0 is_stmt 1 discriminator 4
 3223 009a 072B     		cmp	r3, #7
 3224 009c F1DD     		ble	.L332
 799:.\FatFs/ff.c  **** #endif
 3225              		.loc 1 799 0
 3226 009e 02B0     		add	sp, sp, #8
 3227              	.LCFI25:
 3228              		.cfi_def_cfa_offset 16
 3229              		@ sp needed
 3230 00a0 70BD     		pop	{r4, r5, r6, pc}
 3231              	.L345:
 3232 00a2 00BF     		.align	2
 3233              	.L344:
 3234 00a4 CDCCCCCC 		.word	-858993459
 3235              		.cfi_endproc
 3236              	.LFE45:
 3238              		.section	.text.dir_register,"ax",%progbits
 3239              		.align	2
 3240              		.thumb
 3241              		.thumb_func
 3243              	dir_register:
 3244              	.LFB49:
 951:.\FatFs/ff.c  **** 	FRESULT res;
 3245              		.loc 1 951 0
 3246              		.cfi_startproc
 3247              		@ args = 0, pretend = 0, frame = 16
 3248              		@ frame_needed = 0, uses_anonymous_args = 0
 3249              	.LVL501:
 3250 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3251              	.LCFI26:
 3252              		.cfi_def_cfa_offset 36
 3253              		.cfi_offset 4, -36
 3254              		.cfi_offset 5, -32
 3255              		.cfi_offset 6, -28
 3256              		.cfi_offset 7, -24
 3257              		.cfi_offset 8, -20
 3258              		.cfi_offset 9, -16
 3259              		.cfi_offset 10, -12
 3260              		.cfi_offset 11, -8
 3261              		.cfi_offset 14, -4
 3262 0004 85B0     		sub	sp, sp, #20
 3263              	.LCFI27:
 3264              		.cfi_def_cfa_offset 56
 3265 0006 0546     		mov	r5, r0
 960:.\FatFs/ff.c  **** 	mem_cpy(sn, fn, 12);
 3266              		.loc 1 960 0
 3267 0008 8769     		ldr	r7, [r0, #24]
 3268              	.LVL502:
 3269 000a C669     		ldr	r6, [r0, #28]
 3270              	.LVL503:
 961:.\FatFs/ff.c  **** 
 3271              		.loc 1 961 0
 3272 000c 01A8     		add	r0, sp, #4
 3273              	.LVL504:
 3274 000e 3946     		mov	r1, r7
 3275 0010 0C22     		movs	r2, #12
 3276 0012 FFF7FEFF 		bl	mem_cpy
 3277              	.LVL505:
 965:.\FatFs/ff.c  **** 		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
 3278              		.loc 1 965 0
 3279 0016 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 3280 001a 13F0010F 		tst	r3, #1
 3281 001e 1DD0     		beq	.L347
 966:.\FatFs/ff.c  **** 		for (n = 1; n < 100; n++) {
 3282              		.loc 1 966 0
 3283 0020 0023     		movs	r3, #0
 3284 0022 FB72     		strb	r3, [r7, #11]
 3285 0024 EB61     		str	r3, [r5, #28]
 3286              	.LVL506:
 967:.\FatFs/ff.c  **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 3287              		.loc 1 967 0
 3288 0026 0124     		movs	r4, #1
 3289              	.LVL507:
 3290              	.L349:
 968:.\FatFs/ff.c  **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 3291              		.loc 1 968 0
 3292 0028 3846     		mov	r0, r7
 3293 002a 01A9     		add	r1, sp, #4
 3294 002c 3246     		mov	r2, r6
 3295 002e 2346     		mov	r3, r4
 3296 0030 FFF7FEFF 		bl	gen_numname
 3297              	.LVL508:
 969:.\FatFs/ff.c  **** 			if (res != FR_OK) break;
 3298              		.loc 1 969 0
 3299 0034 2846     		mov	r0, r5
 3300 0036 FFF7FEFF 		bl	dir_find
 3301              	.LVL509:
 970:.\FatFs/ff.c  **** 		}
 3302              		.loc 1 970 0
 3303 003a 28B9     		cbnz	r0, .L348
 967:.\FatFs/ff.c  **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 3304              		.loc 1 967 0 discriminator 2
 3305 003c 0134     		adds	r4, r4, #1
 3306              	.LVL510:
 3307 003e A4B2     		uxth	r4, r4
 3308              	.LVL511:
 3309 0040 642C     		cmp	r4, #100
 3310 0042 F1D1     		bne	.L349
 972:.\FatFs/ff.c  **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 3311              		.loc 1 972 0
 3312 0044 0720     		movs	r0, #7
 3313 0046 D4E0     		b	.L382
 3314              	.LVL512:
 3315              	.L348:
 3316 0048 642C     		cmp	r4, #100
 3317 004a 00F0BB80 		beq	.L370
 973:.\FatFs/ff.c  **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
 3318              		.loc 1 973 0
 3319 004e 0428     		cmp	r0, #4
 3320 0050 40F0BA80 		bne	.L371
 974:.\FatFs/ff.c  **** 	}
 3321              		.loc 1 974 0
 3322 0054 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 3323 0058 FB72     		strb	r3, [r7, #11]
 3324 005a EE61     		str	r6, [r5, #28]
 3325              	.LVL513:
 3326              	.L347:
 977:.\FatFs/ff.c  **** 		for (ne = 0; lfn[ne]; ne++) ;
 3327              		.loc 1 977 0
 3328 005c 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 3329 0060 13F0020F 		tst	r3, #2
 3330 0064 13D0     		beq	.L372
 3331              	.LVL514:
 978:.\FatFs/ff.c  **** 		ne = (ne + 25) / 13;
 3332              		.loc 1 978 0 discriminator 1
 3333 0066 3388     		ldrh	r3, [r6]
 3334 0068 3BB1     		cbz	r3, .L373
 978:.\FatFs/ff.c  **** 		ne = (ne + 25) / 13;
 3335              		.loc 1 978 0 is_stmt 0
 3336 006a 0023     		movs	r3, #0
 3337              	.LVL515:
 3338              	.L353:
 978:.\FatFs/ff.c  **** 		ne = (ne + 25) / 13;
 3339              		.loc 1 978 0 discriminator 3
 3340 006c 0133     		adds	r3, r3, #1
 3341              	.LVL516:
 3342 006e 9BB2     		uxth	r3, r3
 3343              	.LVL517:
 3344 0070 36F81320 		ldrh	r2, [r6, r3, lsl #1]
 3345 0074 002A     		cmp	r2, #0
 3346 0076 F9D1     		bne	.L353
 3347 0078 00E0     		b	.L352
 3348              	.LVL518:
 3349              	.L373:
 978:.\FatFs/ff.c  **** 		ne = (ne + 25) / 13;
 3350              		.loc 1 978 0
 3351 007a 0023     		movs	r3, #0
 3352              	.LVL519:
 3353              	.L352:
 979:.\FatFs/ff.c  **** 	} else {						/* Otherwise reserve only an SFN entry. */
 3354              		.loc 1 979 0 is_stmt 1
 3355 007c 1933     		adds	r3, r3, #25
 3356 007e 5E4E     		ldr	r6, .L384
 3357              	.LVL520:
 3358 0080 86FB0326 		smull	r2, r6, r6, r3
 3359 0084 DB17     		asrs	r3, r3, #31
 3360 0086 C3EBA606 		rsb	r6, r3, r6, asr #2
 3361 008a B6B2     		uxth	r6, r6
 3362              	.LVL521:
 3363 008c 00E0     		b	.L351
 3364              	.LVL522:
 3365              	.L372:
 981:.\FatFs/ff.c  **** 	}
 3366              		.loc 1 981 0
 3367 008e 0126     		movs	r6, #1
 3368              	.LVL523:
 3369              	.L351:
 985:.\FatFs/ff.c  **** 	if (res != FR_OK) return res;
 3370              		.loc 1 985 0
 3371 0090 2846     		mov	r0, r5
 3372 0092 0021     		movs	r1, #0
 3373 0094 FFF7FEFF 		bl	dir_seek
 3374              	.LVL524:
 986:.\FatFs/ff.c  **** 	n = is = 0;
 3375              		.loc 1 986 0
 3376 0098 0028     		cmp	r0, #0
 3377 009a 40F09680 		bne	.L374
 3378 009e 4FF00008 		mov	r8, #0
 3379 00a2 4446     		mov	r4, r8
 996:.\FatFs/ff.c  **** 		}
 3380              		.loc 1 996 0
 3381 00a4 C146     		mov	r9, r8
 998:.\FatFs/ff.c  **** 	} while (res == FR_OK);
 3382              		.loc 1 998 0
 3383 00a6 0127     		movs	r7, #1
 3384              	.LVL525:
 3385              	.L359:
 989:.\FatFs/ff.c  **** 		if (res != FR_OK) break;
 3386              		.loc 1 989 0
 3387 00a8 2868     		ldr	r0, [r5]
 3388              	.LVL526:
 3389 00aa 2969     		ldr	r1, [r5, #16]
 3390 00ac FFF7FEFF 		bl	move_window
 3391              	.LVL527:
 990:.\FatFs/ff.c  **** 		c = *dj->dir;				/* Check the entry status */
 3392              		.loc 1 990 0
 3393 00b0 0346     		mov	r3, r0
 3394 00b2 0028     		cmp	r0, #0
 3395 00b4 40F09C80 		bne	.L354
 991:.\FatFs/ff.c  **** 		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
 3396              		.loc 1 991 0
 3397 00b8 6B69     		ldr	r3, [r5, #20]
 3398 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3399              	.LVL528:
 992:.\FatFs/ff.c  **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
 3400              		.loc 1 992 0
 3401 00bc E52B     		cmp	r3, #229
 3402 00be 00D0     		beq	.L355
 992:.\FatFs/ff.c  **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
 3403              		.loc 1 992 0 is_stmt 0 discriminator 1
 3404 00c0 3BB9     		cbnz	r3, .L375
 3405              	.L355:
 993:.\FatFs/ff.c  **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
 3406              		.loc 1 993 0 is_stmt 1
 3407 00c2 0CB9     		cbnz	r4, .L357
 993:.\FatFs/ff.c  **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
 3408              		.loc 1 993 0 is_stmt 0 discriminator 1
 3409 00c4 B5F80680 		ldrh	r8, [r5, #6]
 3410              	.LVL529:
 3411              	.L357:
 994:.\FatFs/ff.c  **** 		} else {
 3412              		.loc 1 994 0 is_stmt 1
 3413 00c8 0134     		adds	r4, r4, #1
 3414              	.LVL530:
 3415 00ca A4B2     		uxth	r4, r4
 3416              	.LVL531:
 3417 00cc B442     		cmp	r4, r6
 3418 00ce 01D1     		bne	.L356
 3419 00d0 7CE0     		b	.L358
 3420              	.L375:
 996:.\FatFs/ff.c  **** 		}
 3421              		.loc 1 996 0
 3422 00d2 4C46     		mov	r4, r9
 3423              	.LVL532:
 3424              	.L356:
 998:.\FatFs/ff.c  **** 	} while (res == FR_OK);
 3425              		.loc 1 998 0
 3426 00d4 2846     		mov	r0, r5
 3427              	.LVL533:
 3428 00d6 3946     		mov	r1, r7
 3429 00d8 FFF7FEFF 		bl	dir_next
 3430              	.LVL534:
 999:.\FatFs/ff.c  **** 
 3431              		.loc 1 999 0
 3432 00dc 0346     		mov	r3, r0
 3433 00de 0028     		cmp	r0, #0
 3434 00e0 E2D0     		beq	.L359
 3435 00e2 85E0     		b	.L354
 3436              	.LVL535:
 3437              	.L368:
1002:.\FatFs/ff.c  **** 		if (res == FR_OK) {
 3438              		.loc 1 1002 0
 3439 00e4 2846     		mov	r0, r5
 3440 00e6 4146     		mov	r1, r8
 3441 00e8 FFF7FEFF 		bl	dir_seek
 3442              	.LVL536:
1003:.\FatFs/ff.c  **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
 3443              		.loc 1 1003 0
 3444 00ec 0346     		mov	r3, r0
 3445 00ee 0028     		cmp	r0, #0
 3446 00f0 7CD1     		bne	.L360
1004:.\FatFs/ff.c  **** 			ne--;
 3447              		.loc 1 1004 0
 3448 00f2 A869     		ldr	r0, [r5, #24]
 3449              	.LVL537:
 3450 00f4 FFF7FEFF 		bl	sum_sfn
 3451              	.LVL538:
 3452 00f8 8146     		mov	r9, r0
 3453              	.LVL539:
1005:.\FatFs/ff.c  **** 			do {					/* Store LFN entries in bottom first */
 3454              		.loc 1 1005 0
 3455 00fa 741E     		subs	r4, r6, #1
 3456              	.LVL540:
 3457 00fc A4B2     		uxth	r4, r4
 3458              	.LVL541:
 3459              	.LBB36:
 3460              	.LBB37:
 740:.\FatFs/ff.c  **** 	dir[LDIR_Type] = 0;
 3461              		.loc 1 740 0
 3462 00fe 4FF00F08 		mov	r8, #15
 3463              	.LVL542:
 3464 0102 3E4F     		ldr	r7, .L384+4
 3465 0104 07F10D06 		add	r6, r7, #13
 3466              	.L366:
 3467              	.LBE37:
 3468              	.LBE36:
1007:.\FatFs/ff.c  **** 				if (res != FR_OK) break;
 3469              		.loc 1 1007 0
 3470 0108 2868     		ldr	r0, [r5]
 3471 010a 2969     		ldr	r1, [r5, #16]
 3472 010c FFF7FEFF 		bl	move_window
 3473              	.LVL543:
1008:.\FatFs/ff.c  **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 3474              		.loc 1 1008 0
 3475 0110 0346     		mov	r3, r0
 3476 0112 0028     		cmp	r0, #0
 3477 0114 6AD1     		bne	.L360
1009:.\FatFs/ff.c  **** 				dj->fs->wflag = 1;
 3478              		.loc 1 1009 0
 3479 0116 D5F81CA0 		ldr	r10, [r5, #28]
 3480 011a D5F814E0 		ldr	lr, [r5, #20]
 3481 011e 5FFA84FB 		uxtb	fp, r4
 3482              	.LVL544:
 3483              	.LBB40:
 3484              	.LBB38:
 739:.\FatFs/ff.c  **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 3485              		.loc 1 739 0
 3486 0122 8EF80D90 		strb	r9, [lr, #13]
 740:.\FatFs/ff.c  **** 	dir[LDIR_Type] = 0;
 3487              		.loc 1 740 0
 3488 0126 8EF80B80 		strb	r8, [lr, #11]
 741:.\FatFs/ff.c  **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
 3489              		.loc 1 741 0
 3490 012a 0023     		movs	r3, #0
 3491 012c 8EF80C30 		strb	r3, [lr, #12]
 742:.\FatFs/ff.c  **** 
 3492              		.loc 1 742 0
 3493 0130 AEF81A30 		strh	r3, [lr, #26]	@ movhi
 744:.\FatFs/ff.c  **** 	s = wc = 0;
 3494              		.loc 1 744 0
 3495 0134 0BF1FF32 		add	r2, fp, #-1
 3496 0138 02EB4201 		add	r1, r2, r2, lsl #1
 3497 013c 02EB8101 		add	r1, r2, r1, lsl #2
 3498              	.LVL545:
 3499 0140 3A46     		mov	r2, r7
 747:.\FatFs/ff.c  **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 3500              		.loc 1 747 0
 3501 0142 4FF6FF70 		movw	r0, #65535
 3502              	.LVL546:
 3503              	.L363:
 3504 0146 8342     		cmp	r3, r0
 3505 0148 43D0     		beq	.L361
 3506 014a 01F1010C 		add	ip, r1, #1
 3507              	.LVL547:
 3508 014e 3AF81130 		ldrh	r3, [r10, r1, lsl #1]
 3509              	.LVL548:
 748:.\FatFs/ff.c  **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 3510              		.loc 1 748 0
 3511 0152 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3512 0154 2EF80130 		strh	r3, [lr, r1]	@ movhi
 749:.\FatFs/ff.c  **** 	} while (++s < 13);
 3513              		.loc 1 749 0
 3514 0158 13B9     		cbnz	r3, .L376
 747:.\FatFs/ff.c  **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 3515              		.loc 1 747 0
 3516 015a 6146     		mov	r1, ip
 3517              	.LVL549:
 749:.\FatFs/ff.c  **** 	} while (++s < 13);
 3518              		.loc 1 749 0
 3519 015c 0346     		mov	r3, r0
 3520 015e 00E0     		b	.L362
 3521              	.LVL550:
 3522              	.L376:
 747:.\FatFs/ff.c  **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 3523              		.loc 1 747 0
 3524 0160 6146     		mov	r1, ip
 3525              	.LVL551:
 3526              	.L362:
 3527 0162 0132     		adds	r2, r2, #1
 3528              	.LVL552:
 750:.\FatFs/ff.c  **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
 3529              		.loc 1 750 0
 3530 0164 B242     		cmp	r2, r6
 3531 0166 EED1     		bne	.L363
 751:.\FatFs/ff.c  **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 3532              		.loc 1 751 0
 3533 0168 4FF6FF72 		movw	r2, #65535
 3534              	.LVL553:
 3535 016c 9342     		cmp	r3, r2
 3536 016e 02D0     		beq	.L364
 3537 0170 3AF81130 		ldrh	r3, [r10, r1, lsl #1]
 3538 0174 0BB9     		cbnz	r3, .L365
 3539              	.L364:
 3540 0176 4BF0400B 		orr	fp, fp, #64
 3541              	.LVL554:
 3542              	.L365:
 752:.\FatFs/ff.c  **** }
 3543              		.loc 1 752 0
 3544 017a 8EF800B0 		strb	fp, [lr]
 3545              	.LBE38:
 3546              	.LBE40:
1010:.\FatFs/ff.c  **** 				res = dir_next(dj, FALSE);	/* Next entry */
 3547              		.loc 1 1010 0
 3548 017e 2B68     		ldr	r3, [r5]
 3549 0180 0122     		movs	r2, #1
 3550 0182 1A71     		strb	r2, [r3, #4]
1011:.\FatFs/ff.c  **** 			} while (res == FR_OK && --ne);
 3551              		.loc 1 1011 0
 3552 0184 2846     		mov	r0, r5
 3553 0186 0021     		movs	r1, #0
 3554              	.LVL555:
 3555 0188 FFF7FEFF 		bl	dir_next
 3556              	.LVL556:
1012:.\FatFs/ff.c  **** 		}
 3557              		.loc 1 1012 0
 3558 018c 0346     		mov	r3, r0
 3559 018e 68BB     		cbnz	r0, .L360
1012:.\FatFs/ff.c  **** 		}
 3560              		.loc 1 1012 0 is_stmt 0 discriminator 1
 3561 0190 013C     		subs	r4, r4, #1
 3562              	.LVL557:
 3563 0192 A4B2     		uxth	r4, r4
 3564              	.LVL558:
 3565 0194 002C     		cmp	r4, #0
 3566 0196 B7D1     		bne	.L366
 3567 0198 20E0     		b	.L367
 3568              	.LVL559:
 3569              	.L369:
1032:.\FatFs/ff.c  **** 			mem_set(dir, 0, 32);		/* Clean the entry */
 3570              		.loc 1 1032 0 is_stmt 1
 3571 019a 6E69     		ldr	r6, [r5, #20]
 3572              	.LVL560:
1033:.\FatFs/ff.c  **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 3573              		.loc 1 1033 0
 3574 019c 3046     		mov	r0, r6
 3575              	.LVL561:
 3576 019e 0021     		movs	r1, #0
 3577 01a0 2022     		movs	r2, #32
 3578 01a2 FFF7FEFF 		bl	mem_set
 3579              	.LVL562:
1034:.\FatFs/ff.c  **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 3580              		.loc 1 1034 0
 3581 01a6 3046     		mov	r0, r6
 3582 01a8 A969     		ldr	r1, [r5, #24]
 3583 01aa 0B22     		movs	r2, #11
 3584 01ac FFF7FEFF 		bl	mem_cpy
 3585              	.LVL563:
1035:.\FatFs/ff.c  **** 			dj->fs->wflag = 1;
 3586              		.loc 1 1035 0
 3587 01b0 AB69     		ldr	r3, [r5, #24]
 3588 01b2 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3589 01b4 03F01803 		and	r3, r3, #24
 3590 01b8 3373     		strb	r3, [r6, #12]
1036:.\FatFs/ff.c  **** 		}
 3591              		.loc 1 1036 0
 3592 01ba 2B68     		ldr	r3, [r5]
 3593 01bc 0122     		movs	r2, #1
 3594 01be 1A71     		strb	r2, [r3, #4]
1030:.\FatFs/ff.c  **** 		if (res == FR_OK) {
 3595              		.loc 1 1030 0
 3596 01c0 2046     		mov	r0, r4
 3597 01c2 16E0     		b	.L382
 3598              	.LVL564:
 3599              	.L370:
 972:.\FatFs/ff.c  **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 3600              		.loc 1 972 0
 3601 01c4 0720     		movs	r0, #7
 3602              	.LVL565:
 3603 01c6 14E0     		b	.L382
 3604              	.LVL566:
 3605              	.L371:
 3606 01c8 13E0     		b	.L382
 3607              	.LVL567:
 3608              	.L374:
 3609 01ca 12E0     		b	.L382
 3610              	.LVL568:
 3611              	.L358:
1001:.\FatFs/ff.c  **** 		res = dir_seek(dj, is);
 3612              		.loc 1 1001 0
 3613 01cc 012E     		cmp	r6, #1
 3614 01ce 89D8     		bhi	.L368
 3615 01d0 04E0     		b	.L367
 3616              	.LVL569:
 3617              	.L361:
 3618              	.LBB41:
 3619              	.LBB39:
 748:.\FatFs/ff.c  **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 3620              		.loc 1 748 0
 3621 01d2 92F800C0 		ldrb	ip, [r2]	@ zero_extendqisi2
 3622 01d6 2EF80C00 		strh	r0, [lr, ip]	@ movhi
 3623 01da C2E7     		b	.L362
 3624              	.LVL570:
 3625              	.L367:
 3626              	.LBE39:
 3627              	.LBE41:
1030:.\FatFs/ff.c  **** 		if (res == FR_OK) {
 3628              		.loc 1 1030 0
 3629 01dc 2868     		ldr	r0, [r5]
 3630 01de 2969     		ldr	r1, [r5, #16]
 3631 01e0 FFF7FEFF 		bl	move_window
 3632              	.LVL571:
1031:.\FatFs/ff.c  **** 			dir = dj->dir;
 3633              		.loc 1 1031 0
 3634 01e4 0446     		mov	r4, r0
 3635 01e6 0028     		cmp	r0, #0
 3636 01e8 D7D0     		beq	.L369
 3637 01ea 02E0     		b	.L382
 3638              	.L360:
 3639              	.LVL572:
1030:.\FatFs/ff.c  **** 		if (res == FR_OK) {
 3640              		.loc 1 1030 0
 3641 01ec 1846     		mov	r0, r3
 3642 01ee 00E0     		b	.L382
 3643              	.LVL573:
 3644              	.L354:
 986:.\FatFs/ff.c  **** 	n = is = 0;
 3645              		.loc 1 986 0
 3646 01f0 1846     		mov	r0, r3
 3647              	.LVL574:
 3648              	.L382:
1041:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
 3649              		.loc 1 1041 0
 3650 01f2 05B0     		add	sp, sp, #20
 3651              	.LCFI28:
 3652              		.cfi_def_cfa_offset 36
 3653              		@ sp needed
 3654 01f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3655              	.LVL575:
 3656              	.L385:
 3657              		.align	2
 3658              	.L384:
 3659 01f8 4FECC44E 		.word	1321528399
 3660 01fc 00000000 		.word	.LANCHOR0
 3661              		.cfi_endproc
 3662              	.LFE49:
 3664              		.section	.text.chk_mounted,"ax",%progbits
 3665              		.align	2
 3666              		.global	chk_mounted
 3667              		.thumb
 3668              		.thumb_func
 3670              	chk_mounted:
 3671              	.LFB55:
1469:.\FatFs/ff.c  **** 	BYTE fmt, *tbl;
 3672              		.loc 1 1469 0
 3673              		.cfi_startproc
 3674              		@ args = 0, pretend = 0, frame = 0
 3675              		@ frame_needed = 0, uses_anonymous_args = 0
 3676              	.LVL576:
 3677 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3678              	.LCFI29:
 3679              		.cfi_def_cfa_offset 24
 3680              		.cfi_offset 3, -24
 3681              		.cfi_offset 4, -20
 3682              		.cfi_offset 5, -16
 3683              		.cfi_offset 6, -12
 3684              		.cfi_offset 7, -8
 3685              		.cfi_offset 14, -4
1474:.\FatFs/ff.c  **** 	FATFS *fs;
 3686              		.loc 1 1474 0
 3687 0002 0468     		ldr	r4, [r0]
 3688              	.LVL577:
1478:.\FatFs/ff.c  **** 	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 3689              		.loc 1 1478 0
 3690 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3691 0006 303B     		subs	r3, r3, #48
 3692              	.LVL578:
1479:.\FatFs/ff.c  **** 		p += 2; *path = p;			/* Return pointer to the path name */
 3693              		.loc 1 1479 0
 3694 0008 092B     		cmp	r3, #9
 3695 000a 07D8     		bhi	.L387
1479:.\FatFs/ff.c  **** 		p += 2; *path = p;			/* Return pointer to the path name */
 3696              		.loc 1 1479 0 is_stmt 0 discriminator 1
 3697 000c 6578     		ldrb	r5, [r4, #1]	@ zero_extendqisi2
 3698 000e 3A2D     		cmp	r5, #58
 3699 0010 04D1     		bne	.L387
 3700              	.LVL579:
1480:.\FatFs/ff.c  **** 	} else {						/* No drive number is given */
 3701              		.loc 1 1480 0 is_stmt 1
 3702 0012 0234     		adds	r4, r4, #2
 3703              	.LVL580:
 3704 0014 0460     		str	r4, [r0]
1490:.\FatFs/ff.c  **** 		return FR_INVALID_DRIVE;
 3705              		.loc 1 1490 0
 3706 0016 002B     		cmp	r3, #0
 3707 0018 40F09580 		bne	.L398
 3708              	.L387:
 3709              	.LVL581:
1492:.\FatFs/ff.c  **** 	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
 3710              		.loc 1 1492 0
 3711 001c 654B     		ldr	r3, .L416
 3712 001e 1C68     		ldr	r4, [r3]
 3713              	.LVL582:
 3714 0020 0C60     		str	r4, [r1]
 3715              	.LVL583:
1493:.\FatFs/ff.c  **** 
 3716              		.loc 1 1493 0
 3717 0022 002C     		cmp	r4, #0
 3718 0024 00F09180 		beq	.L399
 3719 0028 1546     		mov	r5, r2
1497:.\FatFs/ff.c  **** 		stat = disk_status(fs->drive);
 3720              		.loc 1 1497 0
 3721 002a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3722 002c 83B1     		cbz	r3, .L389
1498:.\FatFs/ff.c  **** 		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed),
 3723              		.loc 1 1498 0
 3724 002e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3725              	.LVL584:
 3726 0030 FFF7FEFF 		bl	disk_status
 3727              	.LVL585:
1499:.\FatFs/ff.c  **** #if !_FS_READONLY
 3728              		.loc 1 1499 0
 3729 0034 10F0010F 		tst	r0, #1
 3730 0038 0AD1     		bne	.L389
1501:.\FatFs/ff.c  **** 				return FR_WRITE_PROTECTED;
 3731              		.loc 1 1501 0
 3732 003a 002D     		cmp	r5, #0
 3733 003c 00F08780 		beq	.L400
1501:.\FatFs/ff.c  **** 				return FR_WRITE_PROTECTED;
 3734              		.loc 1 1501 0 is_stmt 0 discriminator 1
 3735 0040 00F00400 		and	r0, r0, #4
 3736              	.LVL586:
 3737 0044 C0B2     		uxtb	r0, r0
1502:.\FatFs/ff.c  **** #endif
 3738              		.loc 1 1502 0 is_stmt 1 discriminator 1
 3739 0046 0028     		cmp	r0, #0
 3740 0048 0CBF     		ite	eq
 3741 004a 0020     		moveq	r0, #0
 3742 004c 0A20     		movne	r0, #10
 3743 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3744              	.LVL587:
 3745              	.L389:
1510:.\FatFs/ff.c  **** 	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 3746              		.loc 1 1510 0
 3747 0050 0020     		movs	r0, #0
 3748 0052 2070     		strb	r0, [r4]
1511:.\FatFs/ff.c  **** 	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 3749              		.loc 1 1511 0
 3750 0054 6070     		strb	r0, [r4, #1]
1512:.\FatFs/ff.c  **** 	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 3751              		.loc 1 1512 0
 3752 0056 FFF7FEFF 		bl	disk_initialize
 3753              	.LVL588:
1513:.\FatFs/ff.c  **** 		return FR_NOT_READY;
 3754              		.loc 1 1513 0
 3755 005a 10F0010F 		tst	r0, #1
 3756 005e 78D1     		bne	.L402
1520:.\FatFs/ff.c  **** 		return FR_WRITE_PROTECTED;
 3757              		.loc 1 1520 0
 3758 0060 15B1     		cbz	r5, .L390
1520:.\FatFs/ff.c  **** 		return FR_WRITE_PROTECTED;
 3759              		.loc 1 1520 0 is_stmt 0 discriminator 1
 3760 0062 10F0040F 		tst	r0, #4
 3761 0066 76D1     		bne	.L403
 3762              	.L390:
 3763              	.LVL589:
1524:.\FatFs/ff.c  **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be partitioned */
 3764              		.loc 1 1524 0 is_stmt 1
 3765 0068 2046     		mov	r0, r4
 3766              	.LVL590:
 3767 006a 0021     		movs	r1, #0
 3768 006c FFF7FEFF 		bl	check_fs
 3769              	.LVL591:
1525:.\FatFs/ff.c  **** 		/* Check a partition listed in top of the partition table */
 3770              		.loc 1 1525 0
 3771 0070 0128     		cmp	r0, #1
 3772 0072 0AD1     		bne	.L404
 3773              	.LVL592:
1528:.\FatFs/ff.c  **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 3774              		.loc 1 1528 0
 3775 0074 94F8F231 		ldrb	r3, [r4, #498]	@ zero_extendqisi2
 3776 0078 002B     		cmp	r3, #0
 3777 007a 6ED0     		beq	.L405
1529:.\FatFs/ff.c  **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
 3778              		.loc 1 1529 0
 3779 007c D4F8F651 		ldr	r5, [r4, #502]
 3780              	.LVL593:
1530:.\FatFs/ff.c  **** 		}
 3781              		.loc 1 1530 0
 3782 0080 2046     		mov	r0, r4
 3783              	.LVL594:
 3784 0082 2946     		mov	r1, r5
 3785 0084 FFF7FEFF 		bl	check_fs
 3786              	.LVL595:
 3787 0088 00E0     		b	.L391
 3788              	.LVL596:
 3789              	.L404:
1524:.\FatFs/ff.c  **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be partitioned */
 3790              		.loc 1 1524 0
 3791 008a 0025     		movs	r5, #0
 3792              	.LVL597:
 3793              	.L391:
1533:.\FatFs/ff.c  **** 	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT partition is found */
 3794              		.loc 1 1533 0
 3795 008c 0328     		cmp	r0, #3
 3796 008e 66D0     		beq	.L406
1534:.\FatFs/ff.c  **** 		return FR_NO_FILESYSTEM;
 3797              		.loc 1 1534 0
 3798 0090 0028     		cmp	r0, #0
 3799 0092 66D1     		bne	.L407
1534:.\FatFs/ff.c  **** 		return FR_NO_FILESYSTEM;
 3800              		.loc 1 1534 0 is_stmt 0 discriminator 1
 3801 0094 B4F83B30 		ldrh	r3, [r4, #59]
 3802 0098 B3F5007F 		cmp	r3, #512
 3803 009c 63D1     		bne	.L408
1538:.\FatFs/ff.c  **** 	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 3804              		.loc 1 1538 0 is_stmt 1
 3805 009e B4F84630 		ldrh	r3, [r4, #70]
 3806              	.LVL598:
1539:.\FatFs/ff.c  **** 	fs->sects_fat = fsize;
 3807              		.loc 1 1539 0
 3808 00a2 03B9     		cbnz	r3, .L392
1539:.\FatFs/ff.c  **** 	fs->sects_fat = fsize;
 3809              		.loc 1 1539 0 is_stmt 0 discriminator 1
 3810 00a4 636D     		ldr	r3, [r4, #84]
 3811              	.LVL599:
 3812              	.L392:
1540:.\FatFs/ff.c  **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 3813              		.loc 1 1540 0 is_stmt 1
 3814 00a6 A361     		str	r3, [r4, #24]
1541:.\FatFs/ff.c  **** 	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 3815              		.loc 1 1541 0
 3816 00a8 94F84000 		ldrb	r0, [r4, #64]	@ zero_extendqisi2
 3817              	.LVL600:
 3818 00ac E070     		strb	r0, [r4, #3]
1542:.\FatFs/ff.c  **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 3819              		.loc 1 1542 0
 3820 00ae 00FB03F0 		mul	r0, r0, r3
 3821              	.LVL601:
1543:.\FatFs/ff.c  **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 3822              		.loc 1 1543 0
 3823 00b2 E78F     		ldrh	r7, [r4, #62]
 3824 00b4 EE19     		adds	r6, r5, r7
 3825 00b6 2662     		str	r6, [r4, #32]
1544:.\FatFs/ff.c  **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 3826              		.loc 1 1544 0
 3827 00b8 94F83D10 		ldrb	r1, [r4, #61]	@ zero_extendqisi2
 3828 00bc A170     		strb	r1, [r4, #2]
1545:.\FatFs/ff.c  **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 3829              		.loc 1 1545 0
 3830 00be B4F84120 		ldrh	r2, [r4, #65]
 3831 00c2 2281     		strh	r2, [r4, #8]	@ movhi
1546:.\FatFs/ff.c  **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 3832              		.loc 1 1546 0
 3833 00c4 B4F84330 		ldrh	r3, [r4, #67]
 3834              	.LVL602:
1547:.\FatFs/ff.c  **** 	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
 3835              		.loc 1 1547 0
 3836 00c8 03B9     		cbnz	r3, .L393
1547:.\FatFs/ff.c  **** 	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
 3837              		.loc 1 1547 0 is_stmt 0 discriminator 1
 3838 00ca 236D     		ldr	r3, [r4, #80]
 3839              	.LVL603:
 3840              	.L393:
1549:.\FatFs/ff.c  **** 		) / fs->csize + 2;
 3841              		.loc 1 1549 0 is_stmt 1
 3842 00cc 1209     		lsrs	r2, r2, #4
 3843 00ce DB1B     		subs	r3, r3, r7
 3844              	.LVL604:
 3845 00d0 1B1A     		subs	r3, r3, r0
 3846 00d2 9B1A     		subs	r3, r3, r2
1550:.\FatFs/ff.c  **** 
 3847              		.loc 1 1550 0
 3848 00d4 B3FBF1F3 		udiv	r3, r3, r1
1548:.\FatFs/ff.c  **** 		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 3849              		.loc 1 1548 0
 3850 00d8 0233     		adds	r3, r3, #2
 3851              	.LVL605:
 3852 00da E361     		str	r3, [r4, #28]
 3853              	.LVL606:
1553:.\FatFs/ff.c  **** 	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 3854              		.loc 1 1553 0
 3855 00dc 40F6F671 		movw	r1, #4086
 3856 00e0 8B42     		cmp	r3, r1
 3857 00e2 94BF     		ite	ls
 3858 00e4 0121     		movls	r1, #1
 3859 00e6 0221     		movhi	r1, #2
 3860              	.LVL607:
1554:.\FatFs/ff.c  **** 
 3861              		.loc 1 1554 0
 3862 00e8 4FF6F677 		movw	r7, #65526
 3863 00ec BB42     		cmp	r3, r7
 3864 00ee 3CD9     		bls	.L396
 3865 00f0 46E0     		b	.L414
 3866              	.LVL608:
 3867              	.L397:
1570:.\FatFs/ff.c  **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 3868              		.loc 1 1570 0 discriminator 1
 3869 00f2 B4F82E22 		ldrh	r2, [r4, #558]
 3870 00f6 4AF65523 		movw	r3, #43605
 3871 00fa 9A42     		cmp	r2, r3
 3872 00fc 14D1     		bne	.L410
1571:.\FatFs/ff.c  **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 3873              		.loc 1 1571 0
 3874 00fe 226B     		ldr	r2, [r4, #48]
 3875 0100 2D4B     		ldr	r3, .L416+4
 3876 0102 9A42     		cmp	r2, r3
 3877 0104 12D1     		bne	.L411
1572:.\FatFs/ff.c  **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 3878              		.loc 1 1572 0
 3879 0106 D4F81422 		ldr	r2, [r4, #532]
 3880 010a 03F1FF53 		add	r3, r3, #534773760
 3881 010e 03F50053 		add	r3, r3, #8192
 3882 0112 2033     		adds	r3, r3, #32
 3883 0114 9A42     		cmp	r2, r3
 3884 0116 0BD1     		bne	.L412
1574:.\FatFs/ff.c  **** 			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 3885              		.loc 1 1574 0
 3886 0118 D4F81C32 		ldr	r3, [r4, #540]
 3887 011c E360     		str	r3, [r4, #12]
1575:.\FatFs/ff.c  **** 		}
 3888              		.loc 1 1575 0
 3889 011e D4F81832 		ldr	r3, [r4, #536]
 3890 0122 2361     		str	r3, [r4, #16]
1554:.\FatFs/ff.c  **** 
 3891              		.loc 1 1554 0
 3892 0124 0321     		movs	r1, #3
 3893 0126 04E0     		b	.L395
 3894              	.L410:
 3895 0128 0321     		movs	r1, #3
 3896 012a 02E0     		b	.L395
 3897              	.L411:
 3898 012c 0321     		movs	r1, #3
 3899 012e 00E0     		b	.L395
 3900              	.L412:
 3901 0130 0321     		movs	r1, #3
 3902              	.LVL609:
 3903              	.L395:
1579:.\FatFs/ff.c  **** 	fs->winsect = 0;		/* Invalidate sector cache */
 3904              		.loc 1 1579 0
 3905 0132 2170     		strb	r1, [r4]
1580:.\FatFs/ff.c  **** #if _FS_RPATH
 3906              		.loc 1 1580 0
 3907 0134 0020     		movs	r0, #0
 3908 0136 E062     		str	r0, [r4, #44]
1584:.\FatFs/ff.c  **** 
 3909              		.loc 1 1584 0
 3910 0138 204A     		ldr	r2, .L416+8
 3911 013a 1388     		ldrh	r3, [r2]
 3912 013c 0133     		adds	r3, r3, #1
 3913 013e 9BB2     		uxth	r3, r3
 3914 0140 1380     		strh	r3, [r2]	@ movhi
 3915 0142 E380     		strh	r3, [r4, #6]	@ movhi
1586:.\FatFs/ff.c  **** }
 3916              		.loc 1 1586 0
 3917 0144 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3918              	.LVL610:
 3919              	.L398:
1491:.\FatFs/ff.c  **** 	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
 3920              		.loc 1 1491 0
 3921 0146 0B20     		movs	r0, #11
 3922              	.LVL611:
 3923 0148 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3924              	.LVL612:
 3925              	.L399:
1493:.\FatFs/ff.c  **** 
 3926              		.loc 1 1493 0
 3927 014a 0C20     		movs	r0, #12
 3928              	.LVL613:
 3929 014c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3930              	.LVL614:
 3931              	.L400:
1504:.\FatFs/ff.c  **** 		}
 3932              		.loc 1 1504 0
 3933 014e 0020     		movs	r0, #0
 3934              	.LVL615:
 3935 0150 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3936              	.LVL616:
 3937              	.L402:
1514:.\FatFs/ff.c  **** #if _MAX_SS != 512						/* Get disk sector size if needed */
 3938              		.loc 1 1514 0
 3939 0152 0320     		movs	r0, #3
 3940              	.LVL617:
 3941 0154 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3942              	.LVL618:
 3943              	.L403:
1521:.\FatFs/ff.c  **** #endif
 3944              		.loc 1 1521 0
 3945 0156 0A20     		movs	r0, #10
 3946              	.LVL619:
 3947 0158 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3948              	.LVL620:
 3949              	.L405:
1535:.\FatFs/ff.c  **** 
 3950              		.loc 1 1535 0
 3951 015a 0D20     		movs	r0, #13
 3952              	.LVL621:
 3953 015c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3954              	.LVL622:
 3955              	.L406:
1533:.\FatFs/ff.c  **** 	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT partition is found */
 3956              		.loc 1 1533 0
 3957 015e 0120     		movs	r0, #1
 3958              	.LVL623:
 3959 0160 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3960              	.LVL624:
 3961              	.L407:
1535:.\FatFs/ff.c  **** 
 3962              		.loc 1 1535 0
 3963 0162 0D20     		movs	r0, #13
 3964              	.LVL625:
 3965 0164 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3966              	.LVL626:
 3967              	.L408:
 3968 0166 0D20     		movs	r0, #13
 3969              	.LVL627:
 3970 0168 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3971              	.LVL628:
 3972              	.L396:
1559:.\FatFs/ff.c  **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 3973              		.loc 1 1559 0
 3974 016a 8319     		adds	r3, r0, r6
 3975              	.LVL629:
 3976 016c 6362     		str	r3, [r4, #36]
 3977 016e 3244     		add	r2, r2, r6
1560:.\FatFs/ff.c  **** 
 3978              		.loc 1 1560 0
 3979 0170 1318     		adds	r3, r2, r0
 3980 0172 A362     		str	r3, [r4, #40]
1564:.\FatFs/ff.c  **** 	fs->wflag = 0;
 3981              		.loc 1 1564 0
 3982 0174 4FF0FF33 		mov	r3, #-1
 3983 0178 2361     		str	r3, [r4, #16]
1565:.\FatFs/ff.c  **** 	/* Get fsinfo if needed */
 3984              		.loc 1 1565 0
 3985 017a 0023     		movs	r3, #0
 3986 017c 2371     		strb	r3, [r4, #4]
 3987 017e D8E7     		b	.L395
 3988              	.LVL630:
 3989              	.L414:
1557:.\FatFs/ff.c  **** 	else
 3990              		.loc 1 1557 0
 3991 0180 E36D     		ldr	r3, [r4, #92]
 3992              	.LVL631:
 3993 0182 6362     		str	r3, [r4, #36]
 3994 0184 3244     		add	r2, r2, r6
1560:.\FatFs/ff.c  **** 
 3995              		.loc 1 1560 0
 3996 0186 1318     		adds	r3, r2, r0
 3997 0188 A362     		str	r3, [r4, #40]
1564:.\FatFs/ff.c  **** 	fs->wflag = 0;
 3998              		.loc 1 1564 0
 3999 018a 4FF0FF33 		mov	r3, #-1
 4000 018e 2361     		str	r3, [r4, #16]
1565:.\FatFs/ff.c  **** 	/* Get fsinfo if needed */
 4001              		.loc 1 1565 0
 4002 0190 0023     		movs	r3, #0
 4003 0192 2371     		strb	r3, [r4, #4]
1568:.\FatFs/ff.c  **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 4004              		.loc 1 1568 0
 4005 0194 6371     		strb	r3, [r4, #5]
1569:.\FatFs/ff.c  **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 4006              		.loc 1 1569 0
 4007 0196 B4F86020 		ldrh	r2, [r4, #96]
 4008 019a 2A44     		add	r2, r2, r5
 4009 019c 6261     		str	r2, [r4, #20]
1570:.\FatFs/ff.c  **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 4010              		.loc 1 1570 0
 4011 019e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 4012              	.LVL632:
 4013 01a0 04F13001 		add	r1, r4, #48
 4014 01a4 0123     		movs	r3, #1
 4015 01a6 FFF7FEFF 		bl	disk_read
 4016              	.LVL633:
 4017 01aa 0028     		cmp	r0, #0
 4018 01ac A1D0     		beq	.L397
1554:.\FatFs/ff.c  **** 
 4019              		.loc 1 1554 0
 4020 01ae 0321     		movs	r1, #3
 4021 01b0 BFE7     		b	.L395
 4022              	.L417:
 4023 01b2 00BF     		.align	2
 4024              	.L416:
 4025 01b4 00000000 		.word	.LANCHOR2
 4026 01b8 52526141 		.word	1096897106
 4027 01bc 00000000 		.word	.LANCHOR3
 4028              		.cfi_endproc
 4029              	.LFE55:
 4031              		.section	.text.f_mount,"ax",%progbits
 4032              		.align	2
 4033              		.global	f_mount
 4034              		.thumb
 4035              		.thumb_func
 4037              	f_mount:
 4038              	.LFB57:
1612:.\FatFs/ff.c  **** 
1613:.\FatFs/ff.c  **** 
1614:.\FatFs/ff.c  **** 
1615:.\FatFs/ff.c  **** 
1616:.\FatFs/ff.c  **** /*--------------------------------------------------------------------------
1617:.\FatFs/ff.c  **** 
1618:.\FatFs/ff.c  ****    Public Functions
1619:.\FatFs/ff.c  **** 
1620:.\FatFs/ff.c  **** --------------------------------------------------------------------------*/
1621:.\FatFs/ff.c  **** 
1622:.\FatFs/ff.c  **** 
1623:.\FatFs/ff.c  **** 
1624:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1625:.\FatFs/ff.c  **** /* Mount/Unmount a Logical Drive                                         */
1626:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1627:.\FatFs/ff.c  **** 
1628:.\FatFs/ff.c  **** FRESULT f_mount (
1629:.\FatFs/ff.c  **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
1630:.\FatFs/ff.c  **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
1631:.\FatFs/ff.c  **** )
1632:.\FatFs/ff.c  **** {
 4039              		.loc 1 1632 0
 4040              		.cfi_startproc
 4041              		@ args = 0, pretend = 0, frame = 0
 4042              		@ frame_needed = 0, uses_anonymous_args = 0
 4043              		@ link register save eliminated.
 4044              	.LVL634:
1633:.\FatFs/ff.c  **** 	FATFS *rfs;
1634:.\FatFs/ff.c  **** 
1635:.\FatFs/ff.c  **** 
1636:.\FatFs/ff.c  **** 	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 4045              		.loc 1 1636 0
 4046 0000 58B9     		cbnz	r0, .L422
1637:.\FatFs/ff.c  **** 		return FR_INVALID_DRIVE;
1638:.\FatFs/ff.c  **** 	rfs = FatFs[vol];				/* Get current fs object */
 4047              		.loc 1 1638 0
 4048 0002 074B     		ldr	r3, .L423
 4049 0004 1B68     		ldr	r3, [r3]
 4050              	.LVL635:
1639:.\FatFs/ff.c  **** 
1640:.\FatFs/ff.c  **** 	if (rfs) {
 4051              		.loc 1 1640 0
 4052 0006 0BB1     		cbz	r3, .L420
1641:.\FatFs/ff.c  **** #if _FS_REENTRANT					/* Discard sync object of the current volume */
1642:.\FatFs/ff.c  **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
1643:.\FatFs/ff.c  **** #endif
1644:.\FatFs/ff.c  **** 		rfs->fs_type = 0;			/* Clear old fs object */
 4053              		.loc 1 1644 0
 4054 0008 0022     		movs	r2, #0
 4055 000a 1A70     		strb	r2, [r3]
 4056              	.L420:
1645:.\FatFs/ff.c  **** 	}
1646:.\FatFs/ff.c  **** 
1647:.\FatFs/ff.c  **** 	if (fs) {
 4057              		.loc 1 1647 0
 4058 000c 09B1     		cbz	r1, .L421
1648:.\FatFs/ff.c  **** 		fs->fs_type = 0;			/* Clear new fs object */
 4059              		.loc 1 1648 0
 4060 000e 0023     		movs	r3, #0
 4061              	.LVL636:
 4062 0010 0B70     		strb	r3, [r1]
 4063              	.L421:
1649:.\FatFs/ff.c  **** #if _FS_REENTRANT					/* Create sync object for the new volume */
1650:.\FatFs/ff.c  **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
1651:.\FatFs/ff.c  **** #endif
1652:.\FatFs/ff.c  **** 	}
1653:.\FatFs/ff.c  **** 	FatFs[vol] = fs;				/* Register new fs object */
 4064              		.loc 1 1653 0
 4065 0012 034B     		ldr	r3, .L423
 4066 0014 1960     		str	r1, [r3]
1654:.\FatFs/ff.c  **** 
1655:.\FatFs/ff.c  **** 	return FR_OK;
 4067              		.loc 1 1655 0
 4068 0016 0020     		movs	r0, #0
 4069              	.LVL637:
 4070 0018 7047     		bx	lr
 4071              	.LVL638:
 4072              	.L422:
1637:.\FatFs/ff.c  **** 	rfs = FatFs[vol];				/* Get current fs object */
 4073              		.loc 1 1637 0
 4074 001a 0B20     		movs	r0, #11
 4075              	.LVL639:
1656:.\FatFs/ff.c  **** }
 4076              		.loc 1 1656 0
 4077 001c 7047     		bx	lr
 4078              	.L424:
 4079 001e 00BF     		.align	2
 4080              	.L423:
 4081 0020 00000000 		.word	.LANCHOR2
 4082              		.cfi_endproc
 4083              	.LFE57:
 4085              		.section	.text.f_open,"ax",%progbits
 4086              		.align	2
 4087              		.global	f_open
 4088              		.thumb
 4089              		.thumb_func
 4091              	f_open:
 4092              	.LFB58:
1657:.\FatFs/ff.c  **** 
1658:.\FatFs/ff.c  **** 
1659:.\FatFs/ff.c  **** 
1660:.\FatFs/ff.c  **** 
1661:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1662:.\FatFs/ff.c  **** /* Open or Create a File                                                 */
1663:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1664:.\FatFs/ff.c  **** 
1665:.\FatFs/ff.c  **** FRESULT f_open (
1666:.\FatFs/ff.c  **** 	FIL *fp,			/* Pointer to the blank file object */
1667:.\FatFs/ff.c  **** 	const XCHAR *path,	/* Pointer to the file name */
1668:.\FatFs/ff.c  **** 	BYTE mode			/* Access mode and file open mode flags */
1669:.\FatFs/ff.c  **** )
1670:.\FatFs/ff.c  **** {
 4093              		.loc 1 1670 0
 4094              		.cfi_startproc
 4095              		@ args = 0, pretend = 0, frame = 56
 4096              		@ frame_needed = 0, uses_anonymous_args = 0
 4097              	.LVL640:
 4098 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4099              	.LCFI30:
 4100              		.cfi_def_cfa_offset 24
 4101              		.cfi_offset 4, -24
 4102              		.cfi_offset 5, -20
 4103              		.cfi_offset 6, -16
 4104              		.cfi_offset 7, -12
 4105              		.cfi_offset 8, -8
 4106              		.cfi_offset 14, -4
 4107 0004 8EB0     		sub	sp, sp, #56
 4108              	.LCFI31:
 4109              		.cfi_def_cfa_offset 80
 4110 0006 0446     		mov	r4, r0
 4111 0008 0EA8     		add	r0, sp, #56
 4112              	.LVL641:
 4113 000a 40F8341D 		str	r1, [r0, #-52]!
 4114 000e 1546     		mov	r5, r2
 4115              	.LVL642:
1671:.\FatFs/ff.c  **** 	FRESULT res;
1672:.\FatFs/ff.c  **** 	DIR dj;
1673:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
1674:.\FatFs/ff.c  **** 	BYTE *dir;
1675:.\FatFs/ff.c  **** 
1676:.\FatFs/ff.c  **** 
1677:.\FatFs/ff.c  **** 	fp->fs = NULL;		/* Clear file object */
 4116              		.loc 1 1677 0
 4117 0010 0023     		movs	r3, #0
 4118 0012 2360     		str	r3, [r4]
 4119              	.LVL643:
1678:.\FatFs/ff.c  **** #if !_FS_READONLY
1679:.\FatFs/ff.c  **** 	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
1680:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_
 4120              		.loc 1 1680 0
 4121 0014 05A9     		add	r1, sp, #20
 4122              	.LVL644:
 4123 0016 02F01E02 		and	r2, r2, #30
 4124              	.LVL645:
 4125 001a FFF7FEFF 		bl	chk_mounted
 4126              	.LVL646:
1681:.\FatFs/ff.c  **** #else
1682:.\FatFs/ff.c  **** 	mode &= FA_READ;
1683:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, 0);
1684:.\FatFs/ff.c  **** #endif
1685:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 4127              		.loc 1 1685 0
 4128 001e 0028     		cmp	r0, #0
 4129 0020 74D1     		bne	.L432
1679:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_
 4130              		.loc 1 1679 0
 4131 0022 05F01F06 		and	r6, r5, #31
1686:.\FatFs/ff.c  **** 	INITBUF(dj, sfn, lfn);
 4132              		.loc 1 1686 0
 4133 0026 02AB     		add	r3, sp, #8
 4134 0028 0B93     		str	r3, [sp, #44]
 4135 002a 414B     		ldr	r3, .L445
 4136 002c 0C93     		str	r3, [sp, #48]
1687:.\FatFs/ff.c  **** 	res = follow_path(&dj, path);	/* Follow the file path */
 4137              		.loc 1 1687 0
 4138 002e 05A8     		add	r0, sp, #20
 4139              	.LVL647:
 4140 0030 0199     		ldr	r1, [sp, #4]
 4141 0032 FFF7FEFF 		bl	follow_path
 4142              	.LVL648:
1688:.\FatFs/ff.c  **** 
1689:.\FatFs/ff.c  **** #if !_FS_READONLY
1690:.\FatFs/ff.c  **** 	/* Create or Open a file */
1691:.\FatFs/ff.c  **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 4143              		.loc 1 1691 0
 4144 0036 15F01C0F 		tst	r5, #28
 4145 003a 43D0     		beq	.L427
 4146              	.LBB42:
1692:.\FatFs/ff.c  **** 		DWORD ps, cl;
1693:.\FatFs/ff.c  **** 
1694:.\FatFs/ff.c  **** 		if (res != FR_OK) {			/* No file, create new */
 4147              		.loc 1 1694 0
 4148 003c 50B1     		cbz	r0, .L428
1695:.\FatFs/ff.c  **** 			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 4149              		.loc 1 1695 0
 4150 003e 0428     		cmp	r0, #4
 4151 0040 73D1     		bne	.L426
1696:.\FatFs/ff.c  **** 				res = dir_register(&dj);
 4152              		.loc 1 1696 0
 4153 0042 05A8     		add	r0, sp, #20
 4154              	.LVL649:
 4155 0044 FFF7FEFF 		bl	dir_register
 4156              	.LVL650:
1697:.\FatFs/ff.c  **** 			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 4157              		.loc 1 1697 0
 4158 0048 0028     		cmp	r0, #0
 4159 004a 60D1     		bne	.L434
1698:.\FatFs/ff.c  **** 			mode |= FA_CREATE_ALWAYS;
 4160              		.loc 1 1698 0
 4161 004c 46F00806 		orr	r6, r6, #8
 4162              	.LVL651:
1699:.\FatFs/ff.c  **** 			dir = dj.dir;			/* Created entry (SFN entry) */
 4163              		.loc 1 1699 0
 4164 0050 0A9F     		ldr	r7, [sp, #40]
 4165              	.LVL652:
 4166 0052 28E0     		b	.L429
 4167              	.LVL653:
 4168              	.L428:
1700:.\FatFs/ff.c  **** 		}
1701:.\FatFs/ff.c  **** 		else {						/* Any object is already existing */
1702:.\FatFs/ff.c  **** 			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 4169              		.loc 1 1702 0
 4170 0054 15F0040F 		tst	r5, #4
 4171 0058 5AD1     		bne	.L435
1703:.\FatFs/ff.c  **** 				LEAVE_FF(dj.fs, FR_EXIST);
1704:.\FatFs/ff.c  **** 			dir = dj.dir;
 4172              		.loc 1 1704 0
 4173 005a 0A9F     		ldr	r7, [sp, #40]
 4174              	.LVL654:
1705:.\FatFs/ff.c  **** 			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 4175              		.loc 1 1705 0
 4176 005c 002F     		cmp	r7, #0
 4177 005e 59D0     		beq	.L436
 4178              		.loc 1 1705 0 is_stmt 0 discriminator 1
 4179 0060 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4180 0062 13F0110F 		tst	r3, #17
 4181 0066 57D1     		bne	.L437
1706:.\FatFs/ff.c  **** 				LEAVE_FF(dj.fs, FR_DENIED);
1707:.\FatFs/ff.c  **** 			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 4182              		.loc 1 1707 0 is_stmt 1
 4183 0068 15F0080F 		tst	r5, #8
 4184 006c 1BD0     		beq	.L429
1708:.\FatFs/ff.c  **** 				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start clust
 4185              		.loc 1 1708 0
 4186 006e BD8A     		ldrh	r5, [r7, #20]
 4187 0070 7B8B     		ldrh	r3, [r7, #26]
 4188              	.LVL655:
1709:.\FatFs/ff.c  **** 				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 4189              		.loc 1 1709 0
 4190 0072 0022     		movs	r2, #0
 4191 0074 BA82     		strh	r2, [r7, #20]	@ movhi
1710:.\FatFs/ff.c  **** 				ST_WORD(dir+DIR_FstClusLO, 0);
 4192              		.loc 1 1710 0
 4193 0076 7A83     		strh	r2, [r7, #26]	@ movhi
1711:.\FatFs/ff.c  **** 				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 4194              		.loc 1 1711 0
 4195 0078 FA61     		str	r2, [r7, #28]
1712:.\FatFs/ff.c  **** 				dj.fs->wflag = 1;
 4196              		.loc 1 1712 0
 4197 007a 0598     		ldr	r0, [sp, #20]
 4198              	.LVL656:
 4199 007c 0122     		movs	r2, #1
 4200 007e 0271     		strb	r2, [r0, #4]
1713:.\FatFs/ff.c  **** 				ps = dj.fs->winsect;			/* Remove the cluster chain */
 4201              		.loc 1 1713 0
 4202 0080 D0F82C80 		ldr	r8, [r0, #44]
 4203              	.LVL657:
1714:.\FatFs/ff.c  **** 				if (cl) {
 4204              		.loc 1 1714 0
 4205 0084 53EA0545 		orrs	r5, r3, r5, lsl #16
 4206              	.LVL658:
 4207 0088 07D0     		beq	.L430
1715:.\FatFs/ff.c  **** 					res = remove_chain(dj.fs, cl);
 4208              		.loc 1 1715 0
 4209 008a 2946     		mov	r1, r5
 4210 008c FFF7FEFF 		bl	remove_chain
 4211              	.LVL659:
1716:.\FatFs/ff.c  **** 					if (res) LEAVE_FF(dj.fs, res);
 4212              		.loc 1 1716 0
 4213 0090 0028     		cmp	r0, #0
 4214 0092 43D1     		bne	.L438
1717:.\FatFs/ff.c  **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 4215              		.loc 1 1717 0
 4216 0094 6B1E     		subs	r3, r5, #1
 4217 0096 059A     		ldr	r2, [sp, #20]
 4218 0098 D360     		str	r3, [r2, #12]
 4219              	.LVL660:
 4220              	.L430:
1718:.\FatFs/ff.c  **** 				}
1719:.\FatFs/ff.c  **** 				res = move_window(dj.fs, ps);
 4221              		.loc 1 1719 0
 4222 009a 0598     		ldr	r0, [sp, #20]
 4223 009c 4146     		mov	r1, r8
 4224 009e FFF7FEFF 		bl	move_window
 4225              	.LVL661:
1720:.\FatFs/ff.c  **** 				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 4226              		.loc 1 1720 0
 4227 00a2 0028     		cmp	r0, #0
 4228 00a4 3BD1     		bne	.L439
 4229              	.LVL662:
 4230              	.L429:
1721:.\FatFs/ff.c  **** 			}
1722:.\FatFs/ff.c  **** 		}
1723:.\FatFs/ff.c  **** 		if (mode & FA_CREATE_ALWAYS) {
 4231              		.loc 1 1723 0
 4232 00a6 16F0080F 		tst	r6, #8
 4233 00aa 19D0     		beq	.L431
1724:.\FatFs/ff.c  **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 4234              		.loc 1 1724 0
 4235 00ac 0023     		movs	r3, #0
 4236 00ae FB72     		strb	r3, [r7, #11]
1725:.\FatFs/ff.c  **** 			ps = get_fattime();
 4237              		.loc 1 1725 0
 4238 00b0 FFF7FEFF 		bl	get_fattime
 4239              	.LVL663:
1726:.\FatFs/ff.c  **** 			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 4240              		.loc 1 1726 0
 4241 00b4 C7F80E00 		str	r0, [r7, #14]
1727:.\FatFs/ff.c  **** 			dj.fs->wflag = 1;
 4242              		.loc 1 1727 0
 4243 00b8 0122     		movs	r2, #1
 4244 00ba 059B     		ldr	r3, [sp, #20]
 4245 00bc 1A71     		strb	r2, [r3, #4]
1728:.\FatFs/ff.c  **** 			mode |= FA__WRITTEN;				/* Set file changed flag */
 4246              		.loc 1 1728 0
 4247 00be 46F02006 		orr	r6, r6, #32
 4248              	.LVL664:
 4249 00c2 0DE0     		b	.L431
 4250              	.LVL665:
 4251              	.L427:
 4252              	.LBE42:
1729:.\FatFs/ff.c  **** 		}
1730:.\FatFs/ff.c  **** 	}
1731:.\FatFs/ff.c  **** 	/* Open an existing file */
1732:.\FatFs/ff.c  **** 	else {
1733:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
1734:.\FatFs/ff.c  **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 4253              		.loc 1 1734 0
 4254 00c4 0028     		cmp	r0, #0
 4255 00c6 30D1     		bne	.L426
1735:.\FatFs/ff.c  **** 		dir = dj.dir;
 4256              		.loc 1 1735 0
 4257 00c8 0A9F     		ldr	r7, [sp, #40]
 4258              	.LVL666:
1736:.\FatFs/ff.c  **** 		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 4259              		.loc 1 1736 0
 4260 00ca 4FB3     		cbz	r7, .L441
 4261              		.loc 1 1736 0 is_stmt 0 discriminator 1
 4262 00cc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4263 00ce 13F0100F 		tst	r3, #16
 4264 00d2 27D1     		bne	.L442
1737:.\FatFs/ff.c  **** 			LEAVE_FF(dj.fs, FR_NO_FILE);
1738:.\FatFs/ff.c  **** #if !_FS_READONLY
1739:.\FatFs/ff.c  **** 		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 4265              		.loc 1 1739 0 is_stmt 1
 4266 00d4 15F0020F 		tst	r5, #2
 4267 00d8 02D0     		beq	.L431
 4268              		.loc 1 1739 0 is_stmt 0 discriminator 1
 4269 00da 13F0010F 		tst	r3, #1
 4270 00de 23D1     		bne	.L443
 4271              	.LVL667:
 4272              	.L431:
1740:.\FatFs/ff.c  **** 			LEAVE_FF(dj.fs, FR_DENIED);
1741:.\FatFs/ff.c  **** 	}
1742:.\FatFs/ff.c  **** 	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 4273              		.loc 1 1742 0 is_stmt 1
 4274 00e0 059B     		ldr	r3, [sp, #20]
 4275 00e2 DA6A     		ldr	r2, [r3, #44]
 4276 00e4 E261     		str	r2, [r4, #28]
1743:.\FatFs/ff.c  **** 	fp->dir_ptr = dj.dir;
 4277              		.loc 1 1743 0
 4278 00e6 0A9A     		ldr	r2, [sp, #40]
 4279 00e8 2262     		str	r2, [r4, #32]
1744:.\FatFs/ff.c  **** #endif
1745:.\FatFs/ff.c  **** 	fp->flag = mode;					/* File access mode */
 4280              		.loc 1 1745 0
 4281 00ea A671     		strb	r6, [r4, #6]
1746:.\FatFs/ff.c  **** 	fp->org_clust =						/* File start cluster */
1747:.\FatFs/ff.c  **** 		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 4282              		.loc 1 1747 0
 4283 00ec B98A     		ldrh	r1, [r7, #20]
 4284 00ee 7A8B     		ldrh	r2, [r7, #26]
 4285 00f0 42EA0142 		orr	r2, r2, r1, lsl #16
1746:.\FatFs/ff.c  **** 	fp->org_clust =						/* File start cluster */
 4286              		.loc 1 1746 0
 4287 00f4 2261     		str	r2, [r4, #16]
1748:.\FatFs/ff.c  **** 	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 4288              		.loc 1 1748 0
 4289 00f6 FA69     		ldr	r2, [r7, #28]
 4290 00f8 E260     		str	r2, [r4, #12]
1749:.\FatFs/ff.c  **** 	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 4291              		.loc 1 1749 0
 4292 00fa 0020     		movs	r0, #0
 4293 00fc A060     		str	r0, [r4, #8]
 4294 00fe FF22     		movs	r2, #255
 4295 0100 E271     		strb	r2, [r4, #7]
1750:.\FatFs/ff.c  **** 	fp->dsect = 0;
 4296              		.loc 1 1750 0
 4297 0102 A061     		str	r0, [r4, #24]
1751:.\FatFs/ff.c  **** 	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 4298              		.loc 1 1751 0
 4299 0104 2360     		str	r3, [r4]
 4300 0106 DB88     		ldrh	r3, [r3, #6]
 4301 0108 A380     		strh	r3, [r4, #4]	@ movhi
1752:.\FatFs/ff.c  **** 
1753:.\FatFs/ff.c  **** 	LEAVE_FF(dj.fs, FR_OK);
 4302              		.loc 1 1753 0
 4303 010a 0EE0     		b	.L426
 4304              	.LVL668:
 4305              	.L432:
 4306 010c 0DE0     		b	.L426
 4307              	.L434:
 4308 010e 0CE0     		b	.L426
 4309              	.L435:
 4310              	.LBB43:
1703:.\FatFs/ff.c  **** 			dir = dj.dir;
 4311              		.loc 1 1703 0
 4312 0110 0820     		movs	r0, #8
 4313              	.LVL669:
 4314 0112 0AE0     		b	.L426
 4315              	.LVL670:
 4316              	.L436:
1706:.\FatFs/ff.c  **** 			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 4317              		.loc 1 1706 0
 4318 0114 0720     		movs	r0, #7
 4319              	.LVL671:
 4320 0116 08E0     		b	.L426
 4321              	.LVL672:
 4322              	.L437:
 4323 0118 0720     		movs	r0, #7
 4324              	.LVL673:
 4325 011a 06E0     		b	.L426
 4326              	.LVL674:
 4327              	.L438:
 4328 011c 05E0     		b	.L426
 4329              	.L439:
 4330 011e 04E0     		b	.L426
 4331              	.LVL675:
 4332              	.L441:
 4333              	.LBE43:
1737:.\FatFs/ff.c  **** #if !_FS_READONLY
 4334              		.loc 1 1737 0
 4335 0120 0420     		movs	r0, #4
 4336              	.LVL676:
 4337 0122 02E0     		b	.L426
 4338              	.LVL677:
 4339              	.L442:
 4340 0124 0420     		movs	r0, #4
 4341              	.LVL678:
 4342 0126 00E0     		b	.L426
 4343              	.LVL679:
 4344              	.L443:
1740:.\FatFs/ff.c  **** 	}
 4345              		.loc 1 1740 0
 4346 0128 0720     		movs	r0, #7
 4347              	.LVL680:
 4348              	.L426:
1754:.\FatFs/ff.c  **** }
 4349              		.loc 1 1754 0
 4350 012a 0EB0     		add	sp, sp, #56
 4351              	.LCFI32:
 4352              		.cfi_def_cfa_offset 24
 4353              	.LVL681:
 4354              		@ sp needed
 4355 012c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4356              	.LVL682:
 4357              	.L446:
 4358              		.align	2
 4359              	.L445:
 4360 0130 00000000 		.word	.LANCHOR4
 4361              		.cfi_endproc
 4362              	.LFE58:
 4364              		.section	.text.f_read,"ax",%progbits
 4365              		.align	2
 4366              		.global	f_read
 4367              		.thumb
 4368              		.thumb_func
 4370              	f_read:
 4371              	.LFB59:
1755:.\FatFs/ff.c  **** 
1756:.\FatFs/ff.c  **** 
1757:.\FatFs/ff.c  **** 
1758:.\FatFs/ff.c  **** 
1759:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1760:.\FatFs/ff.c  **** /* Read File                                                             */
1761:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1762:.\FatFs/ff.c  **** 
1763:.\FatFs/ff.c  **** FRESULT f_read (
1764:.\FatFs/ff.c  **** 	FIL *fp, 		/* Pointer to the file object */
1765:.\FatFs/ff.c  **** 	void *buff,		/* Pointer to data buffer */
1766:.\FatFs/ff.c  **** 	UINT btr,		/* Number of bytes to read */
1767:.\FatFs/ff.c  **** 	UINT *br		/* Pointer to number of bytes read */
1768:.\FatFs/ff.c  **** )
1769:.\FatFs/ff.c  **** {
 4372              		.loc 1 1769 0
 4373              		.cfi_startproc
 4374              		@ args = 0, pretend = 0, frame = 0
 4375              		@ frame_needed = 0, uses_anonymous_args = 0
 4376              	.LVL683:
 4377 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4378              	.LCFI33:
 4379              		.cfi_def_cfa_offset 40
 4380              		.cfi_offset 3, -40
 4381              		.cfi_offset 4, -36
 4382              		.cfi_offset 5, -32
 4383              		.cfi_offset 6, -28
 4384              		.cfi_offset 7, -24
 4385              		.cfi_offset 8, -20
 4386              		.cfi_offset 9, -16
 4387              		.cfi_offset 10, -12
 4388              		.cfi_offset 11, -8
 4389              		.cfi_offset 14, -4
 4390 0004 0446     		mov	r4, r0
 4391 0006 8846     		mov	r8, r1
 4392 0008 1546     		mov	r5, r2
 4393 000a 1F46     		mov	r7, r3
 4394              	.LVL684:
1770:.\FatFs/ff.c  **** 	FRESULT res;
1771:.\FatFs/ff.c  **** 	DWORD clst, sect, remain;
1772:.\FatFs/ff.c  **** 	UINT rcnt, cc;
1773:.\FatFs/ff.c  **** 	BYTE *rbuff = buff;
1774:.\FatFs/ff.c  **** 
1775:.\FatFs/ff.c  **** 
1776:.\FatFs/ff.c  **** 	*br = 0;	/* Initialize bytes read */
 4395              		.loc 1 1776 0
 4396 000c 0023     		movs	r3, #0
 4397              	.LVL685:
 4398 000e 3B60     		str	r3, [r7]
1777:.\FatFs/ff.c  **** 
1778:.\FatFs/ff.c  **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 4399              		.loc 1 1778 0
 4400 0010 0068     		ldr	r0, [r0]
 4401              	.LVL686:
 4402 0012 A188     		ldrh	r1, [r4, #4]
 4403              	.LVL687:
 4404 0014 FFF7FEFF 		bl	validate
 4405              	.LVL688:
1779:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4406              		.loc 1 1779 0
 4407 0018 0028     		cmp	r0, #0
 4408 001a 40F0C180 		bne	.L465
1780:.\FatFs/ff.c  **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
 4409              		.loc 1 1780 0
 4410 001e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4411 0020 13F0800F 		tst	r3, #128
 4412 0024 40F0BE80 		bne	.L466
1781:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
1782:.\FatFs/ff.c  **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 4413              		.loc 1 1782 0
 4414 0028 13F0010F 		tst	r3, #1
 4415 002c 00F0BD80 		beq	.L467
1783:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_DENIED);
1784:.\FatFs/ff.c  **** 	remain = fp->fsize - fp->fptr;
 4416              		.loc 1 1784 0
 4417 0030 E368     		ldr	r3, [r4, #12]
 4418 0032 A668     		ldr	r6, [r4, #8]
 4419 0034 9E1B     		subs	r6, r3, r6
 4420              	.LVL689:
 4421 0036 AE42     		cmp	r6, r5
 4422 0038 28BF     		it	cs
 4423 003a 2E46     		movcs	r6, r5
 4424              	.LVL690:
1785:.\FatFs/ff.c  **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
1786:.\FatFs/ff.c  **** 
1787:.\FatFs/ff.c  **** 	for ( ;  btr;									/* Repeat until all data transferred */
 4425              		.loc 1 1787 0
 4426 003c 002E     		cmp	r6, #0
 4427 003e 00F0B780 		beq	.L468
1788:.\FatFs/ff.c  **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
1789:.\FatFs/ff.c  **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
1790:.\FatFs/ff.c  **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
1791:.\FatFs/ff.c  **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
1792:.\FatFs/ff.c  **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
1793:.\FatFs/ff.c  **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
1794:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
1795:.\FatFs/ff.c  **** 				fp->curr_clust = clst;				/* Update current cluster */
1796:.\FatFs/ff.c  **** 				fp->csect = 0;						/* Reset sector offset in the cluster */
1797:.\FatFs/ff.c  **** 			}
1798:.\FatFs/ff.c  **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
1799:.\FatFs/ff.c  **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
1800:.\FatFs/ff.c  **** 			sect += fp->csect;
1801:.\FatFs/ff.c  **** 			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
1802:.\FatFs/ff.c  **** 			if (cc) {								/* Read maximum contiguous sectors directly */
1803:.\FatFs/ff.c  **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
1804:.\FatFs/ff.c  **** 					cc = fp->fs->csize - fp->csect;
1805:.\FatFs/ff.c  **** 				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
1806:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
1807:.\FatFs/ff.c  **** #if !_FS_READONLY && _FS_MINIMIZE <= 2
1808:.\FatFs/ff.c  **** #if _FS_TINY
1809:.\FatFs/ff.c  **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cach
1810:.\FatFs/ff.c  **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
1811:.\FatFs/ff.c  **** #else
1812:.\FatFs/ff.c  **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with ca
1813:.\FatFs/ff.c  **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
1814:.\FatFs/ff.c  **** #endif
1815:.\FatFs/ff.c  **** #endif
1816:.\FatFs/ff.c  **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
1817:.\FatFs/ff.c  **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
1818:.\FatFs/ff.c  **** 				continue;
1819:.\FatFs/ff.c  **** 			}
1820:.\FatFs/ff.c  **** #if !_FS_TINY
1821:.\FatFs/ff.c  **** #if !_FS_READONLY
1822:.\FatFs/ff.c  **** 			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
1823:.\FatFs/ff.c  **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1824:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
1825:.\FatFs/ff.c  **** 				fp->flag &= ~FA__DIRTY;
1826:.\FatFs/ff.c  **** 			}
1827:.\FatFs/ff.c  **** #endif
1828:.\FatFs/ff.c  **** 			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
1829:.\FatFs/ff.c  **** 				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 4428              		.loc 1 1829 0
 4429 0042 04F1240B 		add	fp, r4, #36
 4430              	.LVL691:
 4431              	.L469:
1789:.\FatFs/ff.c  **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 4432              		.loc 1 1789 0
 4433 0046 A368     		ldr	r3, [r4, #8]
 4434 0048 C3F30802 		ubfx	r2, r3, #0, #9
 4435 004c 002A     		cmp	r2, #0
 4436 004e 40F08C80 		bne	.L449
1790:.\FatFs/ff.c  **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 4437              		.loc 1 1790 0
 4438 0052 2068     		ldr	r0, [r4]
 4439 0054 E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 4440 0056 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 4441 0058 9142     		cmp	r1, r2
 4442 005a 1BD3     		bcc	.L450
1792:.\FatFs/ff.c  **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 4443              		.loc 1 1792 0
 4444 005c 0BB9     		cbnz	r3, .L451
1792:.\FatFs/ff.c  **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 4445              		.loc 1 1792 0 is_stmt 0 discriminator 1
 4446 005e 2069     		ldr	r0, [r4, #16]
 4447 0060 02E0     		b	.L452
 4448              	.L451:
1792:.\FatFs/ff.c  **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 4449              		.loc 1 1792 0 discriminator 2
 4450 0062 6169     		ldr	r1, [r4, #20]
 4451 0064 FFF7FEFF 		bl	get_fat
 4452              	.LVL692:
 4453              	.L452:
1793:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4454              		.loc 1 1793 0 is_stmt 1
 4455 0068 0128     		cmp	r0, #1
 4456 006a 06D8     		bhi	.L453
1793:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4457              		.loc 1 1793 0 is_stmt 0 discriminator 1
 4458 006c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4459 006e 63F07F03 		orn	r3, r3, #127
 4460 0072 A371     		strb	r3, [r4, #6]
 4461 0074 0220     		movs	r0, #2
 4462              	.LVL693:
 4463 0076 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4464              	.LVL694:
 4465              	.L453:
1794:.\FatFs/ff.c  **** 				fp->curr_clust = clst;				/* Update current cluster */
 4466              		.loc 1 1794 0 is_stmt 1
 4467 007a B0F1FF3F 		cmp	r0, #-1
 4468 007e 06D1     		bne	.L454
1794:.\FatFs/ff.c  **** 				fp->curr_clust = clst;				/* Update current cluster */
 4469              		.loc 1 1794 0 is_stmt 0 discriminator 1
 4470 0080 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4471 0082 63F07F03 		orn	r3, r3, #127
 4472 0086 A371     		strb	r3, [r4, #6]
 4473 0088 0120     		movs	r0, #1
 4474              	.LVL695:
 4475 008a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4476              	.LVL696:
 4477              	.L454:
1795:.\FatFs/ff.c  **** 				fp->csect = 0;						/* Reset sector offset in the cluster */
 4478              		.loc 1 1795 0 is_stmt 1
 4479 008e 6061     		str	r0, [r4, #20]
1796:.\FatFs/ff.c  **** 			}
 4480              		.loc 1 1796 0
 4481 0090 0023     		movs	r3, #0
 4482 0092 E371     		strb	r3, [r4, #7]
 4483              	.LVL697:
 4484              	.L450:
1798:.\FatFs/ff.c  **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4485              		.loc 1 1798 0
 4486 0094 D4F800A0 		ldr	r10, [r4]
 4487 0098 5046     		mov	r0, r10
 4488 009a 6169     		ldr	r1, [r4, #20]
 4489 009c FFF7FEFF 		bl	clust2sect
 4490              	.LVL698:
1799:.\FatFs/ff.c  **** 			sect += fp->csect;
 4491              		.loc 1 1799 0
 4492 00a0 8146     		mov	r9, r0
 4493 00a2 30B9     		cbnz	r0, .L455
1799:.\FatFs/ff.c  **** 			sect += fp->csect;
 4494              		.loc 1 1799 0 is_stmt 0 discriminator 1
 4495 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4496 00a6 63F07F03 		orn	r3, r3, #127
 4497 00aa A371     		strb	r3, [r4, #6]
 4498 00ac 0220     		movs	r0, #2
 4499              	.LVL699:
 4500 00ae BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4501              	.LVL700:
 4502              	.L455:
1800:.\FatFs/ff.c  **** 			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 4503              		.loc 1 1800 0 is_stmt 1
 4504 00b2 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 4505 00b4 9944     		add	r9, r9, r3
 4506              	.LVL701:
1802:.\FatFs/ff.c  **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 4507              		.loc 1 1802 0
 4508 00b6 750A     		lsrs	r5, r6, #9
 4509              	.LVL702:
 4510 00b8 29D0     		beq	.L456
1803:.\FatFs/ff.c  **** 					cc = fp->fs->csize - fp->csect;
 4511              		.loc 1 1803 0
 4512 00ba 9AF80220 		ldrb	r2, [r10, #2]	@ zero_extendqisi2
 4513 00be E918     		adds	r1, r5, r3
 4514 00c0 9142     		cmp	r1, r2
1804:.\FatFs/ff.c  **** 				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 4515              		.loc 1 1804 0
 4516 00c2 88BF     		it	hi
 4517 00c4 D51A     		subhi	r5, r2, r3
 4518              	.LVL703:
1805:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
 4519              		.loc 1 1805 0
 4520 00c6 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 4521 00ca 4146     		mov	r1, r8
 4522 00cc 4A46     		mov	r2, r9
 4523 00ce EBB2     		uxtb	r3, r5
 4524 00d0 FFF7FEFF 		bl	disk_read
 4525              	.LVL704:
 4526 00d4 30B1     		cbz	r0, .L458
1806:.\FatFs/ff.c  **** #if !_FS_READONLY && _FS_MINIMIZE <= 2
 4527              		.loc 1 1806 0
 4528 00d6 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4529 00d8 63F07F03 		orn	r3, r3, #127
 4530 00dc A371     		strb	r3, [r4, #6]
 4531 00de 0120     		movs	r0, #1
 4532 00e0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4533              	.LVL705:
 4534              	.L458:
1812:.\FatFs/ff.c  **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 4535              		.loc 1 1812 0
 4536 00e4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4537 00e6 13F0400F 		tst	r3, #64
 4538 00ea 0BD0     		beq	.L459
1812:.\FatFs/ff.c  **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 4539              		.loc 1 1812 0 is_stmt 0 discriminator 1
 4540 00ec A069     		ldr	r0, [r4, #24]
 4541 00ee C9EB0000 		rsb	r0, r9, r0
 4542 00f2 8542     		cmp	r5, r0
 4543 00f4 06D9     		bls	.L459
1813:.\FatFs/ff.c  **** #endif
 4544              		.loc 1 1813 0 is_stmt 1
 4545 00f6 08EB4020 		add	r0, r8, r0, lsl #9
 4546 00fa 5946     		mov	r1, fp
 4547 00fc 4FF40072 		mov	r2, #512
 4548 0100 FFF7FEFF 		bl	mem_cpy
 4549              	.LVL706:
 4550              	.L459:
1816:.\FatFs/ff.c  **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 4551              		.loc 1 1816 0
 4552 0104 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 4553 0106 2B44     		add	r3, r3, r5
 4554 0108 E371     		strb	r3, [r4, #7]
1817:.\FatFs/ff.c  **** 				continue;
 4555              		.loc 1 1817 0
 4556 010a 6D02     		lsls	r5, r5, #9
 4557              	.LVL707:
1818:.\FatFs/ff.c  **** 			}
 4558              		.loc 1 1818 0
 4559 010c 3BE0     		b	.L460
 4560              	.LVL708:
 4561              	.L456:
1822:.\FatFs/ff.c  **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 4562              		.loc 1 1822 0
 4563 010e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4564 0110 13F0400F 		tst	r3, #64
 4565 0114 12D0     		beq	.L461
1823:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
 4566              		.loc 1 1823 0
 4567 0116 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 4568 011a 5946     		mov	r1, fp
 4569 011c A269     		ldr	r2, [r4, #24]
 4570 011e 0123     		movs	r3, #1
 4571 0120 FFF7FEFF 		bl	disk_write
 4572              	.LVL709:
 4573 0124 30B1     		cbz	r0, .L462
1824:.\FatFs/ff.c  **** 				fp->flag &= ~FA__DIRTY;
 4574              		.loc 1 1824 0
 4575 0126 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4576 0128 63F07F03 		orn	r3, r3, #127
 4577 012c A371     		strb	r3, [r4, #6]
 4578 012e 0120     		movs	r0, #1
 4579 0130 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4580              	.LVL710:
 4581              	.L462:
1825:.\FatFs/ff.c  **** 			}
 4582              		.loc 1 1825 0
 4583 0134 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4584 0136 23F04003 		bic	r3, r3, #64
 4585 013a A371     		strb	r3, [r4, #6]
 4586              	.L461:
1828:.\FatFs/ff.c  **** 				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 4587              		.loc 1 1828 0
 4588 013c A369     		ldr	r3, [r4, #24]
 4589 013e 4B45     		cmp	r3, r9
 4590 0140 0ED0     		beq	.L463
 4591              		.loc 1 1829 0
 4592 0142 2368     		ldr	r3, [r4]
 4593 0144 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4594 0146 5946     		mov	r1, fp
 4595 0148 4A46     		mov	r2, r9
 4596 014a 0123     		movs	r3, #1
 4597 014c FFF7FEFF 		bl	disk_read
 4598              	.LVL711:
 4599 0150 30B1     		cbz	r0, .L463
1830:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
 4600              		.loc 1 1830 0
 4601 0152 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4602 0154 63F07F03 		orn	r3, r3, #127
 4603 0158 A371     		strb	r3, [r4, #6]
 4604 015a 0120     		movs	r0, #1
 4605 015c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4606              	.LVL712:
 4607              	.L463:
1831:.\FatFs/ff.c  **** 			}
1832:.\FatFs/ff.c  **** #endif
1833:.\FatFs/ff.c  **** 			fp->dsect = sect;
 4608              		.loc 1 1833 0
 4609 0160 C4F81890 		str	r9, [r4, #24]
1834:.\FatFs/ff.c  **** 			fp->csect++;							/* Next sector address in the cluster */
 4610              		.loc 1 1834 0
 4611 0164 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 4612 0166 0133     		adds	r3, r3, #1
 4613 0168 E371     		strb	r3, [r4, #7]
 4614              	.LVL713:
 4615              	.L449:
1835:.\FatFs/ff.c  **** 		}
1836:.\FatFs/ff.c  **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 4616              		.loc 1 1836 0
 4617 016a A168     		ldr	r1, [r4, #8]
 4618 016c C1F30801 		ubfx	r1, r1, #0, #9
 4619 0170 C1F50075 		rsb	r5, r1, #512
 4620              	.LVL714:
 4621 0174 B542     		cmp	r5, r6
 4622 0176 28BF     		it	cs
 4623 0178 3546     		movcs	r5, r6
 4624              	.LVL715:
1837:.\FatFs/ff.c  **** 		if (rcnt > btr) rcnt = btr;
1838:.\FatFs/ff.c  **** #if _FS_TINY
1839:.\FatFs/ff.c  **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
1840:.\FatFs/ff.c  **** 			ABORT(fp->fs, FR_DISK_ERR);
1841:.\FatFs/ff.c  **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
1842:.\FatFs/ff.c  **** #else
1843:.\FatFs/ff.c  **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 4625              		.loc 1 1843 0
 4626 017a 2144     		add	r1, r1, r4
 4627 017c 4046     		mov	r0, r8
 4628 017e 2431     		adds	r1, r1, #36
 4629 0180 2A46     		mov	r2, r5
 4630 0182 FFF7FEFF 		bl	mem_cpy
 4631              	.LVL716:
 4632              	.L460:
1788:.\FatFs/ff.c  **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 4633              		.loc 1 1788 0
 4634 0186 A844     		add	r8, r8, r5
 4635              	.LVL717:
 4636 0188 A368     		ldr	r3, [r4, #8]
 4637 018a 2B44     		add	r3, r3, r5
 4638 018c A360     		str	r3, [r4, #8]
 4639 018e 3B68     		ldr	r3, [r7]
 4640 0190 2B44     		add	r3, r3, r5
 4641 0192 3B60     		str	r3, [r7]
 4642              	.LVL718:
1787:.\FatFs/ff.c  **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 4643              		.loc 1 1787 0
 4644 0194 761B     		subs	r6, r6, r5
 4645              	.LVL719:
 4646 0196 7FF456AF 		bne	.L469
1844:.\FatFs/ff.c  **** #endif
1845:.\FatFs/ff.c  **** 	}
1846:.\FatFs/ff.c  **** 
1847:.\FatFs/ff.c  **** 	LEAVE_FF(fp->fs, FR_OK);
 4647              		.loc 1 1847 0
 4648 019a 0020     		movs	r0, #0
 4649 019c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4650              	.LVL720:
 4651              	.L465:
 4652 01a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4653              	.LVL721:
 4654              	.L466:
1781:.\FatFs/ff.c  **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 4655              		.loc 1 1781 0
 4656 01a4 0220     		movs	r0, #2
 4657              	.LVL722:
 4658 01a6 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4659              	.LVL723:
 4660              	.L467:
1783:.\FatFs/ff.c  **** 	remain = fp->fsize - fp->fptr;
 4661              		.loc 1 1783 0
 4662 01aa 0720     		movs	r0, #7
 4663              	.LVL724:
 4664 01ac BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4665              	.LVL725:
 4666              	.L468:
 4667              		.loc 1 1847 0
 4668 01b0 0020     		movs	r0, #0
 4669              	.LVL726:
1848:.\FatFs/ff.c  **** }
 4670              		.loc 1 1848 0
 4671 01b2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4672              		.cfi_endproc
 4673              	.LFE59:
 4675 01b6 00BF     		.section	.text.f_write,"ax",%progbits
 4676              		.align	2
 4677              		.global	f_write
 4678              		.thumb
 4679              		.thumb_func
 4681              	f_write:
 4682              	.LFB60:
1849:.\FatFs/ff.c  **** 
1850:.\FatFs/ff.c  **** 
1851:.\FatFs/ff.c  **** 
1852:.\FatFs/ff.c  **** 
1853:.\FatFs/ff.c  **** #if !_FS_READONLY
1854:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1855:.\FatFs/ff.c  **** /* Write File                                                            */
1856:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1857:.\FatFs/ff.c  **** 
1858:.\FatFs/ff.c  **** FRESULT f_write (
1859:.\FatFs/ff.c  **** 	FIL *fp,			/* Pointer to the file object */
1860:.\FatFs/ff.c  **** 	const void *buff,	/* Pointer to the data to be written */
1861:.\FatFs/ff.c  **** 	UINT btw,			/* Number of bytes to write */
1862:.\FatFs/ff.c  **** 	UINT *bw			/* Pointer to number of bytes written */
1863:.\FatFs/ff.c  **** )
1864:.\FatFs/ff.c  **** {
 4683              		.loc 1 1864 0
 4684              		.cfi_startproc
 4685              		@ args = 0, pretend = 0, frame = 0
 4686              		@ frame_needed = 0, uses_anonymous_args = 0
 4687              	.LVL727:
 4688 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4689              	.LCFI34:
 4690              		.cfi_def_cfa_offset 40
 4691              		.cfi_offset 3, -40
 4692              		.cfi_offset 4, -36
 4693              		.cfi_offset 5, -32
 4694              		.cfi_offset 6, -28
 4695              		.cfi_offset 7, -24
 4696              		.cfi_offset 8, -20
 4697              		.cfi_offset 9, -16
 4698              		.cfi_offset 10, -12
 4699              		.cfi_offset 11, -8
 4700              		.cfi_offset 14, -4
 4701 0004 0446     		mov	r4, r0
 4702 0006 8846     		mov	r8, r1
 4703 0008 1646     		mov	r6, r2
 4704 000a 1F46     		mov	r7, r3
 4705              	.LVL728:
1865:.\FatFs/ff.c  **** 	FRESULT res;
1866:.\FatFs/ff.c  **** 	DWORD clst, sect;
1867:.\FatFs/ff.c  **** 	UINT wcnt, cc;
1868:.\FatFs/ff.c  **** 	const BYTE *wbuff = buff;
1869:.\FatFs/ff.c  **** 
1870:.\FatFs/ff.c  **** 
1871:.\FatFs/ff.c  **** 	*bw = 0;	/* Initialize bytes written */
 4706              		.loc 1 1871 0
 4707 000c 0023     		movs	r3, #0
 4708              	.LVL729:
 4709 000e 3B60     		str	r3, [r7]
1872:.\FatFs/ff.c  **** 
1873:.\FatFs/ff.c  **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 4710              		.loc 1 1873 0
 4711 0010 0068     		ldr	r0, [r0]
 4712              	.LVL730:
 4713 0012 A188     		ldrh	r1, [r4, #4]
 4714              	.LVL731:
 4715 0014 FFF7FEFF 		bl	validate
 4716              	.LVL732:
1874:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4717              		.loc 1 1874 0
 4718 0018 0028     		cmp	r0, #0
 4719 001a 40F0DA80 		bne	.L493
1875:.\FatFs/ff.c  **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
 4720              		.loc 1 1875 0
 4721 001e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4722 0020 13F0800F 		tst	r3, #128
 4723 0024 40F0D780 		bne	.L494
1876:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
1877:.\FatFs/ff.c  **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 4724              		.loc 1 1877 0
 4725 0028 13F0020F 		tst	r3, #2
 4726 002c 00F0D680 		beq	.L495
1878:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_DENIED);
1879:.\FatFs/ff.c  **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 4727              		.loc 1 1879 0
 4728 0030 E368     		ldr	r3, [r4, #12]
 4729 0032 DE42     		cmn	r6, r3
 4730 0034 80F0C180 		bcs	.L474
1880:.\FatFs/ff.c  **** 
1881:.\FatFs/ff.c  **** 	for ( ;  btw;									/* Repeat until all data transferred */
 4731              		.loc 1 1881 0
 4732 0038 002E     		cmp	r6, #0
 4733 003a 00F0BE80 		beq	.L474
1882:.\FatFs/ff.c  **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
1883:.\FatFs/ff.c  **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
1884:.\FatFs/ff.c  **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
1885:.\FatFs/ff.c  **** 				if (fp->fptr == 0) {				/* On the top of the file? */
1886:.\FatFs/ff.c  **** 					clst = fp->org_clust;			/* Follow from the origin */
1887:.\FatFs/ff.c  **** 					if (clst == 0)					/* When there is no cluster chain, */
1888:.\FatFs/ff.c  **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
1889:.\FatFs/ff.c  **** 				} else {							/* Middle or end of the file */
1890:.\FatFs/ff.c  **** 					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
1891:.\FatFs/ff.c  **** 				}
1892:.\FatFs/ff.c  **** 				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
1893:.\FatFs/ff.c  **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
1894:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
1895:.\FatFs/ff.c  **** 				fp->curr_clust = clst;				/* Update current cluster */
1896:.\FatFs/ff.c  **** 				fp->csect = 0;						/* Reset sector address in the cluster */
1897:.\FatFs/ff.c  **** 			}
1898:.\FatFs/ff.c  **** #if _FS_TINY
1899:.\FatFs/ff.c  **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to f
1900:.\FatFs/ff.c  **** 				ABORT(fp->fs, FR_DISK_ERR);
1901:.\FatFs/ff.c  **** #else
1902:.\FatFs/ff.c  **** 			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
1903:.\FatFs/ff.c  **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1904:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
1905:.\FatFs/ff.c  **** 				fp->flag &= ~FA__DIRTY;
1906:.\FatFs/ff.c  **** 			}
1907:.\FatFs/ff.c  **** #endif
1908:.\FatFs/ff.c  **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
1909:.\FatFs/ff.c  **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
1910:.\FatFs/ff.c  **** 			sect += fp->csect;
1911:.\FatFs/ff.c  **** 			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
1912:.\FatFs/ff.c  **** 			if (cc) {								/* Write maximum contiguous sectors directly */
1913:.\FatFs/ff.c  **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
1914:.\FatFs/ff.c  **** 					cc = fp->fs->csize - fp->csect;
1915:.\FatFs/ff.c  **** 				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
1916:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
1917:.\FatFs/ff.c  **** #if _FS_TINY
1918:.\FatFs/ff.c  **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write 
1919:.\FatFs/ff.c  **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
1920:.\FatFs/ff.c  **** 					fp->fs->wflag = 0;
1921:.\FatFs/ff.c  **** 				}
1922:.\FatFs/ff.c  **** #else
1923:.\FatFs/ff.c  **** 				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
1924:.\FatFs/ff.c  **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
1925:.\FatFs/ff.c  **** 					fp->flag &= ~FA__DIRTY;
1926:.\FatFs/ff.c  **** 				}
1927:.\FatFs/ff.c  **** #endif
1928:.\FatFs/ff.c  **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
1929:.\FatFs/ff.c  **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
1930:.\FatFs/ff.c  **** 				continue;
1931:.\FatFs/ff.c  **** 			}
1932:.\FatFs/ff.c  **** #if _FS_TINY
1933:.\FatFs/ff.c  **** 			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
1934:.\FatFs/ff.c  **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
1935:.\FatFs/ff.c  **** 				fp->fs->winsect = sect;
1936:.\FatFs/ff.c  **** 			}
1937:.\FatFs/ff.c  **** #else
1938:.\FatFs/ff.c  **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
1939:.\FatFs/ff.c  **** 				if (fp->fptr < fp->fsize &&
1940:.\FatFs/ff.c  **** 					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 4734              		.loc 1 1940 0
 4735 003e 04F1240B 		add	fp, r4, #36
 4736              	.LVL733:
 4737              	.L496:
1883:.\FatFs/ff.c  **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 4738              		.loc 1 1883 0
 4739 0042 A368     		ldr	r3, [r4, #8]
 4740 0044 C3F30802 		ubfx	r2, r3, #0, #9
 4741 0048 002A     		cmp	r2, #0
 4742 004a 40F09A80 		bne	.L475
1884:.\FatFs/ff.c  **** 				if (fp->fptr == 0) {				/* On the top of the file? */
 4743              		.loc 1 1884 0
 4744 004e 2068     		ldr	r0, [r4]
 4745 0050 E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 4746 0052 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 4747 0054 9142     		cmp	r1, r2
 4748 0056 25D3     		bcc	.L476
1885:.\FatFs/ff.c  **** 					clst = fp->org_clust;			/* Follow from the origin */
 4749              		.loc 1 1885 0
 4750 0058 3BB9     		cbnz	r3, .L477
1886:.\FatFs/ff.c  **** 					if (clst == 0)					/* When there is no cluster chain, */
 4751              		.loc 1 1886 0
 4752 005a 2369     		ldr	r3, [r4, #16]
 4753              	.LVL734:
1887:.\FatFs/ff.c  **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 4754              		.loc 1 1887 0
 4755 005c 63B9     		cbnz	r3, .L478
1888:.\FatFs/ff.c  **** 				} else {							/* Middle or end of the file */
 4756              		.loc 1 1888 0
 4757 005e 0021     		movs	r1, #0
 4758 0060 FFF7FEFF 		bl	create_chain
 4759              	.LVL735:
 4760 0064 0346     		mov	r3, r0
 4761              	.LVL736:
 4762 0066 2061     		str	r0, [r4, #16]
 4763 0068 03E0     		b	.L479
 4764              	.LVL737:
 4765              	.L477:
1890:.\FatFs/ff.c  **** 				}
 4766              		.loc 1 1890 0
 4767 006a 6169     		ldr	r1, [r4, #20]
 4768 006c FFF7FEFF 		bl	create_chain
 4769              	.LVL738:
 4770 0070 0346     		mov	r3, r0
 4771              	.LVL739:
 4772              	.L479:
1892:.\FatFs/ff.c  **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 4773              		.loc 1 1892 0
 4774 0072 002B     		cmp	r3, #0
 4775 0074 00F0A180 		beq	.L474
 4776              	.LVL740:
 4777              	.L478:
1893:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4778              		.loc 1 1893 0
 4779 0078 012B     		cmp	r3, #1
 4780 007a 06D1     		bne	.L480
1893:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4781              		.loc 1 1893 0 is_stmt 0 discriminator 1
 4782 007c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4783              	.LVL741:
 4784 007e 63F07F03 		orn	r3, r3, #127
 4785 0082 A371     		strb	r3, [r4, #6]
 4786 0084 0220     		movs	r0, #2
 4787 0086 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4788              	.LVL742:
 4789              	.L480:
1894:.\FatFs/ff.c  **** 				fp->curr_clust = clst;				/* Update current cluster */
 4790              		.loc 1 1894 0 is_stmt 1
 4791 008a B3F1FF3F 		cmp	r3, #-1
 4792 008e 06D1     		bne	.L481
1894:.\FatFs/ff.c  **** 				fp->curr_clust = clst;				/* Update current cluster */
 4793              		.loc 1 1894 0 is_stmt 0 discriminator 1
 4794 0090 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4795              	.LVL743:
 4796 0092 63F07F03 		orn	r3, r3, #127
 4797 0096 A371     		strb	r3, [r4, #6]
 4798 0098 0120     		movs	r0, #1
 4799 009a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4800              	.LVL744:
 4801              	.L481:
1895:.\FatFs/ff.c  **** 				fp->csect = 0;						/* Reset sector address in the cluster */
 4802              		.loc 1 1895 0 is_stmt 1
 4803 009e 6361     		str	r3, [r4, #20]
1896:.\FatFs/ff.c  **** 			}
 4804              		.loc 1 1896 0
 4805 00a0 0023     		movs	r3, #0
 4806              	.LVL745:
 4807 00a2 E371     		strb	r3, [r4, #7]
 4808              	.LVL746:
 4809              	.L476:
1902:.\FatFs/ff.c  **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 4810              		.loc 1 1902 0
 4811 00a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4812 00a6 13F0400F 		tst	r3, #64
 4813 00aa 12D0     		beq	.L482
1903:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
 4814              		.loc 1 1903 0
 4815 00ac 2368     		ldr	r3, [r4]
 4816 00ae 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4817 00b0 5946     		mov	r1, fp
 4818 00b2 A269     		ldr	r2, [r4, #24]
 4819 00b4 0123     		movs	r3, #1
 4820 00b6 FFF7FEFF 		bl	disk_write
 4821              	.LVL747:
 4822 00ba 30B1     		cbz	r0, .L483
1904:.\FatFs/ff.c  **** 				fp->flag &= ~FA__DIRTY;
 4823              		.loc 1 1904 0
 4824 00bc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4825 00be 63F07F03 		orn	r3, r3, #127
 4826 00c2 A371     		strb	r3, [r4, #6]
 4827 00c4 0120     		movs	r0, #1
 4828 00c6 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4829              	.LVL748:
 4830              	.L483:
1905:.\FatFs/ff.c  **** 			}
 4831              		.loc 1 1905 0
 4832 00ca A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4833 00cc 23F04003 		bic	r3, r3, #64
 4834 00d0 A371     		strb	r3, [r4, #6]
 4835              	.L482:
1908:.\FatFs/ff.c  **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4836              		.loc 1 1908 0
 4837 00d2 D4F800A0 		ldr	r10, [r4]
 4838 00d6 5046     		mov	r0, r10
 4839 00d8 6169     		ldr	r1, [r4, #20]
 4840 00da FFF7FEFF 		bl	clust2sect
 4841              	.LVL749:
1909:.\FatFs/ff.c  **** 			sect += fp->csect;
 4842              		.loc 1 1909 0
 4843 00de 8146     		mov	r9, r0
 4844 00e0 30B9     		cbnz	r0, .L484
1909:.\FatFs/ff.c  **** 			sect += fp->csect;
 4845              		.loc 1 1909 0 is_stmt 0 discriminator 1
 4846 00e2 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4847 00e4 63F07F03 		orn	r3, r3, #127
 4848 00e8 A371     		strb	r3, [r4, #6]
 4849 00ea 0220     		movs	r0, #2
 4850              	.LVL750:
 4851 00ec BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4852              	.LVL751:
 4853              	.L484:
1910:.\FatFs/ff.c  **** 			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
 4854              		.loc 1 1910 0 is_stmt 1
 4855 00f0 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 4856 00f2 9944     		add	r9, r9, r3
 4857              	.LVL752:
1912:.\FatFs/ff.c  **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 4858              		.loc 1 1912 0
 4859 00f4 750A     		lsrs	r5, r6, #9
 4860              	.LVL753:
 4861 00f6 29D0     		beq	.L485
1913:.\FatFs/ff.c  **** 					cc = fp->fs->csize - fp->csect;
 4862              		.loc 1 1913 0
 4863 00f8 9AF80220 		ldrb	r2, [r10, #2]	@ zero_extendqisi2
 4864 00fc E918     		adds	r1, r5, r3
 4865 00fe 9142     		cmp	r1, r2
1914:.\FatFs/ff.c  **** 				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
 4866              		.loc 1 1914 0
 4867 0100 88BF     		it	hi
 4868 0102 D51A     		subhi	r5, r2, r3
 4869              	.LVL754:
1915:.\FatFs/ff.c  **** 					ABORT(fp->fs, FR_DISK_ERR);
 4870              		.loc 1 1915 0
 4871 0104 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 4872 0108 4146     		mov	r1, r8
 4873 010a 4A46     		mov	r2, r9
 4874 010c EBB2     		uxtb	r3, r5
 4875 010e FFF7FEFF 		bl	disk_write
 4876              	.LVL755:
 4877 0112 30B1     		cbz	r0, .L487
1916:.\FatFs/ff.c  **** #if _FS_TINY
 4878              		.loc 1 1916 0
 4879 0114 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4880 0116 63F07F03 		orn	r3, r3, #127
 4881 011a A371     		strb	r3, [r4, #6]
 4882 011c 0120     		movs	r0, #1
 4883 011e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4884              	.LVL756:
 4885              	.L487:
1923:.\FatFs/ff.c  **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 4886              		.loc 1 1923 0
 4887 0122 A169     		ldr	r1, [r4, #24]
 4888 0124 C9EB0101 		rsb	r1, r9, r1
 4889 0128 8D42     		cmp	r5, r1
 4890 012a 0AD9     		bls	.L488
1924:.\FatFs/ff.c  **** 					fp->flag &= ~FA__DIRTY;
 4891              		.loc 1 1924 0
 4892 012c 5846     		mov	r0, fp
 4893 012e 08EB4121 		add	r1, r8, r1, lsl #9
 4894 0132 4FF40072 		mov	r2, #512
 4895 0136 FFF7FEFF 		bl	mem_cpy
 4896              	.LVL757:
1925:.\FatFs/ff.c  **** 				}
 4897              		.loc 1 1925 0
 4898 013a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4899 013c 23F04003 		bic	r3, r3, #64
 4900 0140 A371     		strb	r3, [r4, #6]
 4901              	.L488:
1928:.\FatFs/ff.c  **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 4902              		.loc 1 1928 0
 4903 0142 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 4904 0144 2B44     		add	r3, r3, r5
 4905 0146 E371     		strb	r3, [r4, #7]
1929:.\FatFs/ff.c  **** 				continue;
 4906              		.loc 1 1929 0
 4907 0148 6D02     		lsls	r5, r5, #9
 4908              	.LVL758:
1930:.\FatFs/ff.c  **** 			}
 4909              		.loc 1 1930 0
 4910 014a 2CE0     		b	.L489
 4911              	.LVL759:
 4912              	.L485:
1938:.\FatFs/ff.c  **** 				if (fp->fptr < fp->fsize &&
 4913              		.loc 1 1938 0
 4914 014c A369     		ldr	r3, [r4, #24]
 4915 014e 4B45     		cmp	r3, r9
 4916 0150 12D0     		beq	.L490
1939:.\FatFs/ff.c  **** 					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 4917              		.loc 1 1939 0
 4918 0152 A268     		ldr	r2, [r4, #8]
 4919 0154 E368     		ldr	r3, [r4, #12]
 4920 0156 9A42     		cmp	r2, r3
 4921 0158 0ED2     		bcs	.L490
 4922              		.loc 1 1940 0 discriminator 1
 4923 015a 9AF80100 		ldrb	r0, [r10, #1]	@ zero_extendqisi2
 4924 015e 5946     		mov	r1, fp
 4925 0160 4A46     		mov	r2, r9
 4926 0162 0123     		movs	r3, #1
 4927 0164 FFF7FEFF 		bl	disk_read
 4928              	.LVL760:
1939:.\FatFs/ff.c  **** 					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 4929              		.loc 1 1939 0 discriminator 1
 4930 0168 30B1     		cbz	r0, .L490
1941:.\FatFs/ff.c  **** 						ABORT(fp->fs, FR_DISK_ERR);
 4931              		.loc 1 1941 0
 4932 016a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4933 016c 63F07F03 		orn	r3, r3, #127
 4934 0170 A371     		strb	r3, [r4, #6]
 4935 0172 0120     		movs	r0, #1
 4936 0174 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4937              	.LVL761:
 4938              	.L490:
1942:.\FatFs/ff.c  **** 			}
1943:.\FatFs/ff.c  **** #endif
1944:.\FatFs/ff.c  **** 			fp->dsect = sect;
 4939              		.loc 1 1944 0
 4940 0178 C4F81890 		str	r9, [r4, #24]
1945:.\FatFs/ff.c  **** 			fp->csect++;							/* Next sector address in the cluster */
 4941              		.loc 1 1945 0
 4942 017c E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 4943 017e 0133     		adds	r3, r3, #1
 4944 0180 E371     		strb	r3, [r4, #7]
 4945              	.LVL762:
 4946              	.L475:
1946:.\FatFs/ff.c  **** 		}
1947:.\FatFs/ff.c  **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 4947              		.loc 1 1947 0
 4948 0182 A068     		ldr	r0, [r4, #8]
 4949 0184 C0F30800 		ubfx	r0, r0, #0, #9
 4950 0188 C0F50075 		rsb	r5, r0, #512
 4951              	.LVL763:
 4952 018c B542     		cmp	r5, r6
 4953 018e 28BF     		it	cs
 4954 0190 3546     		movcs	r5, r6
 4955              	.LVL764:
1948:.\FatFs/ff.c  **** 		if (wcnt > btw) wcnt = btw;
1949:.\FatFs/ff.c  **** #if _FS_TINY
1950:.\FatFs/ff.c  **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
1951:.\FatFs/ff.c  **** 			ABORT(fp->fs, FR_DISK_ERR);
1952:.\FatFs/ff.c  **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
1953:.\FatFs/ff.c  **** 		fp->fs->wflag = 1;
1954:.\FatFs/ff.c  **** #else
1955:.\FatFs/ff.c  **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 4956              		.loc 1 1955 0
 4957 0192 2044     		add	r0, r0, r4
 4958 0194 2430     		adds	r0, r0, #36
 4959 0196 4146     		mov	r1, r8
 4960 0198 2A46     		mov	r2, r5
 4961 019a FFF7FEFF 		bl	mem_cpy
 4962              	.LVL765:
1956:.\FatFs/ff.c  **** 		fp->flag |= FA__DIRTY;
 4963              		.loc 1 1956 0
 4964 019e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4965 01a0 43F04003 		orr	r3, r3, #64
 4966 01a4 A371     		strb	r3, [r4, #6]
 4967              	.L489:
1882:.\FatFs/ff.c  **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 4968              		.loc 1 1882 0
 4969 01a6 A844     		add	r8, r8, r5
 4970              	.LVL766:
 4971 01a8 A368     		ldr	r3, [r4, #8]
 4972 01aa 2B44     		add	r3, r3, r5
 4973 01ac A360     		str	r3, [r4, #8]
 4974 01ae 3B68     		ldr	r3, [r7]
 4975 01b0 2B44     		add	r3, r3, r5
 4976 01b2 3B60     		str	r3, [r7]
 4977              	.LVL767:
1881:.\FatFs/ff.c  **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 4978              		.loc 1 1881 0
 4979 01b4 761B     		subs	r6, r6, r5
 4980              	.LVL768:
 4981 01b6 7FF444AF 		bne	.L496
 4982              	.LVL769:
 4983              	.L474:
1957:.\FatFs/ff.c  **** #endif
1958:.\FatFs/ff.c  **** 	}
1959:.\FatFs/ff.c  **** 
1960:.\FatFs/ff.c  **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 4984              		.loc 1 1960 0
 4985 01ba A368     		ldr	r3, [r4, #8]
 4986 01bc E268     		ldr	r2, [r4, #12]
 4987 01be 9342     		cmp	r3, r2
 4988 01c0 88BF     		it	hi
 4989 01c2 E360     		strhi	r3, [r4, #12]
1961:.\FatFs/ff.c  **** 	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
 4990              		.loc 1 1961 0
 4991 01c4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4992 01c6 43F02003 		orr	r3, r3, #32
 4993 01ca A371     		strb	r3, [r4, #6]
1962:.\FatFs/ff.c  **** 
1963:.\FatFs/ff.c  **** 	LEAVE_FF(fp->fs, FR_OK);
 4994              		.loc 1 1963 0
 4995 01cc 0020     		movs	r0, #0
 4996 01ce BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4997              	.LVL770:
 4998              	.L493:
 4999 01d2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5000              	.LVL771:
 5001              	.L494:
1876:.\FatFs/ff.c  **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 5002              		.loc 1 1876 0
 5003 01d6 0220     		movs	r0, #2
 5004              	.LVL772:
 5005 01d8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5006              	.LVL773:
 5007              	.L495:
1878:.\FatFs/ff.c  **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 5008              		.loc 1 1878 0
 5009 01dc 0720     		movs	r0, #7
 5010              	.LVL774:
1964:.\FatFs/ff.c  **** }
 5011              		.loc 1 1964 0
 5012 01de BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5013              		.cfi_endproc
 5014              	.LFE60:
 5016 01e2 00BF     		.section	.text.f_sync,"ax",%progbits
 5017              		.align	2
 5018              		.global	f_sync
 5019              		.thumb
 5020              		.thumb_func
 5022              	f_sync:
 5023              	.LFB61:
1965:.\FatFs/ff.c  **** 
1966:.\FatFs/ff.c  **** 
1967:.\FatFs/ff.c  **** 
1968:.\FatFs/ff.c  **** 
1969:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1970:.\FatFs/ff.c  **** /* Synchronize the File Object                                           */
1971:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
1972:.\FatFs/ff.c  **** 
1973:.\FatFs/ff.c  **** FRESULT f_sync (
1974:.\FatFs/ff.c  **** 	FIL *fp		/* Pointer to the file object */
1975:.\FatFs/ff.c  **** )
1976:.\FatFs/ff.c  **** {
 5024              		.loc 1 1976 0
 5025              		.cfi_startproc
 5026              		@ args = 0, pretend = 0, frame = 0
 5027              		@ frame_needed = 0, uses_anonymous_args = 0
 5028              	.LVL775:
 5029 0000 38B5     		push	{r3, r4, r5, lr}
 5030              	.LCFI35:
 5031              		.cfi_def_cfa_offset 16
 5032              		.cfi_offset 3, -16
 5033              		.cfi_offset 4, -12
 5034              		.cfi_offset 5, -8
 5035              		.cfi_offset 14, -4
 5036 0002 0446     		mov	r4, r0
1977:.\FatFs/ff.c  **** 	FRESULT res;
1978:.\FatFs/ff.c  **** 	DWORD tim;
1979:.\FatFs/ff.c  **** 	BYTE *dir;
1980:.\FatFs/ff.c  **** 
1981:.\FatFs/ff.c  **** 
1982:.\FatFs/ff.c  **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5037              		.loc 1 1982 0
 5038 0004 0068     		ldr	r0, [r0]
 5039              	.LVL776:
 5040 0006 A188     		ldrh	r1, [r4, #4]
 5041 0008 FFF7FEFF 		bl	validate
 5042              	.LVL777:
1983:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 5043              		.loc 1 1983 0
 5044 000c 0028     		cmp	r0, #0
 5045 000e 32D1     		bne	.L502
1984:.\FatFs/ff.c  **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 5046              		.loc 1 1984 0
 5047 0010 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5048 0012 13F0200F 		tst	r3, #32
 5049 0016 2FD0     		beq	.L503
1985:.\FatFs/ff.c  **** #if !_FS_TINY	/* Write-back dirty buffer */
1986:.\FatFs/ff.c  **** 			if (fp->flag & FA__DIRTY) {
 5050              		.loc 1 1986 0
 5051 0018 13F0400F 		tst	r3, #64
 5052 001c 0CD0     		beq	.L501
1987:.\FatFs/ff.c  **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 5053              		.loc 1 1987 0
 5054 001e 2146     		mov	r1, r4
 5055 0020 51F8243B 		ldr	r3, [r1], #36
 5056 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5057              	.LVL778:
 5058 0026 A269     		ldr	r2, [r4, #24]
 5059 0028 0123     		movs	r3, #1
 5060 002a FFF7FEFF 		bl	disk_write
 5061              	.LVL779:
 5062 002e 28BB     		cbnz	r0, .L504
1988:.\FatFs/ff.c  **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
1989:.\FatFs/ff.c  **** 				fp->flag &= ~FA__DIRTY;
 5063              		.loc 1 1989 0
 5064 0030 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5065 0032 23F04003 		bic	r3, r3, #64
 5066 0036 A371     		strb	r3, [r4, #6]
 5067              	.L501:
1990:.\FatFs/ff.c  **** 			}
1991:.\FatFs/ff.c  **** #endif
1992:.\FatFs/ff.c  **** 			/* Update the directory entry */
1993:.\FatFs/ff.c  **** 			res = move_window(fp->fs, fp->dir_sect);
 5068              		.loc 1 1993 0
 5069 0038 2068     		ldr	r0, [r4]
 5070 003a E169     		ldr	r1, [r4, #28]
 5071 003c FFF7FEFF 		bl	move_window
 5072              	.LVL780:
1994:.\FatFs/ff.c  **** 			if (res == FR_OK) {
 5073              		.loc 1 1994 0
 5074 0040 F0B9     		cbnz	r0, .L505
1995:.\FatFs/ff.c  **** 				dir = fp->dir_ptr;
 5075              		.loc 1 1995 0
 5076 0042 256A     		ldr	r5, [r4, #32]
 5077              	.LVL781:
1996:.\FatFs/ff.c  **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 5078              		.loc 1 1996 0
 5079 0044 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 5080 0046 43F02003 		orr	r3, r3, #32
 5081 004a EB72     		strb	r3, [r5, #11]
1997:.\FatFs/ff.c  **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 5082              		.loc 1 1997 0
 5083 004c E368     		ldr	r3, [r4, #12]
 5084 004e EB61     		str	r3, [r5, #28]
1998:.\FatFs/ff.c  **** 				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
 5085              		.loc 1 1998 0
 5086 0050 2369     		ldr	r3, [r4, #16]
 5087 0052 6B83     		strh	r3, [r5, #26]	@ movhi
1999:.\FatFs/ff.c  **** 				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
 5088              		.loc 1 1999 0
 5089 0054 638A     		ldrh	r3, [r4, #18]
 5090 0056 AB82     		strh	r3, [r5, #20]	@ movhi
2000:.\FatFs/ff.c  **** 				tim = get_fattime();			/* Updated time */
 5091              		.loc 1 2000 0
 5092 0058 FFF7FEFF 		bl	get_fattime
 5093              	.LVL782:
2001:.\FatFs/ff.c  **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5094              		.loc 1 2001 0
 5095 005c C5F81600 		str	r0, [r5, #22]
2002:.\FatFs/ff.c  **** 				fp->flag &= ~FA__WRITTEN;
 5096              		.loc 1 2002 0
 5097 0060 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5098 0062 23F02003 		bic	r3, r3, #32
 5099 0066 A371     		strb	r3, [r4, #6]
2003:.\FatFs/ff.c  **** 				fp->fs->wflag = 1;
 5100              		.loc 1 2003 0
 5101 0068 2368     		ldr	r3, [r4]
 5102 006a 0122     		movs	r2, #1
 5103 006c 1A71     		strb	r2, [r3, #4]
2004:.\FatFs/ff.c  **** 				res = sync(fp->fs);
 5104              		.loc 1 2004 0
 5105 006e 2068     		ldr	r0, [r4]
 5106              	.LVL783:
 5107 0070 FFF7FEFF 		bl	sync
 5108              	.LVL784:
 5109 0074 38BD     		pop	{r3, r4, r5, pc}
 5110              	.LVL785:
 5111              	.L502:
 5112 0076 38BD     		pop	{r3, r4, r5, pc}
 5113              	.LVL786:
 5114              	.L503:
1982:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 5115              		.loc 1 1982 0
 5116 0078 0020     		movs	r0, #0
 5117              	.LVL787:
 5118 007a 38BD     		pop	{r3, r4, r5, pc}
 5119              	.LVL788:
 5120              	.L504:
1988:.\FatFs/ff.c  **** 				fp->flag &= ~FA__DIRTY;
 5121              		.loc 1 1988 0
 5122 007c 0120     		movs	r0, #1
 5123 007e 38BD     		pop	{r3, r4, r5, pc}
 5124              	.LVL789:
 5125              	.L505:
2005:.\FatFs/ff.c  **** 			}
2006:.\FatFs/ff.c  **** 		}
2007:.\FatFs/ff.c  **** 	}
2008:.\FatFs/ff.c  **** 
2009:.\FatFs/ff.c  **** 	LEAVE_FF(fp->fs, res);
2010:.\FatFs/ff.c  **** }
 5126              		.loc 1 2010 0
 5127 0080 38BD     		pop	{r3, r4, r5, pc}
 5128              		.cfi_endproc
 5129              	.LFE61:
 5131 0082 00BF     		.section	.text.f_close,"ax",%progbits
 5132              		.align	2
 5133              		.global	f_close
 5134              		.thumb
 5135              		.thumb_func
 5137              	f_close:
 5138              	.LFB62:
2011:.\FatFs/ff.c  **** 
2012:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
2013:.\FatFs/ff.c  **** 
2014:.\FatFs/ff.c  **** 
2015:.\FatFs/ff.c  **** 
2016:.\FatFs/ff.c  **** 
2017:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2018:.\FatFs/ff.c  **** /* Close File                                                            */
2019:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2020:.\FatFs/ff.c  **** 
2021:.\FatFs/ff.c  **** FRESULT f_close (
2022:.\FatFs/ff.c  **** 	FIL *fp		/* Pointer to the file object to be closed */
2023:.\FatFs/ff.c  **** )
2024:.\FatFs/ff.c  **** {
 5139              		.loc 1 2024 0
 5140              		.cfi_startproc
 5141              		@ args = 0, pretend = 0, frame = 0
 5142              		@ frame_needed = 0, uses_anonymous_args = 0
 5143              	.LVL790:
 5144 0000 10B5     		push	{r4, lr}
 5145              	.LCFI36:
 5146              		.cfi_def_cfa_offset 8
 5147              		.cfi_offset 4, -8
 5148              		.cfi_offset 14, -4
 5149 0002 0446     		mov	r4, r0
2025:.\FatFs/ff.c  **** 	FRESULT res;
2026:.\FatFs/ff.c  **** 
2027:.\FatFs/ff.c  **** 
2028:.\FatFs/ff.c  **** #if _FS_READONLY
2029:.\FatFs/ff.c  ****     FATFS *fs = fp->fs; /* Patch for FatFs R0.07e Jan 15, 2010 */
2030:.\FatFs/ff.c  **** 	res = validate(fp->fs, fp->id);
2031:.\FatFs/ff.c  **** 	if (res == FR_OK) fp->fs = NULL;
2032:.\FatFs/ff.c  **** 	/* Patch(ed out): LEAVE_FF(fp->fs, res); */
2033:.\FatFs/ff.c  **** 	LEAVE_FF(fs, res); /* Patch for FatFs R0.07e Jan 15, 2010 */
2034:.\FatFs/ff.c  **** #else
2035:.\FatFs/ff.c  **** 	res = f_sync(fp);
 5150              		.loc 1 2035 0
 5151 0004 FFF7FEFF 		bl	f_sync
 5152              	.LVL791:
2036:.\FatFs/ff.c  **** 	if (res == FR_OK) fp->fs = NULL;
 5153              		.loc 1 2036 0
 5154 0008 0346     		mov	r3, r0
 5155 000a 08B9     		cbnz	r0, .L508
 5156              		.loc 1 2036 0 is_stmt 0 discriminator 1
 5157 000c 0022     		movs	r2, #0
 5158 000e 2260     		str	r2, [r4]
 5159              	.L508:
2037:.\FatFs/ff.c  **** 	return res;
2038:.\FatFs/ff.c  **** #endif
2039:.\FatFs/ff.c  **** }
 5160              		.loc 1 2039 0 is_stmt 1
 5161 0010 1846     		mov	r0, r3
 5162              	.LVL792:
 5163 0012 10BD     		pop	{r4, pc}
 5164              		.cfi_endproc
 5165              	.LFE62:
 5167              		.section	.text.f_lseek,"ax",%progbits
 5168              		.align	2
 5169              		.global	f_lseek
 5170              		.thumb
 5171              		.thumb_func
 5173              	f_lseek:
 5174              	.LFB63:
2040:.\FatFs/ff.c  **** 
2041:.\FatFs/ff.c  **** 
2042:.\FatFs/ff.c  **** 
2043:.\FatFs/ff.c  **** 
2044:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2045:.\FatFs/ff.c  **** /* Change Current Drive/Directory                                        */
2046:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2047:.\FatFs/ff.c  **** 
2048:.\FatFs/ff.c  **** #if _FS_RPATH
2049:.\FatFs/ff.c  **** 
2050:.\FatFs/ff.c  **** FRESULT f_chdrive (
2051:.\FatFs/ff.c  **** 	BYTE drv		/* Drive number */
2052:.\FatFs/ff.c  **** )
2053:.\FatFs/ff.c  **** {
2054:.\FatFs/ff.c  **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
2055:.\FatFs/ff.c  **** 
2056:.\FatFs/ff.c  **** 	Drive = drv;
2057:.\FatFs/ff.c  **** 
2058:.\FatFs/ff.c  **** 	return FR_OK;
2059:.\FatFs/ff.c  **** }
2060:.\FatFs/ff.c  **** 
2061:.\FatFs/ff.c  **** 
2062:.\FatFs/ff.c  **** 
2063:.\FatFs/ff.c  **** 
2064:.\FatFs/ff.c  **** FRESULT f_chdir (
2065:.\FatFs/ff.c  **** 	const XCHAR *path	/* Pointer to the directory path */
2066:.\FatFs/ff.c  **** )
2067:.\FatFs/ff.c  **** {
2068:.\FatFs/ff.c  **** 	FRESULT res;
2069:.\FatFs/ff.c  **** 	DIR dj;
2070:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2071:.\FatFs/ff.c  **** 	BYTE *dir;
2072:.\FatFs/ff.c  **** 
2073:.\FatFs/ff.c  **** 
2074:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, 0);
2075:.\FatFs/ff.c  **** 	if (res == FR_OK) {
2076:.\FatFs/ff.c  **** 		INITBUF(dj, sfn, lfn);
2077:.\FatFs/ff.c  **** 		res = follow_path(&dj, path);		/* Follow the file path */
2078:.\FatFs/ff.c  **** 		if (res == FR_OK) {					/* Follow completed */
2079:.\FatFs/ff.c  **** 			dir = dj.dir;					/* Pointer to the entry */
2080:.\FatFs/ff.c  **** 			if (!dir) {
2081:.\FatFs/ff.c  **** 				dj.fs->cdir = 0;			/* No entry (root dir) */
2082:.\FatFs/ff.c  **** 			} else {
2083:.\FatFs/ff.c  **** 				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
2084:.\FatFs/ff.c  **** 					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2085:.\FatFs/ff.c  **** 				else
2086:.\FatFs/ff.c  **** 					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
2087:.\FatFs/ff.c  **** 			}
2088:.\FatFs/ff.c  **** 		}
2089:.\FatFs/ff.c  **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2090:.\FatFs/ff.c  **** 	}
2091:.\FatFs/ff.c  **** 
2092:.\FatFs/ff.c  **** 	LEAVE_FF(dj.fs, res);
2093:.\FatFs/ff.c  **** }
2094:.\FatFs/ff.c  **** 
2095:.\FatFs/ff.c  **** #endif
2096:.\FatFs/ff.c  **** 
2097:.\FatFs/ff.c  **** 
2098:.\FatFs/ff.c  **** 
2099:.\FatFs/ff.c  **** #if _FS_MINIMIZE <= 2
2100:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2101:.\FatFs/ff.c  **** /* Seek File R/W Pointer                                                 */
2102:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2103:.\FatFs/ff.c  **** 
2104:.\FatFs/ff.c  **** FRESULT f_lseek (
2105:.\FatFs/ff.c  **** 	FIL *fp,		/* Pointer to the file object */
2106:.\FatFs/ff.c  **** 	DWORD ofs		/* File pointer from top of file */
2107:.\FatFs/ff.c  **** )
2108:.\FatFs/ff.c  **** {
 5175              		.loc 1 2108 0
 5176              		.cfi_startproc
 5177              		@ args = 0, pretend = 0, frame = 0
 5178              		@ frame_needed = 0, uses_anonymous_args = 0
 5179              	.LVL793:
 5180 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5181              	.LCFI37:
 5182              		.cfi_def_cfa_offset 24
 5183              		.cfi_offset 3, -24
 5184              		.cfi_offset 4, -20
 5185              		.cfi_offset 5, -16
 5186              		.cfi_offset 6, -12
 5187              		.cfi_offset 7, -8
 5188              		.cfi_offset 14, -4
 5189 0002 0446     		mov	r4, r0
 5190 0004 0D46     		mov	r5, r1
2109:.\FatFs/ff.c  **** 	FRESULT res;
2110:.\FatFs/ff.c  **** 	DWORD clst, bcs, nsect, ifptr;
2111:.\FatFs/ff.c  **** 
2112:.\FatFs/ff.c  **** 
2113:.\FatFs/ff.c  **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5191              		.loc 1 2113 0
 5192 0006 0068     		ldr	r0, [r0]
 5193              	.LVL794:
 5194 0008 A188     		ldrh	r1, [r4, #4]
 5195              	.LVL795:
 5196 000a FFF7FEFF 		bl	validate
 5197              	.LVL796:
2114:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 5198              		.loc 1 2114 0
 5199 000e 0028     		cmp	r0, #0
 5200 0010 40F0C580 		bne	.L531
2115:.\FatFs/ff.c  **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 5201              		.loc 1 2115 0
 5202 0014 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5203 0016 13F0800F 		tst	r3, #128
 5204 001a 40F0C180 		bne	.L532
2116:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2117:.\FatFs/ff.c  **** 	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 5205              		.loc 1 2117 0
 5206 001e E268     		ldr	r2, [r4, #12]
 5207 0020 AA42     		cmp	r2, r5
 5208 0022 05D2     		bcs	.L512
2118:.\FatFs/ff.c  **** #if !_FS_READONLY
2119:.\FatFs/ff.c  **** 		 && !(fp->flag & FA_WRITE)
 5209              		.loc 1 2119 0
 5210 0024 03F00203 		and	r3, r3, #2
 5211 0028 DBB2     		uxtb	r3, r3
2120:.\FatFs/ff.c  **** #endif
2121:.\FatFs/ff.c  **** 		) ofs = fp->fsize;
 5212              		.loc 1 2121 0
 5213 002a 002B     		cmp	r3, #0
 5214 002c 08BF     		it	eq
 5215 002e 1546     		moveq	r5, r2
 5216              	.LVL797:
 5217              	.L512:
2122:.\FatFs/ff.c  **** 
2123:.\FatFs/ff.c  **** 	ifptr = fp->fptr;
 5218              		.loc 1 2123 0
 5219 0030 A368     		ldr	r3, [r4, #8]
 5220              	.LVL798:
2124:.\FatFs/ff.c  **** 	fp->fptr = nsect = 0; fp->csect = 255;
 5221              		.loc 1 2124 0
 5222 0032 0022     		movs	r2, #0
 5223 0034 A260     		str	r2, [r4, #8]
 5224 0036 FF22     		movs	r2, #255
 5225 0038 E271     		strb	r2, [r4, #7]
2125:.\FatFs/ff.c  **** 	if (ofs > 0) {
 5226              		.loc 1 2125 0
 5227 003a 002D     		cmp	r5, #0
 5228 003c 72D0     		beq	.L533
2126:.\FatFs/ff.c  **** 		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 5229              		.loc 1 2126 0
 5230 003e 2068     		ldr	r0, [r4]
 5231              	.LVL799:
 5232 0040 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 5233 0042 7602     		lsls	r6, r6, #9
 5234              	.LVL800:
2127:.\FatFs/ff.c  **** 		if (ifptr > 0 &&
 5235              		.loc 1 2127 0
 5236 0044 6BB1     		cbz	r3, .L514
2128:.\FatFs/ff.c  **** 			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5237              		.loc 1 2128 0 discriminator 1
 5238 0046 013B     		subs	r3, r3, #1
 5239              	.LVL801:
 5240 0048 6A1E     		subs	r2, r5, #1
 5241 004a B2FBF6F2 		udiv	r2, r2, r6
 5242 004e B3FBF6F1 		udiv	r1, r3, r6
2127:.\FatFs/ff.c  **** 		if (ifptr > 0 &&
 5243              		.loc 1 2127 0 discriminator 1
 5244 0052 8A42     		cmp	r2, r1
 5245 0054 05D3     		bcc	.L514
2129:.\FatFs/ff.c  **** 			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 5246              		.loc 1 2129 0
 5247 0056 7242     		negs	r2, r6
 5248 0058 1340     		ands	r3, r3, r2
 5249              	.LVL802:
 5250 005a A360     		str	r3, [r4, #8]
2130:.\FatFs/ff.c  **** 			ofs -= fp->fptr;
 5251              		.loc 1 2130 0
 5252 005c ED1A     		subs	r5, r5, r3
 5253              	.LVL803:
2131:.\FatFs/ff.c  **** 			clst = fp->curr_clust;
 5254              		.loc 1 2131 0
 5255 005e 6169     		ldr	r1, [r4, #20]
 5256              	.LVL804:
 5257 0060 17E0     		b	.L515
 5258              	.LVL805:
 5259              	.L514:
2132:.\FatFs/ff.c  **** 		} else {									/* When seek to back cluster, */
2133:.\FatFs/ff.c  **** 			clst = fp->org_clust;					/* start from the first cluster */
 5260              		.loc 1 2133 0
 5261 0062 2169     		ldr	r1, [r4, #16]
 5262              	.LVL806:
2134:.\FatFs/ff.c  **** #if !_FS_READONLY
2135:.\FatFs/ff.c  **** 			if (clst == 0) {						/* If no cluster chain, create a new chain */
 5263              		.loc 1 2135 0
 5264 0064 A1B9     		cbnz	r1, .L516
2136:.\FatFs/ff.c  **** 				clst = create_chain(fp->fs, 0);
 5265              		.loc 1 2136 0
 5266 0066 FFF7FEFF 		bl	create_chain
 5267              	.LVL807:
 5268 006a 0146     		mov	r1, r0
 5269              	.LVL808:
2137:.\FatFs/ff.c  **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 5270              		.loc 1 2137 0
 5271 006c 0128     		cmp	r0, #1
 5272 006e 05D1     		bne	.L517
 5273              		.loc 1 2137 0 is_stmt 0 discriminator 1
 5274 0070 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5275 0072 63F07F03 		orn	r3, r3, #127
 5276 0076 A371     		strb	r3, [r4, #6]
 5277 0078 0220     		movs	r0, #2
 5278              	.LVL809:
 5279 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5280              	.LVL810:
 5281              	.L517:
2138:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5282              		.loc 1 2138 0 is_stmt 1
 5283 007c B0F1FF3F 		cmp	r0, #-1
 5284 0080 05D1     		bne	.L518
 5285              		.loc 1 2138 0 is_stmt 0 discriminator 1
 5286 0082 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5287 0084 63F07F03 		orn	r3, r3, #127
 5288 0088 A371     		strb	r3, [r4, #6]
 5289 008a 0120     		movs	r0, #1
 5290              	.LVL811:
 5291 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5292              	.LVL812:
 5293              	.L518:
2139:.\FatFs/ff.c  **** 				fp->org_clust = clst;
 5294              		.loc 1 2139 0 is_stmt 1
 5295 008e 2061     		str	r0, [r4, #16]
 5296              	.LVL813:
 5297              	.L516:
2140:.\FatFs/ff.c  **** 			}
2141:.\FatFs/ff.c  **** #endif
2142:.\FatFs/ff.c  **** 			fp->curr_clust = clst;
 5298              		.loc 1 2142 0
 5299 0090 6161     		str	r1, [r4, #20]
 5300              	.L515:
2143:.\FatFs/ff.c  **** 		}
2144:.\FatFs/ff.c  **** 		if (clst != 0) {
 5301              		.loc 1 2144 0
 5302 0092 0029     		cmp	r1, #0
 5303 0094 48D0     		beq	.L534
2145:.\FatFs/ff.c  **** 			while (ofs > bcs) {						/* Cluster following loop */
 5304              		.loc 1 2145 0
 5305 0096 B542     		cmp	r5, r6
 5306 0098 2BD9     		bls	.L519
 5307              	.L538:
2146:.\FatFs/ff.c  **** #if !_FS_READONLY
2147:.\FatFs/ff.c  **** 				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 5308              		.loc 1 2147 0
 5309 009a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5310 009c 13F0020F 		tst	r3, #2
 5311 00a0 05D0     		beq	.L520
2148:.\FatFs/ff.c  **** 					clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 5312              		.loc 1 2148 0
 5313 00a2 2068     		ldr	r0, [r4]
 5314 00a4 FFF7FEFF 		bl	create_chain
 5315              	.LVL814:
2149:.\FatFs/ff.c  **** 					if (clst == 0) {				/* When disk gets full, clip file size */
 5316              		.loc 1 2149 0
 5317 00a8 0146     		mov	r1, r0
 5318 00aa 20B9     		cbnz	r0, .L521
 5319 00ac 20E0     		b	.L535
 5320              	.LVL815:
 5321              	.L520:
2150:.\FatFs/ff.c  **** 						ofs = bcs; break;
2151:.\FatFs/ff.c  **** 					}
2152:.\FatFs/ff.c  **** 				} else
2153:.\FatFs/ff.c  **** #endif
2154:.\FatFs/ff.c  **** 					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 5322              		.loc 1 2154 0
 5323 00ae 2068     		ldr	r0, [r4]
 5324 00b0 FFF7FEFF 		bl	get_fat
 5325              	.LVL816:
 5326 00b4 0146     		mov	r1, r0
 5327              	.LVL817:
 5328              	.L521:
2155:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5329              		.loc 1 2155 0
 5330 00b6 B1F1FF3F 		cmp	r1, #-1
 5331 00ba 05D1     		bne	.L522
 5332              		.loc 1 2155 0 is_stmt 0 discriminator 1
 5333 00bc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5334 00be 63F07F03 		orn	r3, r3, #127
 5335 00c2 A371     		strb	r3, [r4, #6]
 5336 00c4 0120     		movs	r0, #1
 5337              	.LVL818:
 5338 00c6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5339              	.LVL819:
 5340              	.L522:
2156:.\FatFs/ff.c  **** 				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
 5341              		.loc 1 2156 0 is_stmt 1
 5342 00c8 0129     		cmp	r1, #1
 5343 00ca 03D9     		bls	.L523
 5344              		.loc 1 2156 0 is_stmt 0 discriminator 2
 5345 00cc 2368     		ldr	r3, [r4]
 5346 00ce DB69     		ldr	r3, [r3, #28]
 5347 00d0 9942     		cmp	r1, r3
 5348 00d2 05D3     		bcc	.L524
 5349              	.L523:
 5350              		.loc 1 2156 0 discriminator 3
 5351 00d4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5352 00d6 63F07F03 		orn	r3, r3, #127
 5353 00da A371     		strb	r3, [r4, #6]
 5354 00dc 0220     		movs	r0, #2
 5355              	.LVL820:
 5356 00de F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5357              	.LVL821:
 5358              	.L524:
2157:.\FatFs/ff.c  **** 				fp->curr_clust = clst;
 5359              		.loc 1 2157 0 is_stmt 1
 5360 00e0 6161     		str	r1, [r4, #20]
2158:.\FatFs/ff.c  **** 				fp->fptr += bcs;
 5361              		.loc 1 2158 0
 5362 00e2 A368     		ldr	r3, [r4, #8]
 5363 00e4 3344     		add	r3, r3, r6
 5364 00e6 A360     		str	r3, [r4, #8]
2159:.\FatFs/ff.c  **** 				ofs -= bcs;
 5365              		.loc 1 2159 0
 5366 00e8 AD1B     		subs	r5, r5, r6
 5367              	.LVL822:
2145:.\FatFs/ff.c  **** #if !_FS_READONLY
 5368              		.loc 1 2145 0
 5369 00ea AE42     		cmp	r6, r5
 5370 00ec D5D3     		bcc	.L538
 5371              	.LVL823:
 5372 00ee 00E0     		b	.L519
 5373              	.L535:
2150:.\FatFs/ff.c  **** 					}
 5374              		.loc 1 2150 0
 5375 00f0 3546     		mov	r5, r6
 5376              	.LVL824:
 5377              	.L519:
2160:.\FatFs/ff.c  **** 			}
2161:.\FatFs/ff.c  **** 			fp->fptr += ofs;
 5378              		.loc 1 2161 0
 5379 00f2 A368     		ldr	r3, [r4, #8]
 5380 00f4 2B44     		add	r3, r3, r5
 5381 00f6 A360     		str	r3, [r4, #8]
2162:.\FatFs/ff.c  **** 			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 5382              		.loc 1 2162 0
 5383 00f8 6F0A     		lsrs	r7, r5, #9
 5384 00fa FEB2     		uxtb	r6, r7
 5385              	.LVL825:
 5386 00fc E671     		strb	r6, [r4, #7]
2163:.\FatFs/ff.c  **** 			if (ofs % SS(fp->fs)) {
 5387              		.loc 1 2163 0
 5388 00fe C5F30805 		ubfx	r5, r5, #0, #9
 5389              	.LVL826:
 5390 0102 9DB1     		cbz	r5, .L536
2164:.\FatFs/ff.c  **** 				nsect = clust2sect(fp->fs, clst);	/* Current sector */
 5391              		.loc 1 2164 0
 5392 0104 2068     		ldr	r0, [r4]
 5393 0106 FFF7FEFF 		bl	clust2sect
 5394              	.LVL827:
2165:.\FatFs/ff.c  **** 				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 5395              		.loc 1 2165 0
 5396 010a 0546     		mov	r5, r0
 5397 010c 28B9     		cbnz	r0, .L526
 5398              		.loc 1 2165 0 is_stmt 0 discriminator 1
 5399 010e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5400 0110 63F07F03 		orn	r3, r3, #127
 5401 0114 A371     		strb	r3, [r4, #6]
 5402 0116 0220     		movs	r0, #2
 5403              	.LVL828:
 5404 0118 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5405              	.LVL829:
 5406              	.L526:
2166:.\FatFs/ff.c  **** 				nsect += fp->csect;
 5407              		.loc 1 2166 0 is_stmt 1
 5408 011a FFB2     		uxtb	r7, r7
 5409 011c 3D44     		add	r5, r5, r7
 5410              	.LVL830:
2167:.\FatFs/ff.c  **** 				fp->csect++;
 5411              		.loc 1 2167 0
 5412 011e 0136     		adds	r6, r6, #1
 5413 0120 E671     		strb	r6, [r4, #7]
 5414 0122 04E0     		b	.L513
 5415              	.LVL831:
 5416              	.L533:
2124:.\FatFs/ff.c  **** 	if (ofs > 0) {
 5417              		.loc 1 2124 0
 5418 0124 0025     		movs	r5, #0
 5419              	.LVL832:
 5420 0126 02E0     		b	.L513
 5421              	.LVL833:
 5422              	.L534:
 5423 0128 0025     		movs	r5, #0
 5424              	.LVL834:
 5425 012a 00E0     		b	.L513
 5426              	.LVL835:
 5427              	.L536:
 5428 012c 0025     		movs	r5, #0
 5429              	.LVL836:
 5430              	.L513:
2168:.\FatFs/ff.c  **** 			}
2169:.\FatFs/ff.c  **** 		}
2170:.\FatFs/ff.c  **** 	}
2171:.\FatFs/ff.c  **** 	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 5431              		.loc 1 2171 0
 5432 012e A368     		ldr	r3, [r4, #8]
 5433 0130 C3F30803 		ubfx	r3, r3, #0, #9
 5434 0134 43B3     		cbz	r3, .L527
 5435              		.loc 1 2171 0 is_stmt 0 discriminator 1
 5436 0136 A269     		ldr	r2, [r4, #24]
 5437 0138 AA42     		cmp	r2, r5
 5438 013a 25D0     		beq	.L527
2172:.\FatFs/ff.c  **** #if !_FS_TINY
2173:.\FatFs/ff.c  **** #if !_FS_READONLY
2174:.\FatFs/ff.c  **** 		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
 5439              		.loc 1 2174 0 is_stmt 1
 5440 013c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5441 013e 13F0400F 		tst	r3, #64
 5442 0142 11D0     		beq	.L528
2175:.\FatFs/ff.c  **** 			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 5443              		.loc 1 2175 0
 5444 0144 2146     		mov	r1, r4
 5445 0146 51F8243B 		ldr	r3, [r1], #36
 5446 014a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5447 014c 0123     		movs	r3, #1
 5448 014e FFF7FEFF 		bl	disk_write
 5449              	.LVL837:
 5450 0152 28B1     		cbz	r0, .L529
2176:.\FatFs/ff.c  **** 				ABORT(fp->fs, FR_DISK_ERR);
 5451              		.loc 1 2176 0
 5452 0154 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5453 0156 63F07F03 		orn	r3, r3, #127
 5454 015a A371     		strb	r3, [r4, #6]
 5455 015c 0120     		movs	r0, #1
 5456 015e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5457              	.LVL838:
 5458              	.L529:
2177:.\FatFs/ff.c  **** 			fp->flag &= ~FA__DIRTY;
 5459              		.loc 1 2177 0
 5460 0160 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5461 0162 23F04003 		bic	r3, r3, #64
 5462 0166 A371     		strb	r3, [r4, #6]
 5463              	.L528:
2178:.\FatFs/ff.c  **** 		}
2179:.\FatFs/ff.c  **** #endif
2180:.\FatFs/ff.c  **** 		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
 5464              		.loc 1 2180 0
 5465 0168 2146     		mov	r1, r4
 5466 016a 51F8243B 		ldr	r3, [r1], #36
 5467 016e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5468 0170 2A46     		mov	r2, r5
 5469 0172 0123     		movs	r3, #1
 5470 0174 FFF7FEFF 		bl	disk_read
 5471              	.LVL839:
 5472 0178 28B1     		cbz	r0, .L530
2181:.\FatFs/ff.c  **** 			ABORT(fp->fs, FR_DISK_ERR);
 5473              		.loc 1 2181 0
 5474 017a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5475 017c 63F07F03 		orn	r3, r3, #127
 5476 0180 A371     		strb	r3, [r4, #6]
 5477 0182 0120     		movs	r0, #1
 5478 0184 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5479              	.LVL840:
 5480              	.L530:
2182:.\FatFs/ff.c  **** #endif
2183:.\FatFs/ff.c  **** 		fp->dsect = nsect;
 5481              		.loc 1 2183 0
 5482 0186 A561     		str	r5, [r4, #24]
 5483              	.L527:
2184:.\FatFs/ff.c  **** 	}
2185:.\FatFs/ff.c  **** #if !_FS_READONLY
2186:.\FatFs/ff.c  **** 	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
 5484              		.loc 1 2186 0
 5485 0188 A368     		ldr	r3, [r4, #8]
 5486 018a E268     		ldr	r2, [r4, #12]
 5487 018c 9342     		cmp	r3, r2
 5488 018e 09D9     		bls	.L537
2187:.\FatFs/ff.c  **** 		fp->fsize = fp->fptr;
 5489              		.loc 1 2187 0
 5490 0190 E360     		str	r3, [r4, #12]
2188:.\FatFs/ff.c  **** 		fp->flag |= FA__WRITTEN;
 5491              		.loc 1 2188 0
 5492 0192 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5493 0194 43F02003 		orr	r3, r3, #32
 5494 0198 A371     		strb	r3, [r4, #6]
2189:.\FatFs/ff.c  **** 	}
2190:.\FatFs/ff.c  **** #endif
2191:.\FatFs/ff.c  **** 
2192:.\FatFs/ff.c  **** 	LEAVE_FF(fp->fs, res);
 5495              		.loc 1 2192 0
 5496 019a 0020     		movs	r0, #0
 5497 019c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5498              	.LVL841:
 5499              	.L531:
 5500 019e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5501              	.LVL842:
 5502              	.L532:
2116:.\FatFs/ff.c  **** 	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 5503              		.loc 1 2116 0
 5504 01a0 0220     		movs	r0, #2
 5505              	.LVL843:
 5506 01a2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5507              	.LVL844:
 5508              	.L537:
 5509              		.loc 1 2192 0
 5510 01a4 0020     		movs	r0, #0
2193:.\FatFs/ff.c  **** }
 5511              		.loc 1 2193 0
 5512 01a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5513              		.cfi_endproc
 5514              	.LFE63:
 5516              		.section	.text.f_opendir,"ax",%progbits
 5517              		.align	2
 5518              		.global	f_opendir
 5519              		.thumb
 5520              		.thumb_func
 5522              	f_opendir:
 5523              	.LFB64:
2194:.\FatFs/ff.c  **** 
2195:.\FatFs/ff.c  **** 
2196:.\FatFs/ff.c  **** 
2197:.\FatFs/ff.c  **** 
2198:.\FatFs/ff.c  **** #if _FS_MINIMIZE <= 1
2199:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2200:.\FatFs/ff.c  **** /* Create a Directroy Object                                             */
2201:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2202:.\FatFs/ff.c  **** 
2203:.\FatFs/ff.c  **** FRESULT f_opendir (
2204:.\FatFs/ff.c  **** 	DIR *dj,			/* Pointer to directory object to create */
2205:.\FatFs/ff.c  **** 	const XCHAR *path	/* Pointer to the directory path */
2206:.\FatFs/ff.c  **** )
2207:.\FatFs/ff.c  **** {
 5524              		.loc 1 2207 0
 5525              		.cfi_startproc
 5526              		@ args = 0, pretend = 0, frame = 24
 5527              		@ frame_needed = 0, uses_anonymous_args = 0
 5528              	.LVL845:
 5529 0000 10B5     		push	{r4, lr}
 5530              	.LCFI38:
 5531              		.cfi_def_cfa_offset 8
 5532              		.cfi_offset 4, -8
 5533              		.cfi_offset 14, -4
 5534 0002 86B0     		sub	sp, sp, #24
 5535              	.LCFI39:
 5536              		.cfi_def_cfa_offset 32
 5537 0004 0446     		mov	r4, r0
 5538 0006 06A8     		add	r0, sp, #24
 5539              	.LVL846:
 5540 0008 40F8141D 		str	r1, [r0, #-20]!
 5541              	.LVL847:
2208:.\FatFs/ff.c  **** 	FRESULT res;
2209:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2210:.\FatFs/ff.c  **** 	BYTE *dir;
2211:.\FatFs/ff.c  **** 
2212:.\FatFs/ff.c  **** 
2213:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj->fs, 0);
 5542              		.loc 1 2213 0
 5543 000c 2146     		mov	r1, r4
 5544              	.LVL848:
 5545 000e 0022     		movs	r2, #0
 5546 0010 FFF7FEFF 		bl	chk_mounted
 5547              	.LVL849:
2214:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 5548              		.loc 1 2214 0
 5549 0014 0346     		mov	r3, r0
 5550 0016 20BB     		cbnz	r0, .L546
2215:.\FatFs/ff.c  **** 		INITBUF((*dj), sfn, lfn);
 5551              		.loc 1 2215 0
 5552 0018 03AB     		add	r3, sp, #12
 5553 001a A361     		str	r3, [r4, #24]
 5554 001c 124B     		ldr	r3, .L548
 5555 001e E361     		str	r3, [r4, #28]
2216:.\FatFs/ff.c  **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 5556              		.loc 1 2216 0
 5557 0020 2046     		mov	r0, r4
 5558              	.LVL850:
 5559 0022 0199     		ldr	r1, [sp, #4]
 5560 0024 FFF7FEFF 		bl	follow_path
 5561              	.LVL851:
2217:.\FatFs/ff.c  **** 		if (res == FR_OK) {						/* Follow completed */
 5562              		.loc 1 2217 0
 5563 0028 0346     		mov	r3, r0
 5564 002a 58B9     		cbnz	r0, .L543
2218:.\FatFs/ff.c  **** 			dir = dj->dir;
 5565              		.loc 1 2218 0
 5566 002c 6369     		ldr	r3, [r4, #20]
 5567              	.LVL852:
2219:.\FatFs/ff.c  **** 			if (dir) {							/* It is not the root dir */
 5568              		.loc 1 2219 0
 5569 002e 7BB1     		cbz	r3, .L544
2220:.\FatFs/ff.c  **** 				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 5570              		.loc 1 2220 0
 5571 0030 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 5572 0032 12F0100F 		tst	r2, #16
 5573 0036 09D0     		beq	.L545
2221:.\FatFs/ff.c  **** 					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 5574              		.loc 1 2221 0
 5575 0038 9A8A     		ldrh	r2, [r3, #20]
 5576 003a 5B8B     		ldrh	r3, [r3, #26]
 5577              	.LVL853:
 5578 003c 43EA0243 		orr	r3, r3, r2, lsl #16
 5579 0040 A360     		str	r3, [r4, #8]
 5580 0042 05E0     		b	.L544
 5581              	.LVL854:
 5582              	.L543:
2222:.\FatFs/ff.c  **** 				} else {						/* The object is not a directory */
2223:.\FatFs/ff.c  **** 					res = FR_NO_PATH;
2224:.\FatFs/ff.c  **** 				}
2225:.\FatFs/ff.c  **** 			}
2226:.\FatFs/ff.c  **** 			if (res == FR_OK) {
2227:.\FatFs/ff.c  **** 				dj->id = dj->fs->id;
2228:.\FatFs/ff.c  **** 				res = dir_seek(dj, 0);			/* Rewind dir */
2229:.\FatFs/ff.c  **** 			}
2230:.\FatFs/ff.c  **** 		}
2231:.\FatFs/ff.c  **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 5583              		.loc 1 2231 0
 5584 0044 042B     		cmp	r3, #4
 5585 0046 08BF     		it	eq
 5586 0048 0523     		moveq	r3, #5
 5587              	.LVL855:
 5588 004a 0AE0     		b	.L546
 5589              	.LVL856:
 5590              	.L545:
2223:.\FatFs/ff.c  **** 				}
 5591              		.loc 1 2223 0
 5592 004c 0523     		movs	r3, #5
 5593              	.LVL857:
 5594 004e 08E0     		b	.L546
 5595              	.LVL858:
 5596              	.L544:
2227:.\FatFs/ff.c  **** 				res = dir_seek(dj, 0);			/* Rewind dir */
 5597              		.loc 1 2227 0
 5598 0050 2368     		ldr	r3, [r4]
 5599 0052 DB88     		ldrh	r3, [r3, #6]
 5600 0054 A380     		strh	r3, [r4, #4]	@ movhi
2228:.\FatFs/ff.c  **** 			}
 5601              		.loc 1 2228 0
 5602 0056 2046     		mov	r0, r4
 5603 0058 0021     		movs	r1, #0
 5604 005a FFF7FEFF 		bl	dir_seek
 5605              	.LVL859:
 5606 005e 0346     		mov	r3, r0
 5607              	.LVL860:
 5608 0060 F0E7     		b	.L543
 5609              	.LVL861:
 5610              	.L546:
2232:.\FatFs/ff.c  **** 	}
2233:.\FatFs/ff.c  **** 
2234:.\FatFs/ff.c  **** 	LEAVE_FF(dj->fs, res);
2235:.\FatFs/ff.c  **** }
 5611              		.loc 1 2235 0
 5612 0062 1846     		mov	r0, r3
 5613 0064 06B0     		add	sp, sp, #24
 5614              	.LCFI40:
 5615              		.cfi_def_cfa_offset 8
 5616              	.LVL862:
 5617              		@ sp needed
 5618 0066 10BD     		pop	{r4, pc}
 5619              	.LVL863:
 5620              	.L549:
 5621              		.align	2
 5622              	.L548:
 5623 0068 00000000 		.word	.LANCHOR4
 5624              		.cfi_endproc
 5625              	.LFE64:
 5627              		.section	.text.f_readdir,"ax",%progbits
 5628              		.align	2
 5629              		.global	f_readdir
 5630              		.thumb
 5631              		.thumb_func
 5633              	f_readdir:
 5634              	.LFB65:
2236:.\FatFs/ff.c  **** 
2237:.\FatFs/ff.c  **** 
2238:.\FatFs/ff.c  **** 
2239:.\FatFs/ff.c  **** 
2240:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2241:.\FatFs/ff.c  **** /* Read Directory Entry in Sequense                                      */
2242:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2243:.\FatFs/ff.c  **** 
2244:.\FatFs/ff.c  **** FRESULT f_readdir (
2245:.\FatFs/ff.c  **** 	DIR *dj,			/* Pointer to the open directory object */
2246:.\FatFs/ff.c  **** 	FILINFO *fno		/* Pointer to file information to return */
2247:.\FatFs/ff.c  **** )
2248:.\FatFs/ff.c  **** {
 5635              		.loc 1 2248 0
 5636              		.cfi_startproc
 5637              		@ args = 0, pretend = 0, frame = 16
 5638              		@ frame_needed = 0, uses_anonymous_args = 0
 5639              	.LVL864:
 5640 0000 70B5     		push	{r4, r5, r6, lr}
 5641              	.LCFI41:
 5642              		.cfi_def_cfa_offset 16
 5643              		.cfi_offset 4, -16
 5644              		.cfi_offset 5, -12
 5645              		.cfi_offset 6, -8
 5646              		.cfi_offset 14, -4
 5647 0002 84B0     		sub	sp, sp, #16
 5648              	.LCFI42:
 5649              		.cfi_def_cfa_offset 32
 5650 0004 0446     		mov	r4, r0
 5651 0006 0E46     		mov	r6, r1
 5652              	.LVL865:
2249:.\FatFs/ff.c  **** 	FRESULT res;
2250:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2251:.\FatFs/ff.c  **** 
2252:.\FatFs/ff.c  **** 
2253:.\FatFs/ff.c  **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 5653              		.loc 1 2253 0
 5654 0008 0068     		ldr	r0, [r0]
 5655              	.LVL866:
 5656 000a A188     		ldrh	r1, [r4, #4]
 5657              	.LVL867:
 5658 000c FFF7FEFF 		bl	validate
 5659              	.LVL868:
2254:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 5660              		.loc 1 2254 0
 5661 0010 0546     		mov	r5, r0
 5662 0012 18BB     		cbnz	r0, .L551
2255:.\FatFs/ff.c  **** 		INITBUF((*dj), sfn, lfn);
 5663              		.loc 1 2255 0
 5664 0014 01AB     		add	r3, sp, #4
 5665 0016 A361     		str	r3, [r4, #24]
 5666 0018 124B     		ldr	r3, .L558
 5667 001a E361     		str	r3, [r4, #28]
2256:.\FatFs/ff.c  **** 		if (!fno) {
 5668              		.loc 1 2256 0
 5669 001c 2EB9     		cbnz	r6, .L552
2257:.\FatFs/ff.c  **** 			res = dir_seek(dj, 0);
 5670              		.loc 1 2257 0
 5671 001e 2046     		mov	r0, r4
 5672              	.LVL869:
 5673 0020 0021     		movs	r1, #0
 5674 0022 FFF7FEFF 		bl	dir_seek
 5675              	.LVL870:
 5676 0026 0546     		mov	r5, r0
 5677              	.LVL871:
 5678 0028 18E0     		b	.L551
 5679              	.LVL872:
 5680              	.L552:
2258:.\FatFs/ff.c  **** 		} else {
2259:.\FatFs/ff.c  **** 			res = dir_read(dj);
 5681              		.loc 1 2259 0
 5682 002a 2046     		mov	r0, r4
 5683              	.LVL873:
 5684 002c FFF7FEFF 		bl	dir_read
 5685              	.LVL874:
2260:.\FatFs/ff.c  **** 			if (res == FR_NO_FILE) {
 5686              		.loc 1 2260 0
 5687 0030 0428     		cmp	r0, #4
 5688 0032 02D1     		bne	.L553
2261:.\FatFs/ff.c  **** 				dj->sect = 0;
 5689              		.loc 1 2261 0
 5690 0034 0023     		movs	r3, #0
 5691 0036 2361     		str	r3, [r4, #16]
 5692              	.LVL875:
 5693 0038 00E0     		b	.L554
 5694              	.LVL876:
 5695              	.L553:
2262:.\FatFs/ff.c  **** 				res = FR_OK;
2263:.\FatFs/ff.c  **** 			}
2264:.\FatFs/ff.c  **** 			if (res == FR_OK) {				/* A valid entry is found */
 5696              		.loc 1 2264 0
 5697 003a 60B9     		cbnz	r0, .L555
 5698              	.LVL877:
 5699              	.L554:
2265:.\FatFs/ff.c  **** 				get_fileinfo(dj, fno);		/* Get the object information */
 5700              		.loc 1 2265 0
 5701 003c 2046     		mov	r0, r4
 5702 003e 3146     		mov	r1, r6
 5703 0040 FFF7FEFF 		bl	get_fileinfo
 5704              	.LVL878:
2266:.\FatFs/ff.c  **** 				res = dir_next(dj, FALSE);	/* Increment index for next */
 5705              		.loc 1 2266 0
 5706 0044 2046     		mov	r0, r4
 5707 0046 0021     		movs	r1, #0
 5708 0048 FFF7FEFF 		bl	dir_next
 5709              	.LVL879:
2267:.\FatFs/ff.c  **** 				if (res == FR_NO_FILE) {
 5710              		.loc 1 2267 0
 5711 004c 0428     		cmp	r0, #4
 5712 004e 04D1     		bne	.L556
2268:.\FatFs/ff.c  **** 					dj->sect = 0;
 5713              		.loc 1 2268 0
 5714 0050 0023     		movs	r3, #0
 5715 0052 2361     		str	r3, [r4, #16]
 5716              	.LVL880:
 5717 0054 02E0     		b	.L551
 5718              	.LVL881:
 5719              	.L555:
2259:.\FatFs/ff.c  **** 			if (res == FR_NO_FILE) {
 5720              		.loc 1 2259 0
 5721 0056 0546     		mov	r5, r0
 5722 0058 00E0     		b	.L551
 5723              	.L556:
2266:.\FatFs/ff.c  **** 				if (res == FR_NO_FILE) {
 5724              		.loc 1 2266 0
 5725 005a 0546     		mov	r5, r0
 5726              	.LVL882:
 5727              	.L551:
2269:.\FatFs/ff.c  **** 					res = FR_OK;
2270:.\FatFs/ff.c  **** 				}
2271:.\FatFs/ff.c  **** 			}
2272:.\FatFs/ff.c  **** 		}
2273:.\FatFs/ff.c  **** 	}
2274:.\FatFs/ff.c  **** 
2275:.\FatFs/ff.c  **** 	LEAVE_FF(dj->fs, res);
2276:.\FatFs/ff.c  **** }
 5728              		.loc 1 2276 0
 5729 005c 2846     		mov	r0, r5
 5730 005e 04B0     		add	sp, sp, #16
 5731              	.LCFI43:
 5732              		.cfi_def_cfa_offset 16
 5733              		@ sp needed
 5734 0060 70BD     		pop	{r4, r5, r6, pc}
 5735              	.LVL883:
 5736              	.L559:
 5737 0062 00BF     		.align	2
 5738              	.L558:
 5739 0064 00000000 		.word	.LANCHOR4
 5740              		.cfi_endproc
 5741              	.LFE65:
 5743              		.section	.text.f_stat,"ax",%progbits
 5744              		.align	2
 5745              		.global	f_stat
 5746              		.thumb
 5747              		.thumb_func
 5749              	f_stat:
 5750              	.LFB66:
2277:.\FatFs/ff.c  **** 
2278:.\FatFs/ff.c  **** 
2279:.\FatFs/ff.c  **** 
2280:.\FatFs/ff.c  **** #if _FS_MINIMIZE == 0
2281:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2282:.\FatFs/ff.c  **** /* Get File Status                                                       */
2283:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2284:.\FatFs/ff.c  **** 
2285:.\FatFs/ff.c  **** FRESULT f_stat (
2286:.\FatFs/ff.c  **** 	const XCHAR *path,	/* Pointer to the file path */
2287:.\FatFs/ff.c  **** 	FILINFO *fno		/* Pointer to file information to return */
2288:.\FatFs/ff.c  **** )
2289:.\FatFs/ff.c  **** {
 5751              		.loc 1 2289 0
 5752              		.cfi_startproc
 5753              		@ args = 0, pretend = 0, frame = 56
 5754              		@ frame_needed = 0, uses_anonymous_args = 0
 5755              	.LVL884:
 5756 0000 30B5     		push	{r4, r5, lr}
 5757              	.LCFI44:
 5758              		.cfi_def_cfa_offset 12
 5759              		.cfi_offset 4, -12
 5760              		.cfi_offset 5, -8
 5761              		.cfi_offset 14, -4
 5762 0002 8FB0     		sub	sp, sp, #60
 5763              	.LCFI45:
 5764              		.cfi_def_cfa_offset 72
 5765 0004 0EAB     		add	r3, sp, #56
 5766 0006 43F8340D 		str	r0, [r3, #-52]!
 5767 000a 0D46     		mov	r5, r1
 5768              	.LVL885:
2290:.\FatFs/ff.c  **** 	FRESULT res;
2291:.\FatFs/ff.c  **** 	DIR dj;
2292:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2293:.\FatFs/ff.c  **** 
2294:.\FatFs/ff.c  **** 
2295:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, 0);
 5769              		.loc 1 2295 0
 5770 000c 1846     		mov	r0, r3
 5771              	.LVL886:
 5772 000e 05A9     		add	r1, sp, #20
 5773              	.LVL887:
 5774 0010 0022     		movs	r2, #0
 5775 0012 FFF7FEFF 		bl	chk_mounted
 5776              	.LVL888:
2296:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 5777              		.loc 1 2296 0
 5778 0016 0446     		mov	r4, r0
 5779 0018 88B9     		cbnz	r0, .L561
2297:.\FatFs/ff.c  **** 		INITBUF(dj, sfn, lfn);
 5780              		.loc 1 2297 0
 5781 001a 02AB     		add	r3, sp, #8
 5782 001c 0B93     		str	r3, [sp, #44]
 5783 001e 094B     		ldr	r3, .L564
 5784 0020 0C93     		str	r3, [sp, #48]
2298:.\FatFs/ff.c  **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5785              		.loc 1 2298 0
 5786 0022 05A8     		add	r0, sp, #20
 5787              	.LVL889:
 5788 0024 0199     		ldr	r1, [sp, #4]
 5789 0026 FFF7FEFF 		bl	follow_path
 5790              	.LVL890:
2299:.\FatFs/ff.c  **** 		if (res == FR_OK) {				/* Follow completed */
 5791              		.loc 1 2299 0
 5792 002a 0446     		mov	r4, r0
 5793 002c 38B9     		cbnz	r0, .L561
2300:.\FatFs/ff.c  **** 			if (dj.dir)	/* Found an object */
 5794              		.loc 1 2300 0
 5795 002e 0A9B     		ldr	r3, [sp, #40]
 5796 0030 23B1     		cbz	r3, .L562
2301:.\FatFs/ff.c  **** 				get_fileinfo(&dj, fno);
 5797              		.loc 1 2301 0
 5798 0032 05A8     		add	r0, sp, #20
 5799              	.LVL891:
 5800 0034 2946     		mov	r1, r5
 5801 0036 FFF7FEFF 		bl	get_fileinfo
 5802              	.LVL892:
 5803 003a 00E0     		b	.L561
 5804              	.LVL893:
 5805              	.L562:
2302:.\FatFs/ff.c  **** 			else		/* It is root dir */
2303:.\FatFs/ff.c  **** 				res = FR_INVALID_NAME;
 5806              		.loc 1 2303 0
 5807 003c 0624     		movs	r4, #6
 5808              	.LVL894:
 5809              	.L561:
2304:.\FatFs/ff.c  **** 		}
2305:.\FatFs/ff.c  **** 	}
2306:.\FatFs/ff.c  **** 
2307:.\FatFs/ff.c  **** 	LEAVE_FF(dj.fs, res);
2308:.\FatFs/ff.c  **** }
 5810              		.loc 1 2308 0
 5811 003e 2046     		mov	r0, r4
 5812 0040 0FB0     		add	sp, sp, #60
 5813              	.LCFI46:
 5814              		.cfi_def_cfa_offset 12
 5815              		@ sp needed
 5816 0042 30BD     		pop	{r4, r5, pc}
 5817              	.LVL895:
 5818              	.L565:
 5819              		.align	2
 5820              	.L564:
 5821 0044 00000000 		.word	.LANCHOR4
 5822              		.cfi_endproc
 5823              	.LFE66:
 5825              		.section	.text.f_getfree,"ax",%progbits
 5826              		.align	2
 5827              		.global	f_getfree
 5828              		.thumb
 5829              		.thumb_func
 5831              	f_getfree:
 5832              	.LFB67:
2309:.\FatFs/ff.c  **** 
2310:.\FatFs/ff.c  **** 
2311:.\FatFs/ff.c  **** 
2312:.\FatFs/ff.c  **** #if !_FS_READONLY
2313:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2314:.\FatFs/ff.c  **** /* Get Number of Free Clusters                                           */
2315:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2316:.\FatFs/ff.c  **** 
2317:.\FatFs/ff.c  **** FRESULT f_getfree (
2318:.\FatFs/ff.c  **** 	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
2319:.\FatFs/ff.c  **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
2320:.\FatFs/ff.c  **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
2321:.\FatFs/ff.c  **** )
2322:.\FatFs/ff.c  **** {
 5833              		.loc 1 2322 0
 5834              		.cfi_startproc
 5835              		@ args = 0, pretend = 0, frame = 8
 5836              		@ frame_needed = 0, uses_anonymous_args = 0
 5837              	.LVL896:
 5838 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5839              	.LCFI47:
 5840              		.cfi_def_cfa_offset 32
 5841              		.cfi_offset 4, -32
 5842              		.cfi_offset 5, -28
 5843              		.cfi_offset 6, -24
 5844              		.cfi_offset 7, -20
 5845              		.cfi_offset 8, -16
 5846              		.cfi_offset 9, -12
 5847              		.cfi_offset 10, -8
 5848              		.cfi_offset 14, -4
 5849 0004 82B0     		sub	sp, sp, #8
 5850              	.LCFI48:
 5851              		.cfi_def_cfa_offset 40
 5852 0006 02AB     		add	r3, sp, #8
 5853 0008 43F8040D 		str	r0, [r3, #-4]!
 5854 000c 8A46     		mov	r10, r1
 5855 000e 1546     		mov	r5, r2
2323:.\FatFs/ff.c  **** 	FRESULT res;
2324:.\FatFs/ff.c  **** 	DWORD n, clst, sect, stat;
2325:.\FatFs/ff.c  **** 	UINT i;
2326:.\FatFs/ff.c  **** 	BYTE fat, *p;
2327:.\FatFs/ff.c  **** 
2328:.\FatFs/ff.c  **** 
2329:.\FatFs/ff.c  **** 	/* Get drive number */
2330:.\FatFs/ff.c  **** 	res = chk_mounted(&path, fatfs, 0);
 5856              		.loc 1 2330 0
 5857 0010 1846     		mov	r0, r3
 5858              	.LVL897:
 5859 0012 1146     		mov	r1, r2
 5860              	.LVL898:
 5861 0014 0022     		movs	r2, #0
 5862              	.LVL899:
 5863 0016 FFF7FEFF 		bl	chk_mounted
 5864              	.LVL900:
2331:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(*fatfs, res);
 5865              		.loc 1 2331 0
 5866 001a 0028     		cmp	r0, #0
 5867 001c 4CD1     		bne	.L580
2332:.\FatFs/ff.c  **** 
2333:.\FatFs/ff.c  **** 	/* If number of free cluster is valid, return it without cluster scan. */
2334:.\FatFs/ff.c  **** 	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
 5868              		.loc 1 2334 0
 5869 001e 2B68     		ldr	r3, [r5]
 5870 0020 1A69     		ldr	r2, [r3, #16]
 5871 0022 DC69     		ldr	r4, [r3, #28]
 5872 0024 A11E     		subs	r1, r4, #2
 5873 0026 8A42     		cmp	r2, r1
 5874 0028 02D8     		bhi	.L568
2335:.\FatFs/ff.c  **** 		*nclst = (*fatfs)->free_clust;
 5875              		.loc 1 2335 0
 5876 002a CAF80020 		str	r2, [r10]
2336:.\FatFs/ff.c  **** 		LEAVE_FF(*fatfs, FR_OK);
 5877              		.loc 1 2336 0
 5878 002e 48E0     		b	.L567
 5879              	.L568:
2337:.\FatFs/ff.c  **** 	}
2338:.\FatFs/ff.c  **** 
2339:.\FatFs/ff.c  **** 	/* Get number of free clusters */
2340:.\FatFs/ff.c  **** 	fat = (*fatfs)->fs_type;
 5880              		.loc 1 2340 0
 5881 0030 1F78     		ldrb	r7, [r3]	@ zero_extendqisi2
 5882              	.LVL901:
2341:.\FatFs/ff.c  **** 	n = 0;
2342:.\FatFs/ff.c  **** 	if (fat == FS_FAT12) {
 5883              		.loc 1 2342 0
 5884 0032 012F     		cmp	r7, #1
 5885 0034 13D1     		bne	.L569
 5886 0036 0224     		movs	r4, #2
 5887 0038 0026     		movs	r6, #0
 5888              	.LVL902:
 5889              	.L571:
2343:.\FatFs/ff.c  **** 		clst = 2;
2344:.\FatFs/ff.c  **** 		do {
2345:.\FatFs/ff.c  **** 			stat = get_fat(*fatfs, clst);
 5890              		.loc 1 2345 0
 5891 003a 2868     		ldr	r0, [r5]
 5892 003c 2146     		mov	r1, r4
 5893 003e FFF7FEFF 		bl	get_fat
 5894              	.LVL903:
2346:.\FatFs/ff.c  **** 			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 5895              		.loc 1 2346 0
 5896 0042 B0F1FF3F 		cmp	r0, #-1
 5897 0046 38D0     		beq	.L581
2347:.\FatFs/ff.c  **** 			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 5898              		.loc 1 2347 0
 5899 0048 0128     		cmp	r0, #1
 5900 004a 38D0     		beq	.L582
2348:.\FatFs/ff.c  **** 			if (stat == 0) n++;
 5901              		.loc 1 2348 0
 5902 004c 00B9     		cbnz	r0, .L570
 5903              		.loc 1 2348 0 is_stmt 0 discriminator 1
 5904 004e 0136     		adds	r6, r6, #1
 5905              	.LVL904:
 5906              	.L570:
2349:.\FatFs/ff.c  **** 		} while (++clst < (*fatfs)->max_clust);
 5907              		.loc 1 2349 0 is_stmt 1
 5908 0050 0134     		adds	r4, r4, #1
 5909              	.LVL905:
 5910 0052 2B68     		ldr	r3, [r5]
 5911 0054 DA69     		ldr	r2, [r3, #28]
 5912 0056 9442     		cmp	r4, r2
 5913 0058 EFD3     		bcc	.L571
2350:.\FatFs/ff.c  **** 	} else {
2351:.\FatFs/ff.c  **** 		clst = (*fatfs)->max_clust;
2352:.\FatFs/ff.c  **** 		sect = (*fatfs)->fatbase;
2353:.\FatFs/ff.c  **** 		i = 0; p = 0;
2354:.\FatFs/ff.c  **** 		do {
2355:.\FatFs/ff.c  **** 			if (!i) {
2356:.\FatFs/ff.c  **** 				res = move_window(*fatfs, sect++);
2357:.\FatFs/ff.c  **** 				if (res != FR_OK)
2358:.\FatFs/ff.c  **** 					LEAVE_FF(*fatfs, res);
2359:.\FatFs/ff.c  **** 				p = (*fatfs)->win;
2360:.\FatFs/ff.c  **** 				i = SS(*fatfs);
2361:.\FatFs/ff.c  **** 			}
2362:.\FatFs/ff.c  **** 			if (fat == FS_FAT16) {
2363:.\FatFs/ff.c  **** 				if (LD_WORD(p) == 0) n++;
2364:.\FatFs/ff.c  **** 				p += 2; i -= 2;
2365:.\FatFs/ff.c  **** 			} else {
2366:.\FatFs/ff.c  **** 				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
2367:.\FatFs/ff.c  **** 				p += 4; i -= 4;
2368:.\FatFs/ff.c  **** 			}
2369:.\FatFs/ff.c  **** 		} while (--clst);
2370:.\FatFs/ff.c  **** 	}
2371:.\FatFs/ff.c  **** 	(*fatfs)->free_clust = n;
 5914              		.loc 1 2371 0
 5915 005a 1E61     		str	r6, [r3, #16]
 5916 005c 28E0     		b	.L579
 5917              	.LVL906:
 5918              	.L569:
2352:.\FatFs/ff.c  **** 		i = 0; p = 0;
 5919              		.loc 1 2352 0
 5920 005e 196A     		ldr	r1, [r3, #32]
 5921              	.LVL907:
2353:.\FatFs/ff.c  **** 		do {
 5922              		.loc 1 2353 0
 5923 0060 0023     		movs	r3, #0
 5924 0062 1A46     		mov	r2, r3
2341:.\FatFs/ff.c  **** 	if (fat == FS_FAT12) {
 5925              		.loc 1 2341 0
 5926 0064 1E46     		mov	r6, r3
2360:.\FatFs/ff.c  **** 			}
 5927              		.loc 1 2360 0
 5928 0066 4FF40079 		mov	r9, #512
 5929              	.LVL908:
 5930              	.L578:
2355:.\FatFs/ff.c  **** 				res = move_window(*fatfs, sect++);
 5931              		.loc 1 2355 0
 5932 006a 4AB9     		cbnz	r2, .L573
 5933              	.LVL909:
2356:.\FatFs/ff.c  **** 				if (res != FR_OK)
 5934              		.loc 1 2356 0
 5935 006c 01F10108 		add	r8, r1, #1
 5936              	.LVL910:
 5937 0070 2868     		ldr	r0, [r5]
 5938 0072 FFF7FEFF 		bl	move_window
 5939              	.LVL911:
2357:.\FatFs/ff.c  **** 					LEAVE_FF(*fatfs, res);
 5940              		.loc 1 2357 0
 5941 0076 20BB     		cbnz	r0, .L583
2359:.\FatFs/ff.c  **** 				i = SS(*fatfs);
 5942              		.loc 1 2359 0
 5943 0078 2B68     		ldr	r3, [r5]
 5944              	.LVL912:
 5945 007a 3033     		adds	r3, r3, #48
 5946              	.LVL913:
2356:.\FatFs/ff.c  **** 				if (res != FR_OK)
 5947              		.loc 1 2356 0
 5948 007c 4146     		mov	r1, r8
2360:.\FatFs/ff.c  **** 			}
 5949              		.loc 1 2360 0
 5950 007e 4A46     		mov	r2, r9
 5951              	.LVL914:
 5952              	.L573:
2362:.\FatFs/ff.c  **** 				if (LD_WORD(p) == 0) n++;
 5953              		.loc 1 2362 0
 5954 0080 022F     		cmp	r7, #2
 5955 0082 05D1     		bne	.L574
2363:.\FatFs/ff.c  **** 				p += 2; i -= 2;
 5956              		.loc 1 2363 0
 5957 0084 1888     		ldrh	r0, [r3]
 5958 0086 00B9     		cbnz	r0, .L575
2363:.\FatFs/ff.c  **** 				p += 2; i -= 2;
 5959              		.loc 1 2363 0 is_stmt 0 discriminator 1
 5960 0088 0136     		adds	r6, r6, #1
 5961              	.LVL915:
 5962              	.L575:
2364:.\FatFs/ff.c  **** 			} else {
 5963              		.loc 1 2364 0 is_stmt 1
 5964 008a 0233     		adds	r3, r3, #2
 5965              	.LVL916:
 5966 008c 023A     		subs	r2, r2, #2
 5967              	.LVL917:
 5968 008e 06E0     		b	.L576
 5969              	.LVL918:
 5970              	.L574:
2366:.\FatFs/ff.c  **** 				p += 4; i -= 4;
 5971              		.loc 1 2366 0
 5972 0090 1868     		ldr	r0, [r3]
 5973 0092 20F07040 		bic	r0, r0, #-268435456
 5974 0096 00B9     		cbnz	r0, .L577
2366:.\FatFs/ff.c  **** 				p += 4; i -= 4;
 5975              		.loc 1 2366 0 is_stmt 0 discriminator 1
 5976 0098 0136     		adds	r6, r6, #1
 5977              	.LVL919:
 5978              	.L577:
2367:.\FatFs/ff.c  **** 			}
 5979              		.loc 1 2367 0 is_stmt 1
 5980 009a 0433     		adds	r3, r3, #4
 5981              	.LVL920:
 5982 009c 043A     		subs	r2, r2, #4
 5983              	.LVL921:
 5984              	.L576:
2369:.\FatFs/ff.c  **** 	}
 5985              		.loc 1 2369 0
 5986 009e 013C     		subs	r4, r4, #1
 5987              	.LVL922:
 5988 00a0 E3D1     		bne	.L578
 5989              		.loc 1 2371 0
 5990 00a2 2B68     		ldr	r3, [r5]
 5991              	.LVL923:
 5992 00a4 1E61     		str	r6, [r3, #16]
2372:.\FatFs/ff.c  **** 	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 5993              		.loc 1 2372 0
 5994 00a6 032F     		cmp	r7, #3
 5995 00a8 02D1     		bne	.L579
 5996              		.loc 1 2372 0 is_stmt 0 discriminator 1
 5997 00aa 2B68     		ldr	r3, [r5]
 5998 00ac 0122     		movs	r2, #1
 5999              	.LVL924:
 6000 00ae 5A71     		strb	r2, [r3, #5]
 6001              	.LVL925:
 6002              	.L579:
2373:.\FatFs/ff.c  **** 	*nclst = n;
 6003              		.loc 1 2373 0 is_stmt 1
 6004 00b0 CAF80060 		str	r6, [r10]
2374:.\FatFs/ff.c  **** 
2375:.\FatFs/ff.c  **** 	LEAVE_FF(*fatfs, FR_OK);
 6005              		.loc 1 2375 0
 6006 00b4 0020     		movs	r0, #0
 6007 00b6 04E0     		b	.L567
 6008              	.LVL926:
 6009              	.L580:
 6010 00b8 03E0     		b	.L567
 6011              	.LVL927:
 6012              	.L581:
2346:.\FatFs/ff.c  **** 			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 6013              		.loc 1 2346 0
 6014 00ba 0120     		movs	r0, #1
 6015              	.LVL928:
 6016 00bc 01E0     		b	.L567
 6017              	.LVL929:
 6018              	.L582:
2347:.\FatFs/ff.c  **** 			if (stat == 0) n++;
 6019              		.loc 1 2347 0
 6020 00be 0220     		movs	r0, #2
 6021              	.LVL930:
 6022 00c0 FFE7     		b	.L567
 6023              	.LVL931:
 6024              	.L583:
 6025              	.L567:
2376:.\FatFs/ff.c  **** }
 6026              		.loc 1 2376 0
 6027 00c2 02B0     		add	sp, sp, #8
 6028              	.LCFI49:
 6029              		.cfi_def_cfa_offset 32
 6030              	.LVL932:
 6031              		@ sp needed
 6032 00c4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 6033              		.cfi_endproc
 6034              	.LFE67:
 6036              		.section	.text.f_truncate,"ax",%progbits
 6037              		.align	2
 6038              		.global	f_truncate
 6039              		.thumb
 6040              		.thumb_func
 6042              	f_truncate:
 6043              	.LFB68:
2377:.\FatFs/ff.c  **** 
2378:.\FatFs/ff.c  **** 
2379:.\FatFs/ff.c  **** 
2380:.\FatFs/ff.c  **** 
2381:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2382:.\FatFs/ff.c  **** /* Truncate File                                                         */
2383:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2384:.\FatFs/ff.c  **** 
2385:.\FatFs/ff.c  **** FRESULT f_truncate (
2386:.\FatFs/ff.c  **** 	FIL *fp		/* Pointer to the file object */
2387:.\FatFs/ff.c  **** )
2388:.\FatFs/ff.c  **** {
 6044              		.loc 1 2388 0
 6045              		.cfi_startproc
 6046              		@ args = 0, pretend = 0, frame = 0
 6047              		@ frame_needed = 0, uses_anonymous_args = 0
 6048              	.LVL933:
 6049 0000 38B5     		push	{r3, r4, r5, lr}
 6050              	.LCFI50:
 6051              		.cfi_def_cfa_offset 16
 6052              		.cfi_offset 3, -16
 6053              		.cfi_offset 4, -12
 6054              		.cfi_offset 5, -8
 6055              		.cfi_offset 14, -4
 6056 0002 0446     		mov	r4, r0
2389:.\FatFs/ff.c  **** 	FRESULT res;
2390:.\FatFs/ff.c  **** 	DWORD ncl;
2391:.\FatFs/ff.c  **** 
2392:.\FatFs/ff.c  **** 
2393:.\FatFs/ff.c  **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 6057              		.loc 1 2393 0
 6058 0004 0068     		ldr	r0, [r0]
 6059              	.LVL934:
 6060 0006 A188     		ldrh	r1, [r4, #4]
 6061 0008 FFF7FEFF 		bl	validate
 6062              	.LVL935:
2394:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 6063              		.loc 1 2394 0
 6064 000c 0028     		cmp	r0, #0
 6065 000e 3DD1     		bne	.L594
2395:.\FatFs/ff.c  **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 6066              		.loc 1 2395 0
 6067 0010 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 6068 0012 13F0800F 		tst	r3, #128
 6069 0016 3AD1     		bne	.L595
2396:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2397:.\FatFs/ff.c  **** 	if (!(fp->flag & FA_WRITE))			/* Check access mode */
 6070              		.loc 1 2397 0
 6071 0018 13F0020F 		tst	r3, #2
 6072 001c 39D0     		beq	.L596
2398:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_DENIED);
2399:.\FatFs/ff.c  **** 
2400:.\FatFs/ff.c  **** 	if (fp->fsize > fp->fptr) {
 6073              		.loc 1 2400 0
 6074 001e A268     		ldr	r2, [r4, #8]
 6075 0020 E168     		ldr	r1, [r4, #12]
 6076 0022 9142     		cmp	r1, r2
 6077 0024 39D9     		bls	.L589
2401:.\FatFs/ff.c  **** 		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 6078              		.loc 1 2401 0
 6079 0026 E260     		str	r2, [r4, #12]
2402:.\FatFs/ff.c  **** 		fp->flag |= FA__WRITTEN;
 6080              		.loc 1 2402 0
 6081 0028 43F02003 		orr	r3, r3, #32
 6082 002c A371     		strb	r3, [r4, #6]
2403:.\FatFs/ff.c  **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 6083              		.loc 1 2403 0
 6084 002e 3AB9     		cbnz	r2, .L590
2404:.\FatFs/ff.c  **** 			res = remove_chain(fp->fs, fp->org_clust);
 6085              		.loc 1 2404 0
 6086 0030 2068     		ldr	r0, [r4]
 6087              	.LVL936:
 6088 0032 2169     		ldr	r1, [r4, #16]
 6089 0034 FFF7FEFF 		bl	remove_chain
 6090              	.LVL937:
 6091 0038 0346     		mov	r3, r0
 6092              	.LVL938:
2405:.\FatFs/ff.c  **** 			fp->org_clust = 0;
 6093              		.loc 1 2405 0
 6094 003a 0022     		movs	r2, #0
 6095 003c 2261     		str	r2, [r4, #16]
 6096 003e 1CE0     		b	.L591
 6097              	.LVL939:
 6098              	.L590:
2406:.\FatFs/ff.c  **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
2407:.\FatFs/ff.c  **** 			ncl = get_fat(fp->fs, fp->curr_clust);
 6099              		.loc 1 2407 0
 6100 0040 2068     		ldr	r0, [r4]
 6101              	.LVL940:
 6102 0042 6169     		ldr	r1, [r4, #20]
 6103 0044 FFF7FEFF 		bl	get_fat
 6104              	.LVL941:
 6105 0048 0546     		mov	r5, r0
 6106              	.LVL942:
2408:.\FatFs/ff.c  **** 			res = FR_OK;
2409:.\FatFs/ff.c  **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
2410:.\FatFs/ff.c  **** 			if (ncl == 1) res = FR_INT_ERR;
 6107              		.loc 1 2410 0
 6108 004a 0128     		cmp	r0, #1
 6109 004c 17D0     		beq	.L597
2408:.\FatFs/ff.c  **** 			res = FR_OK;
 6110              		.loc 1 2408 0
 6111 004e B0F1FF3F 		cmp	r0, #-1
 6112 0052 14BF     		ite	ne
 6113 0054 0023     		movne	r3, #0
 6114 0056 0123     		moveq	r3, #1
2411:.\FatFs/ff.c  **** 			if (res == FR_OK && ncl < fp->fs->max_clust) {
 6115              		.loc 1 2411 0
 6116 0058 93B9     		cbnz	r3, .L592
 6117              		.loc 1 2411 0 is_stmt 0 discriminator 1
 6118 005a 2068     		ldr	r0, [r4]
 6119              	.LVL943:
 6120 005c C369     		ldr	r3, [r0, #28]
 6121 005e 9D42     		cmp	r5, r3
 6122 0060 1BD2     		bcs	.L589
2412:.\FatFs/ff.c  **** 				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
 6123              		.loc 1 2412 0 is_stmt 1
 6124 0062 6169     		ldr	r1, [r4, #20]
 6125 0064 6FF07042 		mvn	r2, #-268435456
 6126 0068 FFF7FEFF 		bl	put_fat
 6127              	.LVL944:
2413:.\FatFs/ff.c  **** 				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 6128              		.loc 1 2413 0
 6129 006c 0346     		mov	r3, r0
 6130 006e 38B9     		cbnz	r0, .L592
 6131              		.loc 1 2413 0 is_stmt 0 discriminator 1
 6132 0070 2068     		ldr	r0, [r4]
 6133              	.LVL945:
 6134 0072 2946     		mov	r1, r5
 6135 0074 FFF7FEFF 		bl	remove_chain
 6136              	.LVL946:
 6137 0078 0346     		mov	r3, r0
 6138              	.LVL947:
 6139              	.L591:
2414:.\FatFs/ff.c  **** 			}
2415:.\FatFs/ff.c  **** 		}
2416:.\FatFs/ff.c  **** 	}
2417:.\FatFs/ff.c  **** 	if (res != FR_OK) fp->flag |= FA__ERROR;
 6140              		.loc 1 2417 0 is_stmt 1
 6141 007a 0BB9     		cbnz	r3, .L592
 6142 007c 0BE0     		b	.L598
 6143              	.LVL948:
 6144              	.L597:
2410:.\FatFs/ff.c  **** 			if (res == FR_OK && ncl < fp->fs->max_clust) {
 6145              		.loc 1 2410 0
 6146 007e 0223     		movs	r3, #2
 6147              	.LVL949:
 6148              	.L592:
 6149              		.loc 1 2417 0 discriminator 1
 6150 0080 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 6151 0082 62F07F02 		orn	r2, r2, #127
 6152 0086 A271     		strb	r2, [r4, #6]
 6153 0088 1846     		mov	r0, r3
 6154 008a 38BD     		pop	{r3, r4, r5, pc}
 6155              	.LVL950:
 6156              	.L594:
 6157 008c 38BD     		pop	{r3, r4, r5, pc}
 6158              	.LVL951:
 6159              	.L595:
2396:.\FatFs/ff.c  **** 	if (!(fp->flag & FA_WRITE))			/* Check access mode */
 6160              		.loc 1 2396 0
 6161 008e 0220     		movs	r0, #2
 6162              	.LVL952:
 6163 0090 38BD     		pop	{r3, r4, r5, pc}
 6164              	.LVL953:
 6165              	.L596:
2398:.\FatFs/ff.c  **** 
 6166              		.loc 1 2398 0
 6167 0092 0720     		movs	r0, #7
 6168              	.LVL954:
 6169 0094 38BD     		pop	{r3, r4, r5, pc}
 6170              	.LVL955:
 6171              	.L598:
2418:.\FatFs/ff.c  **** 
2419:.\FatFs/ff.c  **** 	LEAVE_FF(fp->fs, res);
 6172              		.loc 1 2419 0
 6173 0096 0020     		movs	r0, #0
 6174 0098 38BD     		pop	{r3, r4, r5, pc}
 6175              	.LVL956:
 6176              	.L589:
 6177 009a 0020     		movs	r0, #0
2420:.\FatFs/ff.c  **** }
 6178              		.loc 1 2420 0
 6179 009c 38BD     		pop	{r3, r4, r5, pc}
 6180              		.cfi_endproc
 6181              	.LFE68:
 6183 009e 00BF     		.section	.text.f_unlink,"ax",%progbits
 6184              		.align	2
 6185              		.global	f_unlink
 6186              		.thumb
 6187              		.thumb_func
 6189              	f_unlink:
 6190              	.LFB69:
2421:.\FatFs/ff.c  **** 
2422:.\FatFs/ff.c  **** 
2423:.\FatFs/ff.c  **** 
2424:.\FatFs/ff.c  **** 
2425:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2426:.\FatFs/ff.c  **** /* Delete a File or Directory                                            */
2427:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2428:.\FatFs/ff.c  **** 
2429:.\FatFs/ff.c  **** FRESULT f_unlink (
2430:.\FatFs/ff.c  **** 	const XCHAR *path		/* Pointer to the file or directory path */
2431:.\FatFs/ff.c  **** )
2432:.\FatFs/ff.c  **** {
 6191              		.loc 1 2432 0
 6192              		.cfi_startproc
 6193              		@ args = 0, pretend = 0, frame = 96
 6194              		@ frame_needed = 0, uses_anonymous_args = 0
 6195              	.LVL957:
 6196 0000 10B5     		push	{r4, lr}
 6197              	.LCFI51:
 6198              		.cfi_def_cfa_offset 8
 6199              		.cfi_offset 4, -8
 6200              		.cfi_offset 14, -4
 6201 0002 98B0     		sub	sp, sp, #96
 6202              	.LCFI52:
 6203              		.cfi_def_cfa_offset 104
 6204 0004 18AB     		add	r3, sp, #96
 6205 0006 43F85C0D 		str	r0, [r3, #-92]!
 6206              	.LVL958:
2433:.\FatFs/ff.c  **** 	FRESULT res;
2434:.\FatFs/ff.c  **** 	DIR dj, sdj;
2435:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2436:.\FatFs/ff.c  **** 	BYTE *dir;
2437:.\FatFs/ff.c  **** 	DWORD dclst;
2438:.\FatFs/ff.c  **** 
2439:.\FatFs/ff.c  **** 
2440:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, 1);
 6207              		.loc 1 2440 0
 6208 000a 1846     		mov	r0, r3
 6209              	.LVL959:
 6210 000c 0FA9     		add	r1, sp, #60
 6211 000e 0122     		movs	r2, #1
 6212 0010 FFF7FEFF 		bl	chk_mounted
 6213              	.LVL960:
2441:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 6214              		.loc 1 2441 0
 6215 0014 0028     		cmp	r0, #0
 6216 0016 36D1     		bne	.L605
2442:.\FatFs/ff.c  **** 
2443:.\FatFs/ff.c  **** 	INITBUF(dj, sfn, lfn);
 6217              		.loc 1 2443 0
 6218 0018 03AB     		add	r3, sp, #12
 6219 001a 1593     		str	r3, [sp, #84]
 6220 001c 214B     		ldr	r3, .L616
 6221 001e 1693     		str	r3, [sp, #88]
2444:.\FatFs/ff.c  **** 	res = follow_path(&dj, path);			/* Follow the file path */
 6222              		.loc 1 2444 0
 6223 0020 0FA8     		add	r0, sp, #60
 6224              	.LVL961:
 6225 0022 0199     		ldr	r1, [sp, #4]
 6226 0024 FFF7FEFF 		bl	follow_path
 6227              	.LVL962:
2445:.\FatFs/ff.c  **** 	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2446:.\FatFs/ff.c  **** 		res = FR_INVALID_NAME;
2447:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
 6228              		.loc 1 2447 0
 6229 0028 70BB     		cbnz	r0, .L606
2448:.\FatFs/ff.c  **** 
2449:.\FatFs/ff.c  **** 	dir = dj.dir;
 6230              		.loc 1 2449 0
 6231 002a 149B     		ldr	r3, [sp, #80]
 6232              	.LVL963:
2450:.\FatFs/ff.c  **** 	if (!dir)								/* Is it the root directory? */
 6233              		.loc 1 2450 0
 6234 002c 6BB3     		cbz	r3, .L607
2451:.\FatFs/ff.c  **** 		LEAVE_FF(dj.fs, FR_INVALID_NAME);
2452:.\FatFs/ff.c  **** 	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
 6235              		.loc 1 2452 0
 6236 002e DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 6237 0030 12F0010F 		tst	r2, #1
 6238 0034 2BD1     		bne	.L608
2453:.\FatFs/ff.c  **** 		LEAVE_FF(dj.fs, FR_DENIED);
2454:.\FatFs/ff.c  **** 	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 6239              		.loc 1 2454 0
 6240 0036 9C8A     		ldrh	r4, [r3, #20]
 6241 0038 5B8B     		ldrh	r3, [r3, #26]
 6242              	.LVL964:
 6243 003a 43EA0444 		orr	r4, r3, r4, lsl #16
 6244              	.LVL965:
2455:.\FatFs/ff.c  **** 
2456:.\FatFs/ff.c  **** 	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 6245              		.loc 1 2456 0
 6246 003e 12F0100F 		tst	r2, #16
 6247 0042 12D0     		beq	.L603
2457:.\FatFs/ff.c  **** 		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 6248              		.loc 1 2457 0
 6249 0044 012C     		cmp	r4, #1
 6250 0046 24D9     		bls	.L609
2458:.\FatFs/ff.c  **** 		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
 6251              		.loc 1 2458 0
 6252 0048 06A8     		add	r0, sp, #24
 6253              	.LVL966:
 6254 004a 0FA9     		add	r1, sp, #60
 6255 004c 2422     		movs	r2, #36
 6256 004e FFF7FEFF 		bl	mem_cpy
 6257              	.LVL967:
2459:.\FatFs/ff.c  **** 		sdj.sclust = dclst;
 6258              		.loc 1 2459 0
 6259 0052 0894     		str	r4, [sp, #32]
2460:.\FatFs/ff.c  **** 		res = dir_seek(&sdj, 2);
 6260              		.loc 1 2460 0
 6261 0054 06A8     		add	r0, sp, #24
 6262 0056 0221     		movs	r1, #2
 6263 0058 FFF7FEFF 		bl	dir_seek
 6264              	.LVL968:
2461:.\FatFs/ff.c  **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);
 6265              		.loc 1 2461 0
 6266 005c D8B9     		cbnz	r0, .L610
2462:.\FatFs/ff.c  **** 		res = dir_read(&sdj);
 6267              		.loc 1 2462 0
 6268 005e 06A8     		add	r0, sp, #24
 6269              	.LVL969:
 6270 0060 FFF7FEFF 		bl	dir_read
 6271              	.LVL970:
2463:.\FatFs/ff.c  **** 		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
 6272              		.loc 1 2463 0
 6273 0064 C0B1     		cbz	r0, .L611
2464:.\FatFs/ff.c  **** 		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
 6274              		.loc 1 2464 0
 6275 0066 0428     		cmp	r0, #4
 6276 0068 18D1     		bne	.L612
 6277              	.L603:
2465:.\FatFs/ff.c  **** 	}
2466:.\FatFs/ff.c  **** 
2467:.\FatFs/ff.c  **** 	res = dir_remove(&dj);					/* Remove directory entry */
 6278              		.loc 1 2467 0
 6279 006a 0FA8     		add	r0, sp, #60
 6280              	.LVL971:
 6281 006c FFF7FEFF 		bl	dir_remove
 6282              	.LVL972:
2468:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 6283              		.loc 1 2468 0
 6284 0070 A8B9     		cbnz	r0, .L613
2469:.\FatFs/ff.c  **** 		if (dclst)
 6285              		.loc 1 2469 0
 6286 0072 24B1     		cbz	r4, .L604
2470:.\FatFs/ff.c  **** 			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
 6287              		.loc 1 2470 0
 6288 0074 0F98     		ldr	r0, [sp, #60]
 6289              	.LVL973:
 6290 0076 2146     		mov	r1, r4
 6291 0078 FFF7FEFF 		bl	remove_chain
 6292              	.LVL974:
2471:.\FatFs/ff.c  **** 		if (res == FR_OK) res = sync(dj.fs);
 6293              		.loc 1 2471 0
 6294 007c 80B9     		cbnz	r0, .L614
 6295              	.L604:
 6296              	.LVL975:
 6297              		.loc 1 2471 0 is_stmt 0 discriminator 1
 6298 007e 0F98     		ldr	r0, [sp, #60]
 6299 0080 FFF7FEFF 		bl	sync
 6300              	.LVL976:
 6301 0084 0CE0     		b	.L602
 6302              	.LVL977:
 6303              	.L605:
 6304 0086 0BE0     		b	.L602
 6305              	.L606:
 6306 0088 0AE0     		b	.L602
 6307              	.LVL978:
 6308              	.L607:
2451:.\FatFs/ff.c  **** 	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
 6309              		.loc 1 2451 0 is_stmt 1
 6310 008a 0620     		movs	r0, #6
 6311              	.LVL979:
 6312 008c 08E0     		b	.L602
 6313              	.LVL980:
 6314              	.L608:
2453:.\FatFs/ff.c  **** 	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 6315              		.loc 1 2453 0
 6316 008e 0720     		movs	r0, #7
 6317              	.LVL981:
 6318 0090 06E0     		b	.L602
 6319              	.LVL982:
 6320              	.L609:
2457:.\FatFs/ff.c  **** 		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
 6321              		.loc 1 2457 0
 6322 0092 0220     		movs	r0, #2
 6323              	.LVL983:
 6324 0094 04E0     		b	.L602
 6325              	.LVL984:
 6326              	.L610:
 6327 0096 03E0     		b	.L602
 6328              	.L611:
2463:.\FatFs/ff.c  **** 		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
 6329              		.loc 1 2463 0
 6330 0098 0720     		movs	r0, #7
 6331              	.LVL985:
 6332 009a 01E0     		b	.L602
 6333              	.LVL986:
 6334              	.L612:
 6335 009c 00E0     		b	.L602
 6336              	.L613:
 6337 009e FFE7     		b	.L602
 6338              	.L614:
 6339              	.LVL987:
 6340              	.L602:
2472:.\FatFs/ff.c  **** 	}
2473:.\FatFs/ff.c  **** 
2474:.\FatFs/ff.c  **** 	LEAVE_FF(dj.fs, res);
2475:.\FatFs/ff.c  **** }
 6341              		.loc 1 2475 0
 6342 00a0 18B0     		add	sp, sp, #96
 6343              	.LCFI53:
 6344              		.cfi_def_cfa_offset 8
 6345              	.LVL988:
 6346              		@ sp needed
 6347 00a2 10BD     		pop	{r4, pc}
 6348              	.LVL989:
 6349              	.L617:
 6350              		.align	2
 6351              	.L616:
 6352 00a4 00000000 		.word	.LANCHOR4
 6353              		.cfi_endproc
 6354              	.LFE69:
 6356              		.section	.text.f_mkdir,"ax",%progbits
 6357              		.align	2
 6358              		.global	f_mkdir
 6359              		.thumb
 6360              		.thumb_func
 6362              	f_mkdir:
 6363              	.LFB70:
2476:.\FatFs/ff.c  **** 
2477:.\FatFs/ff.c  **** 
2478:.\FatFs/ff.c  **** 
2479:.\FatFs/ff.c  **** 
2480:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2481:.\FatFs/ff.c  **** /* Create a Directory                                                    */
2482:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2483:.\FatFs/ff.c  **** 
2484:.\FatFs/ff.c  **** FRESULT f_mkdir (
2485:.\FatFs/ff.c  **** 	const XCHAR *path		/* Pointer to the directory path */
2486:.\FatFs/ff.c  **** )
2487:.\FatFs/ff.c  **** {
 6364              		.loc 1 2487 0
 6365              		.cfi_startproc
 6366              		@ args = 0, pretend = 0, frame = 56
 6367              		@ frame_needed = 0, uses_anonymous_args = 0
 6368              	.LVL990:
 6369 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6370              	.LCFI54:
 6371              		.cfi_def_cfa_offset 36
 6372              		.cfi_offset 4, -36
 6373              		.cfi_offset 5, -32
 6374              		.cfi_offset 6, -28
 6375              		.cfi_offset 7, -24
 6376              		.cfi_offset 8, -20
 6377              		.cfi_offset 9, -16
 6378              		.cfi_offset 10, -12
 6379              		.cfi_offset 11, -8
 6380              		.cfi_offset 14, -4
 6381 0004 8FB0     		sub	sp, sp, #60
 6382              	.LCFI55:
 6383              		.cfi_def_cfa_offset 96
 6384 0006 0EAB     		add	r3, sp, #56
 6385 0008 43F8340D 		str	r0, [r3, #-52]!
 6386              	.LVL991:
2488:.\FatFs/ff.c  **** 	FRESULT res;
2489:.\FatFs/ff.c  **** 	DIR dj;
2490:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2491:.\FatFs/ff.c  **** 	BYTE *dir, n;
2492:.\FatFs/ff.c  **** 	DWORD dsect, dclst, pclst, tim;
2493:.\FatFs/ff.c  **** 
2494:.\FatFs/ff.c  **** 
2495:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, 1);
 6387              		.loc 1 2495 0
 6388 000c 1846     		mov	r0, r3
 6389              	.LVL992:
 6390 000e 05A9     		add	r1, sp, #20
 6391 0010 0122     		movs	r2, #1
 6392 0012 FFF7FEFF 		bl	chk_mounted
 6393              	.LVL993:
2496:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 6394              		.loc 1 2496 0
 6395 0016 0028     		cmp	r0, #0
 6396 0018 40F09680 		bne	.L627
2497:.\FatFs/ff.c  **** 
2498:.\FatFs/ff.c  **** 	INITBUF(dj, sfn, lfn);
 6397              		.loc 1 2498 0
 6398 001c 02AB     		add	r3, sp, #8
 6399 001e 0B93     		str	r3, [sp, #44]
 6400 0020 534B     		ldr	r3, .L640
 6401 0022 0C93     		str	r3, [sp, #48]
2499:.\FatFs/ff.c  **** 	res = follow_path(&dj, path);			/* Follow the file path */
 6402              		.loc 1 2499 0
 6403 0024 05A8     		add	r0, sp, #20
 6404              	.LVL994:
 6405 0026 0199     		ldr	r1, [sp, #4]
 6406 0028 FFF7FEFF 		bl	follow_path
 6407              	.LVL995:
2500:.\FatFs/ff.c  **** 	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 6408              		.loc 1 2500 0
 6409 002c 0028     		cmp	r0, #0
 6410 002e 00F08C80 		beq	.L628
2501:.\FatFs/ff.c  **** 	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
2502:.\FatFs/ff.c  **** 		res = FR_INVALID_NAME;
2503:.\FatFs/ff.c  **** 	if (res != FR_NO_FILE)					/* Any error occurred */
 6411              		.loc 1 2503 0
 6412 0032 0428     		cmp	r0, #4
 6413 0034 40F08B80 		bne	.L629
2504:.\FatFs/ff.c  **** 		LEAVE_FF(dj.fs, res);
2505:.\FatFs/ff.c  **** 
2506:.\FatFs/ff.c  **** 	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
 6414              		.loc 1 2506 0
 6415 0038 0598     		ldr	r0, [sp, #20]
 6416              	.LVL996:
 6417 003a 0021     		movs	r1, #0
 6418 003c FFF7FEFF 		bl	create_chain
 6419              	.LVL997:
2507:.\FatFs/ff.c  **** 	res = FR_OK;
2508:.\FatFs/ff.c  **** 	if (dclst == 0) res = FR_DENIED;
 6420              		.loc 1 2508 0
 6421 0040 8146     		mov	r9, r0
 6422 0042 0028     		cmp	r0, #0
 6423 0044 00F08480 		beq	.L630
2509:.\FatFs/ff.c  **** 	if (dclst == 1) res = FR_INT_ERR;
 6424              		.loc 1 2509 0
 6425 0048 0128     		cmp	r0, #1
 6426 004a 00F08380 		beq	.L631
 6427 004e 84E0     		b	.L636
 6428              	.LVL998:
 6429              	.L638:
2510:.\FatFs/ff.c  **** 	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
2511:.\FatFs/ff.c  **** 	if (res == FR_OK)
2512:.\FatFs/ff.c  **** 		res = move_window(dj.fs, 0);
 6430              		.loc 1 2512 0
 6431 0050 0598     		ldr	r0, [sp, #20]
 6432 0052 0021     		movs	r1, #0
 6433 0054 FFF7FEFF 		bl	move_window
 6434              	.LVL999:
 6435 0058 FFE7     		b	.L625
 6436              	.LVL1000:
 6437              	.L625:
2513:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 6438              		.loc 1 2513 0
 6439 005a 0028     		cmp	r0, #0
 6440 005c 40F08480 		bne	.L637
2514:.\FatFs/ff.c  **** 	dsect = clust2sect(dj.fs, dclst);
 6441              		.loc 1 2514 0
 6442 0060 059C     		ldr	r4, [sp, #20]
 6443 0062 2046     		mov	r0, r4
 6444              	.LVL1001:
 6445 0064 4946     		mov	r1, r9
 6446 0066 FFF7FEFF 		bl	clust2sect
 6447              	.LVL1002:
 6448 006a 0746     		mov	r7, r0
 6449              	.LVL1003:
2515:.\FatFs/ff.c  **** 
2516:.\FatFs/ff.c  **** 	dir = dj.fs->win;						/* Initialize the new directory table */
 6450              		.loc 1 2516 0
 6451 006c 04F13006 		add	r6, r4, #48
 6452              	.LVL1004:
2517:.\FatFs/ff.c  **** 	mem_set(dir, 0, SS(dj.fs));
 6453              		.loc 1 2517 0
 6454 0070 3046     		mov	r0, r6
 6455              	.LVL1005:
 6456 0072 0021     		movs	r1, #0
 6457 0074 4FF40072 		mov	r2, #512
 6458 0078 FFF7FEFF 		bl	mem_set
 6459              	.LVL1006:
2518:.\FatFs/ff.c  **** 	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
 6460              		.loc 1 2518 0
 6461 007c 3046     		mov	r0, r6
 6462 007e 2021     		movs	r1, #32
 6463 0080 0B22     		movs	r2, #11
 6464 0082 FFF7FEFF 		bl	mem_set
 6465              	.LVL1007:
2519:.\FatFs/ff.c  **** 	dir[DIR_Name] = '.';
 6466              		.loc 1 2519 0
 6467 0086 2E25     		movs	r5, #46
 6468 0088 84F83050 		strb	r5, [r4, #48]
2520:.\FatFs/ff.c  **** 	dir[DIR_Attr] = AM_DIR;
 6469              		.loc 1 2520 0
 6470 008c 1023     		movs	r3, #16
 6471 008e 84F83B30 		strb	r3, [r4, #59]
2521:.\FatFs/ff.c  **** 	tim = get_fattime();
 6472              		.loc 1 2521 0
 6473 0092 FFF7FEFF 		bl	get_fattime
 6474              	.LVL1008:
 6475 0096 0090     		str	r0, [sp]
 6476              	.LVL1009:
2522:.\FatFs/ff.c  **** 	ST_DWORD(dir+DIR_WrtTime, tim);
 6477              		.loc 1 2522 0
 6478 0098 C4F84600 		str	r0, [r4, #70]
2523:.\FatFs/ff.c  **** 	ST_WORD(dir+DIR_FstClusLO, dclst);
 6479              		.loc 1 2523 0
 6480 009c 1FFA89FB 		uxth	fp, r9
 6481 00a0 A4F84AB0 		strh	fp, [r4, #74]	@ movhi
2524:.\FatFs/ff.c  **** 	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 6482              		.loc 1 2524 0
 6483 00a4 4FEA194A 		lsr	r10, r9, #16
 6484 00a8 A4F844A0 		strh	r10, [r4, #68]	@ movhi
2525:.\FatFs/ff.c  **** 	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 6485              		.loc 1 2525 0
 6486 00ac 04F15000 		add	r0, r4, #80
 6487              	.LVL1010:
 6488 00b0 3146     		mov	r1, r6
 6489 00b2 2022     		movs	r2, #32
 6490 00b4 FFF7FEFF 		bl	mem_cpy
 6491              	.LVL1011:
2526:.\FatFs/ff.c  **** 	dir[33] = '.';
 6492              		.loc 1 2526 0
 6493 00b8 84F85150 		strb	r5, [r4, #81]
2527:.\FatFs/ff.c  **** 	pclst = dj.sclust;
 6494              		.loc 1 2527 0
 6495 00bc 079B     		ldr	r3, [sp, #28]
 6496              	.LVL1012:
2528:.\FatFs/ff.c  **** 	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 6497              		.loc 1 2528 0
 6498 00be 059A     		ldr	r2, [sp, #20]
 6499 00c0 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 6500 00c2 0329     		cmp	r1, #3
 6501 00c4 03D1     		bne	.L621
 6502              		.loc 1 2528 0 is_stmt 0 discriminator 1
 6503 00c6 526A     		ldr	r2, [r2, #36]
2529:.\FatFs/ff.c  **** 		pclst = 0;
 6504              		.loc 1 2529 0 is_stmt 1 discriminator 1
 6505 00c8 9A42     		cmp	r2, r3
 6506 00ca 08BF     		it	eq
 6507 00cc 0023     		moveq	r3, #0
 6508              	.LVL1013:
 6509              	.L621:
2530:.\FatFs/ff.c  **** 	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 6510              		.loc 1 2530 0
 6511 00ce A4F86A30 		strh	r3, [r4, #106]	@ movhi
2531:.\FatFs/ff.c  **** 	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 6512              		.loc 1 2531 0
 6513 00d2 1B0C     		lsrs	r3, r3, #16
 6514              	.LVL1014:
 6515 00d4 A4F86430 		strh	r3, [r4, #100]	@ movhi
 6516              	.LVL1015:
2532:.\FatFs/ff.c  **** 	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 6517              		.loc 1 2532 0
 6518 00d8 0598     		ldr	r0, [sp, #20]
 6519 00da 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 6520 00dc CBB1     		cbz	r3, .L622
 6521 00de 3B46     		mov	r3, r7
2533:.\FatFs/ff.c  **** 		dj.fs->winsect = dsect++;
2534:.\FatFs/ff.c  **** 		dj.fs->wflag = 1;
 6522              		.loc 1 2534 0
 6523 00e0 4FF00108 		mov	r8, #1
2535:.\FatFs/ff.c  **** 		res = move_window(dj.fs, 0);
 6524              		.loc 1 2535 0
 6525 00e4 0025     		movs	r5, #0
 6526              	.LVL1016:
 6527              	.L623:
2533:.\FatFs/ff.c  **** 		dj.fs->winsect = dsect++;
 6528              		.loc 1 2533 0
 6529 00e6 5C1C     		adds	r4, r3, #1
 6530              	.LVL1017:
 6531 00e8 C362     		str	r3, [r0, #44]
2534:.\FatFs/ff.c  **** 		res = move_window(dj.fs, 0);
 6532              		.loc 1 2534 0
 6533 00ea 059B     		ldr	r3, [sp, #20]
 6534              	.LVL1018:
 6535 00ec 83F80480 		strb	r8, [r3, #4]
 6536              		.loc 1 2535 0
 6537 00f0 2946     		mov	r1, r5
 6538 00f2 FFF7FEFF 		bl	move_window
 6539              	.LVL1019:
2536:.\FatFs/ff.c  **** 		if (res) LEAVE_FF(dj.fs, res);
 6540              		.loc 1 2536 0
 6541 00f6 78BB     		cbnz	r0, .L633
2537:.\FatFs/ff.c  **** 		mem_set(dir, 0, SS(dj.fs));
 6542              		.loc 1 2537 0 discriminator 2
 6543 00f8 3046     		mov	r0, r6
 6544              	.LVL1020:
 6545 00fa 2946     		mov	r1, r5
 6546 00fc 4FF40072 		mov	r2, #512
 6547 0100 FFF7FEFF 		bl	mem_set
 6548              	.LVL1021:
2532:.\FatFs/ff.c  **** 		dj.fs->winsect = dsect++;
 6549              		.loc 1 2532 0 discriminator 2
 6550 0104 0598     		ldr	r0, [sp, #20]
2533:.\FatFs/ff.c  **** 		dj.fs->wflag = 1;
 6551              		.loc 1 2533 0 discriminator 2
 6552 0106 2346     		mov	r3, r4
 6553 0108 E41B     		subs	r4, r4, r7
 6554              	.LVL1022:
2532:.\FatFs/ff.c  **** 		dj.fs->winsect = dsect++;
 6555              		.loc 1 2532 0 discriminator 2
 6556 010a 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 6557 010c E4B2     		uxtb	r4, r4
 6558 010e A242     		cmp	r2, r4
 6559 0110 E9D8     		bhi	.L623
 6560              	.LVL1023:
 6561              	.L622:
2538:.\FatFs/ff.c  **** 	}
2539:.\FatFs/ff.c  **** 
2540:.\FatFs/ff.c  **** 	res = dir_register(&dj);
 6562              		.loc 1 2540 0
 6563 0112 05A8     		add	r0, sp, #20
 6564 0114 FFF7FEFF 		bl	dir_register
 6565              	.LVL1024:
2541:.\FatFs/ff.c  **** 	if (res != FR_OK) {
 6566              		.loc 1 2541 0
 6567 0118 0446     		mov	r4, r0
 6568 011a 28B1     		cbz	r0, .L624
2542:.\FatFs/ff.c  **** 		remove_chain(dj.fs, dclst);
 6569              		.loc 1 2542 0
 6570 011c 0598     		ldr	r0, [sp, #20]
 6571              	.LVL1025:
 6572 011e 4946     		mov	r1, r9
 6573 0120 FFF7FEFF 		bl	remove_chain
 6574              	.LVL1026:
2540:.\FatFs/ff.c  **** 	if (res != FR_OK) {
 6575              		.loc 1 2540 0
 6576 0124 2046     		mov	r0, r4
 6577 0126 1FE0     		b	.L637
 6578              	.LVL1027:
 6579              	.L624:
2543:.\FatFs/ff.c  **** 	} else {
2544:.\FatFs/ff.c  **** 		dir = dj.dir;
 6580              		.loc 1 2544 0
 6581 0128 0A9B     		ldr	r3, [sp, #40]
 6582              	.LVL1028:
2545:.\FatFs/ff.c  **** 		dir[DIR_Attr] = AM_DIR;					/* Attribute */
 6583              		.loc 1 2545 0
 6584 012a 1022     		movs	r2, #16
 6585 012c DA72     		strb	r2, [r3, #11]
2546:.\FatFs/ff.c  **** 		ST_DWORD(dir+DIR_WrtTime, tim);			/* Create time */
 6586              		.loc 1 2546 0
 6587 012e 009A     		ldr	r2, [sp]
 6588 0130 C3F81620 		str	r2, [r3, #22]
2547:.\FatFs/ff.c  **** 		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 6589              		.loc 1 2547 0
 6590 0134 A3F81AB0 		strh	fp, [r3, #26]	@ movhi
2548:.\FatFs/ff.c  **** 		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 6591              		.loc 1 2548 0
 6592 0138 A3F814A0 		strh	r10, [r3, #20]	@ movhi
2549:.\FatFs/ff.c  **** 		dj.fs->wflag = 1;
 6593              		.loc 1 2549 0
 6594 013c 0598     		ldr	r0, [sp, #20]
 6595              	.LVL1029:
 6596 013e 0123     		movs	r3, #1
 6597              	.LVL1030:
 6598 0140 0371     		strb	r3, [r0, #4]
2550:.\FatFs/ff.c  **** 		res = sync(dj.fs);
 6599              		.loc 1 2550 0
 6600 0142 FFF7FEFF 		bl	sync
 6601              	.LVL1031:
 6602 0146 0FE0     		b	.L637
 6603              	.LVL1032:
 6604              	.L627:
 6605 0148 0EE0     		b	.L637
 6606              	.L628:
2500:.\FatFs/ff.c  **** 	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 6607              		.loc 1 2500 0
 6608 014a 0820     		movs	r0, #8
 6609              	.LVL1033:
 6610 014c 0CE0     		b	.L637
 6611              	.LVL1034:
 6612              	.L629:
 6613 014e 0BE0     		b	.L637
 6614              	.LVL1035:
 6615              	.L630:
2508:.\FatFs/ff.c  **** 	if (dclst == 1) res = FR_INT_ERR;
 6616              		.loc 1 2508 0
 6617 0150 0720     		movs	r0, #7
 6618              	.LVL1036:
 6619 0152 09E0     		b	.L637
 6620              	.LVL1037:
 6621              	.L631:
2509:.\FatFs/ff.c  **** 	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
 6622              		.loc 1 2509 0
 6623 0154 0220     		movs	r0, #2
 6624              	.LVL1038:
 6625 0156 07E0     		b	.L637
 6626              	.LVL1039:
 6627              	.L633:
 6628 0158 06E0     		b	.L637
 6629              	.LVL1040:
 6630              	.L636:
2510:.\FatFs/ff.c  **** 	if (res == FR_OK)
 6631              		.loc 1 2510 0
 6632 015a B0F1FF3F 		cmp	r0, #-1
 6633 015e 08BF     		it	eq
 6634 0160 0120     		moveq	r0, #1
 6635              	.LVL1041:
 6636 0162 3FF47AAF 		beq	.L625
 6637 0166 73E7     		b	.L638
 6638              	.LVL1042:
 6639              	.L637:
2551:.\FatFs/ff.c  **** 	}
2552:.\FatFs/ff.c  **** 
2553:.\FatFs/ff.c  **** 	LEAVE_FF(dj.fs, res);
2554:.\FatFs/ff.c  **** }
 6640              		.loc 1 2554 0
 6641 0168 0FB0     		add	sp, sp, #60
 6642              	.LCFI56:
 6643              		.cfi_def_cfa_offset 36
 6644              		@ sp needed
 6645 016a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6646              	.LVL1043:
 6647              	.L641:
 6648 016e 00BF     		.align	2
 6649              	.L640:
 6650 0170 00000000 		.word	.LANCHOR4
 6651              		.cfi_endproc
 6652              	.LFE70:
 6654              		.section	.text.f_chmod,"ax",%progbits
 6655              		.align	2
 6656              		.global	f_chmod
 6657              		.thumb
 6658              		.thumb_func
 6660              	f_chmod:
 6661              	.LFB71:
2555:.\FatFs/ff.c  **** 
2556:.\FatFs/ff.c  **** 
2557:.\FatFs/ff.c  **** 
2558:.\FatFs/ff.c  **** 
2559:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2560:.\FatFs/ff.c  **** /* Change File Attribute                                                 */
2561:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2562:.\FatFs/ff.c  **** 
2563:.\FatFs/ff.c  **** FRESULT f_chmod (
2564:.\FatFs/ff.c  **** 	const XCHAR *path,	/* Pointer to the file path */
2565:.\FatFs/ff.c  **** 	BYTE value,			/* Attribute bits */
2566:.\FatFs/ff.c  **** 	BYTE mask			/* Attribute mask to change */
2567:.\FatFs/ff.c  **** )
2568:.\FatFs/ff.c  **** {
 6662              		.loc 1 2568 0
 6663              		.cfi_startproc
 6664              		@ args = 0, pretend = 0, frame = 56
 6665              		@ frame_needed = 0, uses_anonymous_args = 0
 6666              	.LVL1044:
 6667 0000 30B5     		push	{r4, r5, lr}
 6668              	.LCFI57:
 6669              		.cfi_def_cfa_offset 12
 6670              		.cfi_offset 4, -12
 6671              		.cfi_offset 5, -8
 6672              		.cfi_offset 14, -4
 6673 0002 8FB0     		sub	sp, sp, #60
 6674              	.LCFI58:
 6675              		.cfi_def_cfa_offset 72
 6676 0004 0EAB     		add	r3, sp, #56
 6677 0006 43F8340D 		str	r0, [r3, #-52]!
 6678 000a 0C46     		mov	r4, r1
 6679 000c 1546     		mov	r5, r2
 6680              	.LVL1045:
2569:.\FatFs/ff.c  **** 	FRESULT res;
2570:.\FatFs/ff.c  **** 	DIR dj;
2571:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2572:.\FatFs/ff.c  **** 	BYTE *dir;
2573:.\FatFs/ff.c  **** 
2574:.\FatFs/ff.c  **** 
2575:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, 1);
 6681              		.loc 1 2575 0
 6682 000e 1846     		mov	r0, r3
 6683              	.LVL1046:
 6684 0010 05A9     		add	r1, sp, #20
 6685              	.LVL1047:
 6686 0012 0122     		movs	r2, #1
 6687              	.LVL1048:
 6688 0014 FFF7FEFF 		bl	chk_mounted
 6689              	.LVL1049:
2576:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 6690              		.loc 1 2576 0
 6691 0018 0346     		mov	r3, r0
 6692 001a D8B9     		cbnz	r0, .L643
2577:.\FatFs/ff.c  **** 		INITBUF(dj, sfn, lfn);
 6693              		.loc 1 2577 0
 6694 001c 02AB     		add	r3, sp, #8
 6695 001e 0B93     		str	r3, [sp, #44]
 6696 0020 0E4B     		ldr	r3, .L646
 6697 0022 0C93     		str	r3, [sp, #48]
2578:.\FatFs/ff.c  **** 		res = follow_path(&dj, path);		/* Follow the file path */
 6698              		.loc 1 2578 0
 6699 0024 05A8     		add	r0, sp, #20
 6700              	.LVL1050:
 6701 0026 0199     		ldr	r1, [sp, #4]
 6702 0028 FFF7FEFF 		bl	follow_path
 6703              	.LVL1051:
2579:.\FatFs/ff.c  **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2580:.\FatFs/ff.c  **** 			res = FR_INVALID_NAME;
2581:.\FatFs/ff.c  **** 		if (res == FR_OK) {
 6704              		.loc 1 2581 0
 6705 002c 0346     		mov	r3, r0
 6706 002e 88B9     		cbnz	r0, .L643
2582:.\FatFs/ff.c  **** 			dir = dj.dir;
 6707              		.loc 1 2582 0
 6708 0030 0A9B     		ldr	r3, [sp, #40]
 6709              	.LVL1052:
2583:.\FatFs/ff.c  **** 			if (!dir) {						/* Is it a root directory? */
 6710              		.loc 1 2583 0
 6711 0032 73B1     		cbz	r3, .L644
2584:.\FatFs/ff.c  **** 				res = FR_INVALID_NAME;
2585:.\FatFs/ff.c  **** 			} else {						/* File or sub directory */
2586:.\FatFs/ff.c  **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 6712              		.loc 1 2586 0
 6713 0034 05F02705 		and	r5, r5, #39
 6714              	.LVL1053:
2587:.\FatFs/ff.c  **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 6715              		.loc 1 2587 0
 6716 0038 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 6717 003a 22EA0502 		bic	r2, r2, r5
 6718 003e 2C40     		ands	r4, r4, r5
 6719 0040 1443     		orrs	r4, r4, r2
 6720 0042 DC72     		strb	r4, [r3, #11]
2588:.\FatFs/ff.c  **** 				dj.fs->wflag = 1;
 6721              		.loc 1 2588 0
 6722 0044 0598     		ldr	r0, [sp, #20]
 6723              	.LVL1054:
 6724 0046 0123     		movs	r3, #1
 6725              	.LVL1055:
 6726 0048 0371     		strb	r3, [r0, #4]
2589:.\FatFs/ff.c  **** 				res = sync(dj.fs);
 6727              		.loc 1 2589 0
 6728 004a FFF7FEFF 		bl	sync
 6729              	.LVL1056:
 6730 004e 0346     		mov	r3, r0
 6731              	.LVL1057:
 6732 0050 00E0     		b	.L643
 6733              	.LVL1058:
 6734              	.L644:
2584:.\FatFs/ff.c  **** 			} else {						/* File or sub directory */
 6735              		.loc 1 2584 0
 6736 0052 0623     		movs	r3, #6
 6737              	.LVL1059:
 6738              	.L643:
2590:.\FatFs/ff.c  **** 			}
2591:.\FatFs/ff.c  **** 		}
2592:.\FatFs/ff.c  **** 	}
2593:.\FatFs/ff.c  **** 
2594:.\FatFs/ff.c  **** 	LEAVE_FF(dj.fs, res);
2595:.\FatFs/ff.c  **** }
 6739              		.loc 1 2595 0
 6740 0054 1846     		mov	r0, r3
 6741 0056 0FB0     		add	sp, sp, #60
 6742              	.LCFI59:
 6743              		.cfi_def_cfa_offset 12
 6744              		@ sp needed
 6745 0058 30BD     		pop	{r4, r5, pc}
 6746              	.LVL1060:
 6747              	.L647:
 6748 005a 00BF     		.align	2
 6749              	.L646:
 6750 005c 00000000 		.word	.LANCHOR4
 6751              		.cfi_endproc
 6752              	.LFE71:
 6754              		.section	.text.f_utime,"ax",%progbits
 6755              		.align	2
 6756              		.global	f_utime
 6757              		.thumb
 6758              		.thumb_func
 6760              	f_utime:
 6761              	.LFB72:
2596:.\FatFs/ff.c  **** 
2597:.\FatFs/ff.c  **** 
2598:.\FatFs/ff.c  **** 
2599:.\FatFs/ff.c  **** 
2600:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2601:.\FatFs/ff.c  **** /* Change Timestamp                                                      */
2602:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2603:.\FatFs/ff.c  **** 
2604:.\FatFs/ff.c  **** FRESULT f_utime (
2605:.\FatFs/ff.c  **** 	const XCHAR *path,	/* Pointer to the file/directory name */
2606:.\FatFs/ff.c  **** 	const FILINFO *fno	/* Pointer to the time-stamp to be set */
2607:.\FatFs/ff.c  **** )
2608:.\FatFs/ff.c  **** {
 6762              		.loc 1 2608 0
 6763              		.cfi_startproc
 6764              		@ args = 0, pretend = 0, frame = 56
 6765              		@ frame_needed = 0, uses_anonymous_args = 0
 6766              	.LVL1061:
 6767 0000 10B5     		push	{r4, lr}
 6768              	.LCFI60:
 6769              		.cfi_def_cfa_offset 8
 6770              		.cfi_offset 4, -8
 6771              		.cfi_offset 14, -4
 6772 0002 8EB0     		sub	sp, sp, #56
 6773              	.LCFI61:
 6774              		.cfi_def_cfa_offset 64
 6775 0004 0EAB     		add	r3, sp, #56
 6776 0006 43F8340D 		str	r0, [r3, #-52]!
 6777 000a 0C46     		mov	r4, r1
 6778              	.LVL1062:
2609:.\FatFs/ff.c  **** 	FRESULT res;
2610:.\FatFs/ff.c  **** 	DIR dj;
2611:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2612:.\FatFs/ff.c  **** 	BYTE *dir;
2613:.\FatFs/ff.c  **** 
2614:.\FatFs/ff.c  **** 
2615:.\FatFs/ff.c  **** 	res = chk_mounted(&path, &dj.fs, 1);
 6779              		.loc 1 2615 0
 6780 000c 1846     		mov	r0, r3
 6781              	.LVL1063:
 6782 000e 05A9     		add	r1, sp, #20
 6783              	.LVL1064:
 6784 0010 0122     		movs	r2, #1
 6785 0012 FFF7FEFF 		bl	chk_mounted
 6786              	.LVL1065:
2616:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 6787              		.loc 1 2616 0
 6788 0016 0346     		mov	r3, r0
 6789 0018 B8B9     		cbnz	r0, .L649
2617:.\FatFs/ff.c  **** 		INITBUF(dj, sfn, lfn);
 6790              		.loc 1 2617 0
 6791 001a 02AB     		add	r3, sp, #8
 6792 001c 0B93     		str	r3, [sp, #44]
 6793 001e 0C4B     		ldr	r3, .L652
 6794 0020 0C93     		str	r3, [sp, #48]
2618:.\FatFs/ff.c  **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6795              		.loc 1 2618 0
 6796 0022 05A8     		add	r0, sp, #20
 6797              	.LVL1066:
 6798 0024 0199     		ldr	r1, [sp, #4]
 6799 0026 FFF7FEFF 		bl	follow_path
 6800              	.LVL1067:
2619:.\FatFs/ff.c  **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2620:.\FatFs/ff.c  **** 			res = FR_INVALID_NAME;
2621:.\FatFs/ff.c  **** 		if (res == FR_OK) {
 6801              		.loc 1 2621 0
 6802 002a 0346     		mov	r3, r0
 6803 002c 68B9     		cbnz	r0, .L649
2622:.\FatFs/ff.c  **** 			dir = dj.dir;
 6804              		.loc 1 2622 0
 6805 002e 0A9B     		ldr	r3, [sp, #40]
 6806              	.LVL1068:
2623:.\FatFs/ff.c  **** 			if (!dir) {				/* Root directory */
 6807              		.loc 1 2623 0
 6808 0030 53B1     		cbz	r3, .L650
2624:.\FatFs/ff.c  **** 				res = FR_INVALID_NAME;
2625:.\FatFs/ff.c  **** 			} else {				/* File or sub-directory */
2626:.\FatFs/ff.c  **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 6809              		.loc 1 2626 0
 6810 0032 E288     		ldrh	r2, [r4, #6]
 6811 0034 DA82     		strh	r2, [r3, #22]	@ movhi
2627:.\FatFs/ff.c  **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 6812              		.loc 1 2627 0
 6813 0036 A288     		ldrh	r2, [r4, #4]
 6814 0038 1A83     		strh	r2, [r3, #24]	@ movhi
2628:.\FatFs/ff.c  **** 				dj.fs->wflag = 1;
 6815              		.loc 1 2628 0
 6816 003a 0598     		ldr	r0, [sp, #20]
 6817              	.LVL1069:
 6818 003c 0123     		movs	r3, #1
 6819              	.LVL1070:
 6820 003e 0371     		strb	r3, [r0, #4]
2629:.\FatFs/ff.c  **** 				res = sync(dj.fs);
 6821              		.loc 1 2629 0
 6822 0040 FFF7FEFF 		bl	sync
 6823              	.LVL1071:
 6824 0044 0346     		mov	r3, r0
 6825              	.LVL1072:
 6826 0046 00E0     		b	.L649
 6827              	.LVL1073:
 6828              	.L650:
2624:.\FatFs/ff.c  **** 			} else {				/* File or sub-directory */
 6829              		.loc 1 2624 0
 6830 0048 0623     		movs	r3, #6
 6831              	.LVL1074:
 6832              	.L649:
2630:.\FatFs/ff.c  **** 			}
2631:.\FatFs/ff.c  **** 		}
2632:.\FatFs/ff.c  **** 	}
2633:.\FatFs/ff.c  **** 
2634:.\FatFs/ff.c  **** 	LEAVE_FF(dj.fs, res);
2635:.\FatFs/ff.c  **** }
 6833              		.loc 1 2635 0
 6834 004a 1846     		mov	r0, r3
 6835 004c 0EB0     		add	sp, sp, #56
 6836              	.LCFI62:
 6837              		.cfi_def_cfa_offset 8
 6838              	.LVL1075:
 6839              		@ sp needed
 6840 004e 10BD     		pop	{r4, pc}
 6841              	.LVL1076:
 6842              	.L653:
 6843              		.align	2
 6844              	.L652:
 6845 0050 00000000 		.word	.LANCHOR4
 6846              		.cfi_endproc
 6847              	.LFE72:
 6849              		.section	.text.f_rename,"ax",%progbits
 6850              		.align	2
 6851              		.global	f_rename
 6852              		.thumb
 6853              		.thumb_func
 6855              	f_rename:
 6856              	.LFB73:
2636:.\FatFs/ff.c  **** 
2637:.\FatFs/ff.c  **** 
2638:.\FatFs/ff.c  **** 
2639:.\FatFs/ff.c  **** 
2640:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2641:.\FatFs/ff.c  **** /* Rename File/Directory                                                 */
2642:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2643:.\FatFs/ff.c  **** 
2644:.\FatFs/ff.c  **** FRESULT f_rename (
2645:.\FatFs/ff.c  **** 	const XCHAR *path_old,	/* Pointer to the old name */
2646:.\FatFs/ff.c  **** 	const XCHAR *path_new	/* Pointer to the new name */
2647:.\FatFs/ff.c  **** )
2648:.\FatFs/ff.c  **** {
 6857              		.loc 1 2648 0
 6858              		.cfi_startproc
 6859              		@ args = 0, pretend = 0, frame = 120
 6860              		@ frame_needed = 0, uses_anonymous_args = 0
 6861              	.LVL1077:
 6862 0000 30B5     		push	{r4, r5, lr}
 6863              	.LCFI63:
 6864              		.cfi_def_cfa_offset 12
 6865              		.cfi_offset 4, -12
 6866              		.cfi_offset 5, -8
 6867              		.cfi_offset 14, -4
 6868 0002 9FB0     		sub	sp, sp, #124
 6869              	.LCFI64:
 6870              		.cfi_def_cfa_offset 136
 6871 0004 0190     		str	r0, [sp, #4]
 6872 0006 0C46     		mov	r4, r1
 6873              	.LVL1078:
2649:.\FatFs/ff.c  **** 	FRESULT res;
2650:.\FatFs/ff.c  **** 	DIR dj_old, dj_new;
2651:.\FatFs/ff.c  **** 	NAMEBUF(sfn, lfn);
2652:.\FatFs/ff.c  **** 	BYTE buf[21], *dir;
2653:.\FatFs/ff.c  **** 	DWORD dw;
2654:.\FatFs/ff.c  **** 
2655:.\FatFs/ff.c  **** 
2656:.\FatFs/ff.c  **** 	INITBUF(dj_old, sfn, lfn);
 6874              		.loc 1 2656 0
 6875 0008 09AB     		add	r3, sp, #36
 6876 000a 1B93     		str	r3, [sp, #108]
 6877 000c 3D4B     		ldr	r3, .L671
 6878 000e 1C93     		str	r3, [sp, #112]
2657:.\FatFs/ff.c  **** 	res = chk_mounted(&path_old, &dj_old.fs, 1);
 6879              		.loc 1 2657 0
 6880 0010 01A8     		add	r0, sp, #4
 6881              	.LVL1079:
 6882 0012 15A9     		add	r1, sp, #84
 6883              	.LVL1080:
 6884 0014 0122     		movs	r2, #1
 6885 0016 FFF7FEFF 		bl	chk_mounted
 6886              	.LVL1081:
2658:.\FatFs/ff.c  **** 	if (res == FR_OK) {
 6887              		.loc 1 2658 0
 6888 001a 0028     		cmp	r0, #0
 6889 001c 5FD1     		bne	.L661
2659:.\FatFs/ff.c  **** 		dj_new.fs = dj_old.fs;
 6890              		.loc 1 2659 0
 6891 001e 159B     		ldr	r3, [sp, #84]
 6892 0020 0C93     		str	r3, [sp, #48]
2660:.\FatFs/ff.c  **** 		res = follow_path(&dj_old, path_old);	/* Check old object */
 6893              		.loc 1 2660 0
 6894 0022 15A8     		add	r0, sp, #84
 6895              	.LVL1082:
 6896 0024 0199     		ldr	r1, [sp, #4]
 6897 0026 FFF7FEFF 		bl	follow_path
 6898              	.LVL1083:
2661:.\FatFs/ff.c  **** 		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
2662:.\FatFs/ff.c  **** 			res = FR_INVALID_NAME;
2663:.\FatFs/ff.c  **** 	}
2664:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
 6899              		.loc 1 2664 0
 6900 002a 0028     		cmp	r0, #0
 6901 002c 58D1     		bne	.L662
2665:.\FatFs/ff.c  **** 
2666:.\FatFs/ff.c  **** 	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 6902              		.loc 1 2666 0
 6903 002e 1A99     		ldr	r1, [sp, #104]
 6904 0030 0029     		cmp	r1, #0
 6905 0032 56D0     		beq	.L663
2667:.\FatFs/ff.c  **** 	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
 6906              		.loc 1 2667 0
 6907 0034 03A8     		add	r0, sp, #12
 6908              	.LVL1084:
 6909 0036 0B31     		adds	r1, r1, #11
 6910 0038 1522     		movs	r2, #21
 6911 003a FFF7FEFF 		bl	mem_cpy
 6912              	.LVL1085:
2668:.\FatFs/ff.c  **** 
2669:.\FatFs/ff.c  **** 	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
 6913              		.loc 1 2669 0
 6914 003e 0CA8     		add	r0, sp, #48
 6915 0040 15A9     		add	r1, sp, #84
 6916 0042 2422     		movs	r2, #36
 6917 0044 FFF7FEFF 		bl	mem_cpy
 6918              	.LVL1086:
2670:.\FatFs/ff.c  **** 	res = follow_path(&dj_new, path_new);		/* Check new object */
 6919              		.loc 1 2670 0
 6920 0048 0CA8     		add	r0, sp, #48
 6921 004a 2146     		mov	r1, r4
 6922 004c FFF7FEFF 		bl	follow_path
 6923              	.LVL1087:
2671:.\FatFs/ff.c  **** 	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 6924              		.loc 1 2671 0
 6925 0050 0028     		cmp	r0, #0
 6926 0052 48D0     		beq	.L664
2672:.\FatFs/ff.c  **** 	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
 6927              		.loc 1 2672 0
 6928 0054 0428     		cmp	r0, #4
 6929 0056 48D1     		bne	.L665
2673:.\FatFs/ff.c  **** 		res = dir_register(&dj_new);			/* Register the new object */
 6930              		.loc 1 2673 0
 6931 0058 0CA8     		add	r0, sp, #48
 6932              	.LVL1088:
 6933 005a FFF7FEFF 		bl	dir_register
 6934              	.LVL1089:
2674:.\FatFs/ff.c  **** 		if (res == FR_OK) {
 6935              		.loc 1 2674 0
 6936 005e 0028     		cmp	r0, #0
 6937 0060 44D1     		bne	.L666
2675:.\FatFs/ff.c  **** 			dir = dj_new.dir;					/* Copy object information into new entry */
 6938              		.loc 1 2675 0
 6939 0062 119C     		ldr	r4, [sp, #68]
 6940              	.LVL1090:
2676:.\FatFs/ff.c  **** 			mem_cpy(dir+13, buf+2, 19);
 6941              		.loc 1 2676 0
 6942 0064 04F10D00 		add	r0, r4, #13
 6943              	.LVL1091:
 6944 0068 0DF10E01 		add	r1, sp, #14
 6945 006c 1322     		movs	r2, #19
 6946 006e FFF7FEFF 		bl	mem_cpy
 6947              	.LVL1092:
2677:.\FatFs/ff.c  **** 			dir[DIR_Attr] = buf[0] | AM_ARC;
 6948              		.loc 1 2677 0
 6949 0072 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 6950 0076 43F02003 		orr	r3, r3, #32
 6951 007a E372     		strb	r3, [r4, #11]
2678:.\FatFs/ff.c  **** 			dj_old.fs->wflag = 1;
 6952              		.loc 1 2678 0
 6953 007c 0122     		movs	r2, #1
 6954 007e 159B     		ldr	r3, [sp, #84]
 6955 0080 1A71     		strb	r2, [r3, #4]
2679:.\FatFs/ff.c  **** 			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
 6956              		.loc 1 2679 0
 6957 0082 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 6958 0084 13F0100F 		tst	r3, #16
 6959 0088 34D0     		beq	.L656
2680:.\FatFs/ff.c  **** 				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
 6960              		.loc 1 2680 0
 6961 008a 0C9D     		ldr	r5, [sp, #48]
 6962 008c 618B     		ldrh	r1, [r4, #26]
 6963 008e A38A     		ldrh	r3, [r4, #20]
 6964 0090 1943     		orrs	r1, r1, r3
 6965 0092 2846     		mov	r0, r5
 6966 0094 89B2     		uxth	r1, r1
 6967 0096 FFF7FEFF 		bl	clust2sect
 6968              	.LVL1093:
2681:.\FatFs/ff.c  **** 				if (!dw) {
 6969              		.loc 1 2681 0
 6970 009a 0146     		mov	r1, r0
 6971 009c 38B3     		cbz	r0, .L667
2682:.\FatFs/ff.c  **** 					res = FR_INT_ERR;
2683:.\FatFs/ff.c  **** 				} else {
2684:.\FatFs/ff.c  **** 					res = move_window(dj_new.fs, dw);
 6972              		.loc 1 2684 0
 6973 009e 2846     		mov	r0, r5
 6974              	.LVL1094:
 6975 00a0 FFF7FEFF 		bl	move_window
 6976              	.LVL1095:
2685:.\FatFs/ff.c  **** 					dir = dj_new.fs->win+32;
 6977              		.loc 1 2685 0
 6978 00a4 0C9A     		ldr	r2, [sp, #48]
 6979              	.LVL1096:
2686:.\FatFs/ff.c  **** 					if (res == FR_OK && dir[1] == '.') {
 6980              		.loc 1 2686 0
 6981 00a6 0346     		mov	r3, r0
 6982 00a8 10BB     		cbnz	r0, .L657
 6983              		.loc 1 2686 0 is_stmt 0 discriminator 1
 6984 00aa 92F85130 		ldrb	r3, [r2, #81]	@ zero_extendqisi2
 6985 00ae 2E2B     		cmp	r3, #46
 6986 00b0 20D1     		bne	.L656
2687:.\FatFs/ff.c  **** 						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.scl
 6987              		.loc 1 2687 0 is_stmt 1
 6988 00b2 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6989 00b4 032B     		cmp	r3, #3
 6990 00b6 03D1     		bne	.L658
 6991              		.loc 1 2687 0 is_stmt 0 discriminator 2
 6992 00b8 536A     		ldr	r3, [r2, #36]
 6993 00ba 0E99     		ldr	r1, [sp, #56]
 6994 00bc 9942     		cmp	r1, r3
 6995 00be 01D0     		beq	.L668
 6996              	.L658:
 6997              		.loc 1 2687 0 discriminator 3
 6998 00c0 0E9B     		ldr	r3, [sp, #56]
 6999 00c2 00E0     		b	.L659
 7000              	.L668:
 7001              		.loc 1 2687 0
 7002 00c4 0023     		movs	r3, #0
 7003              	.L659:
 7004              	.LVL1097:
2688:.\FatFs/ff.c  **** 						ST_WORD(dir+DIR_FstClusLO, dw);
 7005              		.loc 1 2688 0 is_stmt 1 discriminator 6
 7006 00c6 A2F86A30 		strh	r3, [r2, #106]	@ movhi
2689:.\FatFs/ff.c  **** 						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
 7007              		.loc 1 2689 0 discriminator 6
 7008 00ca 1B0C     		lsrs	r3, r3, #16
 7009              	.LVL1098:
 7010 00cc A2F86430 		strh	r3, [r2, #100]	@ movhi
2690:.\FatFs/ff.c  **** 						dj_new.fs->wflag = 1;
 7011              		.loc 1 2690 0 discriminator 6
 7012 00d0 0123     		movs	r3, #1
 7013 00d2 1371     		strb	r3, [r2, #4]
 7014 00d4 0EE0     		b	.L656
 7015              	.LVL1099:
 7016              	.L660:
2691:.\FatFs/ff.c  **** 					}
2692:.\FatFs/ff.c  **** 				}
2693:.\FatFs/ff.c  **** 			}
2694:.\FatFs/ff.c  **** 			if (res == FR_OK) {
2695:.\FatFs/ff.c  **** 				res = dir_remove(&dj_old);			/* Remove old entry */
2696:.\FatFs/ff.c  **** 				if (res == FR_OK)
2697:.\FatFs/ff.c  **** 					res = sync(dj_old.fs);
 7017              		.loc 1 2697 0
 7018 00d6 1598     		ldr	r0, [sp, #84]
 7019              	.LVL1100:
 7020 00d8 FFF7FEFF 		bl	sync
 7021              	.LVL1101:
 7022 00dc 0FE0     		b	.L669
 7023              	.LVL1102:
 7024              	.L661:
 7025 00de 0EE0     		b	.L669
 7026              	.L662:
 7027 00e0 0DE0     		b	.L669
 7028              	.L663:
2666:.\FatFs/ff.c  **** 	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
 7029              		.loc 1 2666 0
 7030 00e2 0420     		movs	r0, #4
 7031              	.LVL1103:
 7032 00e4 0BE0     		b	.L669
 7033              	.LVL1104:
 7034              	.L664:
2671:.\FatFs/ff.c  **** 	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
 7035              		.loc 1 2671 0
 7036 00e6 0820     		movs	r0, #8
 7037              	.LVL1105:
 7038 00e8 09E0     		b	.L669
 7039              	.LVL1106:
 7040              	.L665:
 7041 00ea 08E0     		b	.L669
 7042              	.L666:
 7043 00ec 07E0     		b	.L669
 7044              	.LVL1107:
 7045              	.L667:
2682:.\FatFs/ff.c  **** 				} else {
 7046              		.loc 1 2682 0
 7047 00ee 0223     		movs	r3, #2
 7048              	.LVL1108:
 7049              	.L657:
2695:.\FatFs/ff.c  **** 				if (res == FR_OK)
 7050              		.loc 1 2695 0
 7051 00f0 1846     		mov	r0, r3
 7052 00f2 04E0     		b	.L669
 7053              	.LVL1109:
 7054              	.L656:
 7055 00f4 15A8     		add	r0, sp, #84
 7056 00f6 FFF7FEFF 		bl	dir_remove
 7057              	.LVL1110:
2696:.\FatFs/ff.c  **** 					res = sync(dj_old.fs);
 7058              		.loc 1 2696 0
 7059 00fa 0028     		cmp	r0, #0
 7060 00fc EBD0     		beq	.L660
 7061              	.LVL1111:
 7062              	.L669:
2698:.\FatFs/ff.c  **** 			}
2699:.\FatFs/ff.c  **** 		}
2700:.\FatFs/ff.c  **** 	}
2701:.\FatFs/ff.c  **** 
2702:.\FatFs/ff.c  **** 	LEAVE_FF(dj_old.fs, res);
2703:.\FatFs/ff.c  **** }
 7063              		.loc 1 2703 0
 7064 00fe 1FB0     		add	sp, sp, #124
 7065              	.LCFI65:
 7066              		.cfi_def_cfa_offset 12
 7067              		@ sp needed
 7068 0100 30BD     		pop	{r4, r5, pc}
 7069              	.LVL1112:
 7070              	.L672:
 7071 0102 00BF     		.align	2
 7072              	.L671:
 7073 0104 00000000 		.word	.LANCHOR4
 7074              		.cfi_endproc
 7075              	.LFE73:
 7077              		.section	.text.f_mkfs,"ax",%progbits
 7078              		.align	2
 7079              		.global	f_mkfs
 7080              		.thumb
 7081              		.thumb_func
 7083              	f_mkfs:
 7084              	.LFB74:
2704:.\FatFs/ff.c  **** 
2705:.\FatFs/ff.c  **** #endif /* !_FS_READONLY */
2706:.\FatFs/ff.c  **** #endif /* _FS_MINIMIZE == 0 */
2707:.\FatFs/ff.c  **** #endif /* _FS_MINIMIZE <= 1 */
2708:.\FatFs/ff.c  **** #endif /* _FS_MINIMIZE <= 2 */
2709:.\FatFs/ff.c  **** 
2710:.\FatFs/ff.c  **** 
2711:.\FatFs/ff.c  **** 
2712:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2713:.\FatFs/ff.c  **** /* Forward data to the stream directly (Available on only _FS_TINY cfg)  */
2714:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2715:.\FatFs/ff.c  **** #if _USE_FORWARD && _FS_TINY
2716:.\FatFs/ff.c  **** 
2717:.\FatFs/ff.c  **** FRESULT f_forward (
2718:.\FatFs/ff.c  **** 	FIL *fp, 						/* Pointer to the file object */
2719:.\FatFs/ff.c  **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
2720:.\FatFs/ff.c  **** 	UINT btr,						/* Number of bytes to forward */
2721:.\FatFs/ff.c  **** 	UINT *bf						/* Pointer to number of bytes forwarded */
2722:.\FatFs/ff.c  **** )
2723:.\FatFs/ff.c  **** {
2724:.\FatFs/ff.c  **** 	FRESULT res;
2725:.\FatFs/ff.c  **** 	DWORD remain, clst, sect;
2726:.\FatFs/ff.c  **** 	UINT rcnt;
2727:.\FatFs/ff.c  **** 
2728:.\FatFs/ff.c  **** 
2729:.\FatFs/ff.c  **** 	*bf = 0;
2730:.\FatFs/ff.c  **** 
2731:.\FatFs/ff.c  **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
2732:.\FatFs/ff.c  **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2733:.\FatFs/ff.c  **** 	if (fp->flag & FA__ERROR)						/* Check error flag */
2734:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2735:.\FatFs/ff.c  **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
2736:.\FatFs/ff.c  **** 		LEAVE_FF(fp->fs, FR_DENIED);
2737:.\FatFs/ff.c  **** 
2738:.\FatFs/ff.c  **** 	remain = fp->fsize - fp->fptr;
2739:.\FatFs/ff.c  **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
2740:.\FatFs/ff.c  **** 
2741:.\FatFs/ff.c  **** 	for ( ;  btr && (*func)(NULL, 0);				/* Repeat until all data transferred or stream becomes busy *
2742:.\FatFs/ff.c  **** 		fp->fptr += rcnt, *bf += rcnt, btr -= rcnt) {
2743:.\FatFs/ff.c  **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
2744:.\FatFs/ff.c  **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
2745:.\FatFs/ff.c  **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
2746:.\FatFs/ff.c  **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
2747:.\FatFs/ff.c  **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
2748:.\FatFs/ff.c  **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2749:.\FatFs/ff.c  **** 				fp->curr_clust = clst;				/* Update current cluster */
2750:.\FatFs/ff.c  **** 				fp->csect = 0;						/* Reset sector address in the cluster */
2751:.\FatFs/ff.c  **** 			}
2752:.\FatFs/ff.c  **** 			fp->csect++;							/* Next sector address in the cluster */
2753:.\FatFs/ff.c  **** 		}
2754:.\FatFs/ff.c  **** 		sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current data sector */
2755:.\FatFs/ff.c  **** 		if (!sect) ABORT(fp->fs, FR_INT_ERR);
2756:.\FatFs/ff.c  **** 		sect += fp->csect - 1;
2757:.\FatFs/ff.c  **** 		if (move_window(fp->fs, sect))				/* Move sector window */
2758:.\FatFs/ff.c  **** 			ABORT(fp->fs, FR_DISK_ERR);
2759:.\FatFs/ff.c  **** 		fp->dsect = sect;
2760:.\FatFs/ff.c  **** 		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
2761:.\FatFs/ff.c  **** 		if (rcnt > btr) rcnt = btr;
2762:.\FatFs/ff.c  **** 		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
2763:.\FatFs/ff.c  **** 		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
2764:.\FatFs/ff.c  **** 	}
2765:.\FatFs/ff.c  **** 
2766:.\FatFs/ff.c  **** 	LEAVE_FF(fp->fs, FR_OK);
2767:.\FatFs/ff.c  **** }
2768:.\FatFs/ff.c  **** #endif /* _USE_FORWARD */
2769:.\FatFs/ff.c  **** 
2770:.\FatFs/ff.c  **** 
2771:.\FatFs/ff.c  **** 
2772:.\FatFs/ff.c  **** #if _USE_MKFS && !_FS_READONLY
2773:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2774:.\FatFs/ff.c  **** /* Create File System on the Drive                                       */
2775:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2776:.\FatFs/ff.c  **** #define N_ROOTDIR	512			/* Multiple of 32 and <= 2048 */
2777:.\FatFs/ff.c  **** #define N_FATS		1			/* 1 or 2 */
2778:.\FatFs/ff.c  **** #define MAX_SECTOR	131072000UL	/* Maximum partition size */
2779:.\FatFs/ff.c  **** #define MIN_SECTOR	2000UL		/* Minimum partition size */
2780:.\FatFs/ff.c  **** 
2781:.\FatFs/ff.c  **** 
2782:.\FatFs/ff.c  **** FRESULT f_mkfs (
2783:.\FatFs/ff.c  **** 	BYTE drv,			/* Logical drive number */
2784:.\FatFs/ff.c  **** 	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
2785:.\FatFs/ff.c  **** 	WORD allocsize		/* Allocation unit size [bytes] */
2786:.\FatFs/ff.c  **** )
2787:.\FatFs/ff.c  **** {
 7085              		.loc 1 2787 0
 7086              		.cfi_startproc
 7087              		@ args = 0, pretend = 0, frame = 24
 7088              		@ frame_needed = 0, uses_anonymous_args = 0
 7089              	.LVL1113:
2788:.\FatFs/ff.c  **** 	static const DWORD sstbl[] = { 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000
2789:.\FatFs/ff.c  **** 	static const WORD cstbl[] =  {   32768,   16384,   8192,   4096,   2048, 16384,  8192,  4096, 2048
2790:.\FatFs/ff.c  **** 	BYTE fmt, m, *tbl;
2791:.\FatFs/ff.c  **** 	DWORD b_part, b_fat, b_dir, b_data;		/* Area offset (LBA) */
2792:.\FatFs/ff.c  **** 	DWORD n_part, n_rsv, n_fat, n_dir;		/* Area size */
2793:.\FatFs/ff.c  **** 	DWORD n_clst, d, n;
2794:.\FatFs/ff.c  **** 	WORD as;
2795:.\FatFs/ff.c  **** 	FATFS *fs;
2796:.\FatFs/ff.c  **** 	DSTATUS stat;
2797:.\FatFs/ff.c  **** 
2798:.\FatFs/ff.c  **** 
2799:.\FatFs/ff.c  **** 	/* Check validity of the parameters */
2800:.\FatFs/ff.c  **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 7090              		.loc 1 2800 0
 7091 0000 0028     		cmp	r0, #0
 7092 0002 40F0EB81 		bne	.L709
2787:.\FatFs/ff.c  **** 	static const DWORD sstbl[] = { 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000
 7093              		.loc 1 2787 0
 7094 0006 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7095              	.LCFI66:
 7096              		.cfi_def_cfa_offset 36
 7097              		.cfi_offset 4, -36
 7098              		.cfi_offset 5, -32
 7099              		.cfi_offset 6, -28
 7100              		.cfi_offset 7, -24
 7101              		.cfi_offset 8, -20
 7102              		.cfi_offset 9, -16
 7103              		.cfi_offset 10, -12
 7104              		.cfi_offset 11, -8
 7105              		.cfi_offset 14, -4
 7106 000a 87B0     		sub	sp, sp, #28
 7107              	.LCFI67:
 7108              		.cfi_def_cfa_offset 64
 7109 000c 0E46     		mov	r6, r1
 7110 000e 1446     		mov	r4, r2
2801:.\FatFs/ff.c  **** 	if (partition >= 2) return FR_MKFS_ABORTED;
 7111              		.loc 1 2801 0
 7112 0010 0129     		cmp	r1, #1
 7113 0012 00F2E581 		bhi	.L710
2802:.\FatFs/ff.c  **** 
2803:.\FatFs/ff.c  **** 	/* Check mounted drive and clear work area */
2804:.\FatFs/ff.c  **** 	fs = FatFs[drv];
 7114              		.loc 1 2804 0
 7115 0016 BE4B     		ldr	r3, .L739
 7116 0018 1D68     		ldr	r5, [r3]
 7117              	.LVL1114:
2805:.\FatFs/ff.c  **** 	if (!fs) return FR_NOT_ENABLED;
 7118              		.loc 1 2805 0
 7119 001a 002D     		cmp	r5, #0
 7120 001c 00F0E281 		beq	.L711
2806:.\FatFs/ff.c  **** 	fs->fs_type = 0;
 7121              		.loc 1 2806 0
 7122 0020 2870     		strb	r0, [r5]
 7123              	.LVL1115:
2807:.\FatFs/ff.c  **** 	drv = LD2PD(drv);
2808:.\FatFs/ff.c  **** 
2809:.\FatFs/ff.c  **** 	/* Get disk statics */
2810:.\FatFs/ff.c  **** 	stat = disk_initialize(drv);
 7124              		.loc 1 2810 0
 7125 0022 FFF7FEFF 		bl	disk_initialize
 7126              	.LVL1116:
2811:.\FatFs/ff.c  **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 7127              		.loc 1 2811 0
 7128 0026 10F0010F 		tst	r0, #1
 7129 002a 40F0DD81 		bne	.L712
2812:.\FatFs/ff.c  **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 7130              		.loc 1 2812 0
 7131 002e 10F0040F 		tst	r0, #4
 7132 0032 40F0DB81 		bne	.L713
2813:.\FatFs/ff.c  **** #if _MAX_SS != 512						/* Get disk sector size */
2814:.\FatFs/ff.c  **** 	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
2815:.\FatFs/ff.c  **** 		|| SS(fs) > _MAX_SS)
2816:.\FatFs/ff.c  **** 		return FR_MKFS_ABORTED;
2817:.\FatFs/ff.c  **** #endif
2818:.\FatFs/ff.c  **** 	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
 7133              		.loc 1 2818 0
 7134 0036 0020     		movs	r0, #0
 7135              	.LVL1117:
 7136 0038 0121     		movs	r1, #1
 7137 003a 05AA     		add	r2, sp, #20
 7138 003c FFF7FEFF 		bl	disk_ioctl
 7139              	.LVL1118:
 7140 0040 0028     		cmp	r0, #0
 7141 0042 40F0D581 		bne	.L714
 7142              		.loc 1 2818 0 is_stmt 0 discriminator 1
 7143 0046 059B     		ldr	r3, [sp, #20]
 7144 0048 B3F5FA6F 		cmp	r3, #2000
 7145 004c C0F0D281 		bcc	.L715
2819:.\FatFs/ff.c  **** 		return FR_MKFS_ABORTED;
2820:.\FatFs/ff.c  **** 	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
 7146              		.loc 1 2820 0 is_stmt 1
 7147 0050 B3F1FA6F 		cmp	r3, #131072000
 7148 0054 84BF     		itt	hi
 7149 0056 4FF0FA63 		movhi	r3, #131072000
 7150 005a 0593     		strhi	r3, [sp, #20]
2821:.\FatFs/ff.c  **** 	b_part = (!partition) ? 63 : 0;		/* Boot sector */
 7151              		.loc 1 2821 0
 7152 005c 002E     		cmp	r6, #0
 7153 005e 0CBF     		ite	eq
 7154 0060 4FF03F09 		moveq	r9, #63
 7155 0064 4FF00009 		movne	r9, #0
 7156              	.LVL1119:
2822:.\FatFs/ff.c  **** 	n_part -= b_part;
 7157              		.loc 1 2822 0
 7158 0068 059B     		ldr	r3, [sp, #20]
 7159 006a C9EB0303 		rsb	r3, r9, r3
 7160 006e 0593     		str	r3, [sp, #20]
 7161              	.LVL1120:
2823:.\FatFs/ff.c  **** 	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit s
 7162              		.loc 1 2823 0
 7163 0070 2146     		mov	r1, r4
 7164 0072 B4F5007F 		cmp	r4, #512
 7165 0076 18BF     		it	ne
 7166 0078 4FF48062 		movne	r2, #1024
 7167 007c 05D1     		bne	.L677
 7168 007e 09E0     		b	.L678
 7169              	.LVL1121:
 7170              	.L680:
 7171              		.loc 1 2823 0 is_stmt 0 discriminator 4
 7172 0080 5200     		lsls	r2, r2, #1
 7173              	.LVL1122:
 7174 0082 B2F5004F 		cmp	r2, #32768
 7175 0086 00D9     		bls	.L677
 7176 0088 02E0     		b	.L679
 7177              	.LVL1123:
 7178              	.L677:
 7179              		.loc 1 2823 0 discriminator 3
 7180 008a 8A42     		cmp	r2, r1
 7181 008c F8D1     		bne	.L680
 7182 008e 01E0     		b	.L678
 7183              	.L679:
2824:.\FatFs/ff.c  **** 	if (d != allocsize) allocsize = 0;
 7184              		.loc 1 2824 0 is_stmt 1
 7185 0090 8A42     		cmp	r2, r1
 7186 0092 02D1     		bne	.L718
 7187              	.LVL1124:
 7188              	.L678:
2825:.\FatFs/ff.c  **** 	if (!allocsize) {					/* Auto selection of cluster size */
 7189              		.loc 1 2825 0
 7190 0094 7CB9     		cbnz	r4, .L682
 7191 0096 0022     		movs	r2, #0
 7192 0098 03E0     		b	.L681
 7193              	.LVL1125:
 7194              	.L718:
 7195 009a 0022     		movs	r2, #0
 7196              	.LVL1126:
 7197 009c 01E0     		b	.L681
 7198              	.LVL1127:
 7199              	.L719:
 7200 009e 2246     		mov	r2, r4
 7201 00a0 00E0     		b	.L733
 7202              	.L681:
 7203 00a2 9C49     		ldr	r1, .L739+4
 7204              	.L733:
 7205 00a4 541C     		adds	r4, r2, #1
2826:.\FatFs/ff.c  **** 		d = n_part;
2827:.\FatFs/ff.c  **** 		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
2828:.\FatFs/ff.c  **** 		for (n = 0; d < sstbl[n]; n++) ;
 7206              		.loc 1 2828 0 discriminator 1
 7207 00a6 51F82200 		ldr	r0, [r1, r2, lsl #2]
 7208 00aa 8342     		cmp	r3, r0
 7209 00ac F7D3     		bcc	.L719
 7210 00ae 0492     		str	r2, [sp, #16]
2829:.\FatFs/ff.c  **** 		allocsize = cstbl[n];
 7211              		.loc 1 2829 0
 7212 00b0 9949     		ldr	r1, .L739+8
 7213 00b2 31F81240 		ldrh	r4, [r1, r2, lsl #1]
 7214              	.LVL1128:
 7215              	.L682:
2830:.\FatFs/ff.c  **** 	}
2831:.\FatFs/ff.c  **** 	if (allocsize < SS(fs)) allocsize = SS(fs);
 7216              		.loc 1 2831 0
 7217 00b6 B4F5007F 		cmp	r4, #512
 7218 00ba 38BF     		it	cc
 7219 00bc 4FF40074 		movcc	r4, #512
 7220              	.LVL1129:
2832:.\FatFs/ff.c  **** 
2833:.\FatFs/ff.c  **** 	allocsize /= SS(fs);		/* Number of sectors per cluster */
 7221              		.loc 1 2833 0
 7222 00c0 C4F34F24 		ubfx	r4, r4, #9, #16
 7223              	.LVL1130:
2834:.\FatFs/ff.c  **** 
2835:.\FatFs/ff.c  **** 	/* Pre-compute number of clusters and FAT type */
2836:.\FatFs/ff.c  **** 	n_clst = n_part / allocsize;
 7224              		.loc 1 2836 0
 7225 00c4 B3FBF4F3 		udiv	r3, r3, r4
 7226              	.LVL1131:
2837:.\FatFs/ff.c  **** 	fmt = FS_FAT12;
2838:.\FatFs/ff.c  **** 	if (n_clst >= 0xFF5) fmt = FS_FAT16;
 7227              		.loc 1 2838 0
 7228 00c8 40F6F472 		movw	r2, #4084
 7229 00cc 9342     		cmp	r3, r2
 7230 00ce 00F2C881 		bhi	.L684
 7231 00d2 B4E1     		b	.L734
 7232              	.LVL1132:
 7233              	.L704:
2839:.\FatFs/ff.c  **** 	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
2840:.\FatFs/ff.c  **** 
2841:.\FatFs/ff.c  **** 	/* Determine offset and size of FAT structure */
2842:.\FatFs/ff.c  **** 	switch (fmt) {
2843:.\FatFs/ff.c  **** 	case FS_FAT12:
2844:.\FatFs/ff.c  **** 		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
2845:.\FatFs/ff.c  **** 		n_rsv = 1 + partition;
2846:.\FatFs/ff.c  **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
2847:.\FatFs/ff.c  **** 		break;
2848:.\FatFs/ff.c  **** 	case FS_FAT16:
2849:.\FatFs/ff.c  **** 		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
2850:.\FatFs/ff.c  **** 		n_rsv = 1 + partition;
2851:.\FatFs/ff.c  **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
2852:.\FatFs/ff.c  **** 		break;
2853:.\FatFs/ff.c  **** 	default:
2854:.\FatFs/ff.c  **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
2855:.\FatFs/ff.c  **** 		n_rsv = 33 - partition;
2856:.\FatFs/ff.c  **** 		n_dir = 0;
2857:.\FatFs/ff.c  **** 	}
2858:.\FatFs/ff.c  **** 	b_fat = b_part + n_rsv;			/* FATs start sector */
2859:.\FatFs/ff.c  **** 	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
2860:.\FatFs/ff.c  **** 	b_data = b_dir + n_dir;			/* Data start sector */
2861:.\FatFs/ff.c  **** 
2862:.\FatFs/ff.c  **** 	/* Align data start sector to erase block boundary (for flash memory media) */
2863:.\FatFs/ff.c  **** 	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
 7234              		.loc 1 2863 0
 7235 00d4 0020     		movs	r0, #0
 7236 00d6 0321     		movs	r1, #3
 7237 00d8 04AA     		add	r2, sp, #16
 7238 00da FFF7FEFF 		bl	disk_ioctl
 7239              	.LVL1133:
 7240 00de 0028     		cmp	r0, #0
 7241 00e0 40F08A81 		bne	.L720
2858:.\FatFs/ff.c  **** 	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
 7242              		.loc 1 2858 0
 7243 00e4 0BEB0903 		add	r3, fp, r9
 7244              	.LVL1134:
 7245 00e8 0393     		str	r3, [sp, #12]
 7246 00ea 0198     		ldr	r0, [sp, #4]
 7247 00ec 00EB0A01 		add	r1, r0, r10
2860:.\FatFs/ff.c  **** 
 7248              		.loc 1 2860 0
 7249 00f0 1944     		add	r1, r1, r3
2864:.\FatFs/ff.c  **** 	n = (b_data + n - 1) & ~(n - 1);
 7250              		.loc 1 2864 0
 7251 00f2 049A     		ldr	r2, [sp, #16]
 7252 00f4 531E     		subs	r3, r2, #1
 7253              	.LVL1135:
 7254 00f6 0B44     		add	r3, r3, r1
 7255 00f8 5242     		negs	r2, r2
 7256 00fa 1340     		ands	r3, r3, r2
 7257 00fc 0493     		str	r3, [sp, #16]
 7258 00fe C1EB0A01 		rsb	r1, r1, r10
2865:.\FatFs/ff.c  **** 	n_fat += (n - b_data) / N_FATS;
 7259              		.loc 1 2865 0
 7260 0102 CF18     		adds	r7, r1, r3
 7261              	.LVL1136:
2866:.\FatFs/ff.c  **** 	/* b_dir and b_data are no longer used below */
2867:.\FatFs/ff.c  **** 
2868:.\FatFs/ff.c  **** 	/* Determine number of cluster and final check of validity of the FAT type */
2869:.\FatFs/ff.c  **** 	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
 7262              		.loc 1 2869 0
 7263 0104 059A     		ldr	r2, [sp, #20]
 7264 0106 CBEB0203 		rsb	r3, fp, r2
 7265 010a DB1B     		subs	r3, r3, r7
 7266 010c 1B1A     		subs	r3, r3, r0
 7267 010e B3FBF4F3 		udiv	r3, r3, r4
 7268 0112 0293     		str	r3, [sp, #8]
 7269              	.LVL1137:
2870:.\FatFs/ff.c  **** 	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
 7270              		.loc 1 2870 0
 7271 0114 B8F1020F 		cmp	r8, #2
 7272 0118 06D1     		bne	.L686
 7273              		.loc 1 2870 0 is_stmt 0 discriminator 1
 7274 011a 40F6F473 		movw	r3, #4084
 7275              	.LVL1138:
 7276 011e 0299     		ldr	r1, [sp, #8]
 7277 0120 9942     		cmp	r1, r3
 7278 0122 40F26B81 		bls	.L721
 7279 0126 08E0     		b	.L687
 7280              	.LVL1139:
 7281              	.L686:
2871:.\FatFs/ff.c  **** 		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
 7282              		.loc 1 2871 0 is_stmt 1
 7283 0128 B8F1030F 		cmp	r8, #3
 7284 012c 05D1     		bne	.L687
 7285              		.loc 1 2871 0 is_stmt 0 discriminator 1
 7286 012e 4FF6F473 		movw	r3, #65524
 7287              	.LVL1140:
 7288 0132 0299     		ldr	r1, [sp, #8]
 7289 0134 9942     		cmp	r1, r3
 7290 0136 40F26381 		bls	.L722
 7291              	.L687:
2872:.\FatFs/ff.c  **** 		return FR_MKFS_ABORTED;
2873:.\FatFs/ff.c  **** 
2874:.\FatFs/ff.c  **** 	/* Create partition table if needed */
2875:.\FatFs/ff.c  **** 	if (!partition) {
 7292              		.loc 1 2875 0 is_stmt 1
 7293 013a 002E     		cmp	r6, #0
 7294 013c 47D1     		bne	.L723
 7295              	.LBB44:
2876:.\FatFs/ff.c  **** 		DWORD n_disk = b_part + n_part;
 7296              		.loc 1 2876 0
 7297 013e 09EB0206 		add	r6, r9, r2
 7298              	.LVL1141:
2877:.\FatFs/ff.c  **** 
2878:.\FatFs/ff.c  **** 		mem_set(fs->win, 0, SS(fs));
 7299              		.loc 1 2878 0
 7300 0142 05F1300A 		add	r10, r5, #48
 7301              	.LVL1142:
 7302 0146 5046     		mov	r0, r10
 7303 0148 0021     		movs	r1, #0
 7304 014a 4FF40072 		mov	r2, #512
 7305 014e FFF7FEFF 		bl	mem_set
 7306              	.LVL1143:
2879:.\FatFs/ff.c  **** 		tbl = fs->win+MBR_Table;
2880:.\FatFs/ff.c  **** 		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
 7307              		.loc 1 2880 0
 7308 0152 724B     		ldr	r3, .L739+12
 7309 0154 C5F8EE31 		str	r3, [r5, #494]
2881:.\FatFs/ff.c  **** 		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
 7310              		.loc 1 2881 0
 7311 0158 714B     		ldr	r3, .L739+16
 7312 015a 9E42     		cmp	r6, r3
 7313 015c 0BD8     		bhi	.L689
2882:.\FatFs/ff.c  **** 			n_disk = n_disk / 63 / 255;
 7314              		.loc 1 2882 0
 7315 015e 43F6C163 		movw	r3, #16065
 7316 0162 B6FBF3F6 		udiv	r6, r6, r3
 7317              	.LVL1144:
2883:.\FatFs/ff.c  **** 			tbl[7] = (BYTE)n_disk;
 7318              		.loc 1 2883 0
 7319 0166 85F8F561 		strb	r6, [r5, #501]
2884:.\FatFs/ff.c  **** 			tbl[6] = (BYTE)((n_disk >> 2) | 63);
 7320              		.loc 1 2884 0
 7321 016a B608     		lsrs	r6, r6, #2
 7322              	.LVL1145:
 7323 016c 46F03F03 		orr	r3, r6, #63
 7324 0170 85F8F431 		strb	r3, [r5, #500]
 7325 0174 03E0     		b	.L690
 7326              	.LVL1146:
 7327              	.L689:
2885:.\FatFs/ff.c  **** 		} else {
2886:.\FatFs/ff.c  **** 			ST_WORD(&tbl[6], 0xFFFF);
 7328              		.loc 1 2886 0
 7329 0176 4FF6FF73 		movw	r3, #65535
 7330 017a A5F8F431 		strh	r3, [r5, #500]	@ movhi
 7331              	.LVL1147:
 7332              	.L690:
2887:.\FatFs/ff.c  **** 		}
2888:.\FatFs/ff.c  **** 		tbl[5] = 254;
 7333              		.loc 1 2888 0
 7334 017e FE23     		movs	r3, #254
 7335 0180 85F8F331 		strb	r3, [r5, #499]
2889:.\FatFs/ff.c  **** 		if (fmt != FS_FAT32)			/* System ID */
 7336              		.loc 1 2889 0
 7337 0184 B8F1030F 		cmp	r8, #3
 7338 0188 08D0     		beq	.L691
2890:.\FatFs/ff.c  **** 			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
 7339              		.loc 1 2890 0
 7340 018a 059B     		ldr	r3, [sp, #20]
 7341 018c B3F5803F 		cmp	r3, #65536
 7342 0190 34BF     		ite	cc
 7343 0192 0423     		movcc	r3, #4
 7344 0194 0623     		movcs	r3, #6
 7345 0196 85F8F231 		strb	r3, [r5, #498]
 7346 019a 02E0     		b	.L693
 7347              	.L691:
2891:.\FatFs/ff.c  **** 		else
2892:.\FatFs/ff.c  **** 			tbl[4] = 0x0c;
 7348              		.loc 1 2892 0
 7349 019c 0C23     		movs	r3, #12
 7350 019e 85F8F231 		strb	r3, [r5, #498]
 7351              	.L693:
2893:.\FatFs/ff.c  **** 		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 7352              		.loc 1 2893 0
 7353 01a2 3F23     		movs	r3, #63
 7354 01a4 C5F8F631 		str	r3, [r5, #502]
2894:.\FatFs/ff.c  **** 		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 7355              		.loc 1 2894 0
 7356 01a8 059B     		ldr	r3, [sp, #20]
 7357 01aa C5F8FA31 		str	r3, [r5, #506]
2895:.\FatFs/ff.c  **** 		ST_WORD(tbl+64, 0xAA55);		/* Signature */
 7358              		.loc 1 2895 0
 7359 01ae 4AF65523 		movw	r3, #43605
 7360 01b2 A5F82E32 		strh	r3, [r5, #558]	@ movhi
2896:.\FatFs/ff.c  **** 		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
 7361              		.loc 1 2896 0
 7362 01b6 0020     		movs	r0, #0
 7363 01b8 5146     		mov	r1, r10
 7364 01ba 0246     		mov	r2, r0
 7365 01bc 0123     		movs	r3, #1
 7366 01be FFF7FEFF 		bl	disk_write
 7367              	.LVL1148:
 7368 01c2 0028     		cmp	r0, #0
 7369 01c4 40F01E81 		bne	.L725
2897:.\FatFs/ff.c  **** 			return FR_DISK_ERR;
2898:.\FatFs/ff.c  **** 		partition = 0xF8;
 7370              		.loc 1 2898 0
 7371 01c8 4FF0F80A 		mov	r10, #248
 7372 01cc 01E0     		b	.L688
 7373              	.LVL1149:
 7374              	.L723:
 7375              	.LBE44:
2899:.\FatFs/ff.c  **** 	} else {
2900:.\FatFs/ff.c  **** 		partition = 0xF0;
 7376              		.loc 1 2900 0
 7377 01ce 4FF0F00A 		mov	r10, #240
 7378              	.LVL1150:
 7379              	.L688:
2901:.\FatFs/ff.c  **** 	}
2902:.\FatFs/ff.c  **** 
2903:.\FatFs/ff.c  **** 	/* Create boot record */
2904:.\FatFs/ff.c  **** 	tbl = fs->win;								/* Clear buffer */
 7380              		.loc 1 2904 0
 7381 01d2 05F13006 		add	r6, r5, #48
 7382              	.LVL1151:
2905:.\FatFs/ff.c  **** 	mem_set(tbl, 0, SS(fs));
 7383              		.loc 1 2905 0
 7384 01d6 3046     		mov	r0, r6
 7385 01d8 0021     		movs	r1, #0
 7386 01da 4FF40072 		mov	r2, #512
 7387 01de FFF7FEFF 		bl	mem_set
 7388              	.LVL1152:
2906:.\FatFs/ff.c  **** 	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
 7389              		.loc 1 2906 0
 7390 01e2 504B     		ldr	r3, .L739+20
 7391 01e4 2B63     		str	r3, [r5, #48]
2907:.\FatFs/ff.c  **** 	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
 7392              		.loc 1 2907 0
 7393 01e6 4FF40073 		mov	r3, #512
 7394 01ea A5F83B30 		strh	r3, [r5, #59]	@ movhi
2908:.\FatFs/ff.c  **** 	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
 7395              		.loc 1 2908 0
 7396 01ee E4B2     		uxtb	r4, r4
 7397              	.LVL1153:
 7398 01f0 85F83D40 		strb	r4, [r5, #61]
2909:.\FatFs/ff.c  **** 	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
 7399              		.loc 1 2909 0
 7400 01f4 A5F83EB0 		strh	fp, [r5, #62]	@ movhi
2910:.\FatFs/ff.c  **** 	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
 7401              		.loc 1 2910 0
 7402 01f8 0123     		movs	r3, #1
 7403 01fa 85F84030 		strb	r3, [r5, #64]
2911:.\FatFs/ff.c  **** 	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
 7404              		.loc 1 2911 0
 7405 01fe 019B     		ldr	r3, [sp, #4]
 7406 0200 1B01     		lsls	r3, r3, #4
 7407 0202 A5F84130 		strh	r3, [r5, #65]	@ movhi
2912:.\FatFs/ff.c  **** 	if (n_part < 0x10000) {						/* Number of total sectors */
 7408              		.loc 1 2912 0
 7409 0206 059B     		ldr	r3, [sp, #20]
 7410 0208 B3F5803F 		cmp	r3, #65536
2913:.\FatFs/ff.c  **** 		ST_WORD(tbl+BPB_TotSec16, n_part);
 7411              		.loc 1 2913 0
 7412 020c 34BF     		ite	cc
 7413 020e A5F84330 		strhcc	r3, [r5, #67]	@ movhi
2914:.\FatFs/ff.c  **** 	} else {
2915:.\FatFs/ff.c  **** 		ST_DWORD(tbl+BPB_TotSec32, n_part);
 7414              		.loc 1 2915 0
 7415 0212 2B65     		strcs	r3, [r5, #80]
2916:.\FatFs/ff.c  **** 	}
2917:.\FatFs/ff.c  **** 	tbl[BPB_Media] = partition;					/* Media descriptor */
 7416              		.loc 1 2917 0
 7417 0214 85F845A0 		strb	r10, [r5, #69]
2918:.\FatFs/ff.c  **** 	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
 7418              		.loc 1 2918 0
 7419 0218 3F23     		movs	r3, #63
 7420 021a A5F84830 		strh	r3, [r5, #72]	@ movhi
2919:.\FatFs/ff.c  **** 	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
 7421              		.loc 1 2919 0
 7422 021e FF23     		movs	r3, #255
 7423 0220 A5F84A30 		strh	r3, [r5, #74]	@ movhi
2920:.\FatFs/ff.c  **** 	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
 7424              		.loc 1 2920 0
 7425 0224 C5F84C90 		str	r9, [r5, #76]
2921:.\FatFs/ff.c  **** 	n = get_fattime();							/* Use current time as a VSN */
 7426              		.loc 1 2921 0
 7427 0228 FFF7FEFF 		bl	get_fattime
 7428              	.LVL1154:
 7429 022c 0490     		str	r0, [sp, #16]
2922:.\FatFs/ff.c  **** 	if (fmt != FS_FAT32) {
 7430              		.loc 1 2922 0
 7431 022e B8F1030F 		cmp	r8, #3
 7432 0232 1DD0     		beq	.L696
2923:.\FatFs/ff.c  **** 		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
 7433              		.loc 1 2923 0
 7434 0234 C5F85700 		str	r0, [r5, #87]
2924:.\FatFs/ff.c  **** 		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of sectors per FAT */
 7435              		.loc 1 2924 0
 7436 0238 A5F84670 		strh	r7, [r5, #70]	@ movhi
2925:.\FatFs/ff.c  **** 		tbl[BS_DrvNum] = 0x80;					/* Drive number */
 7437              		.loc 1 2925 0
 7438 023c 8023     		movs	r3, #128
 7439 023e 85F85430 		strb	r3, [r5, #84]
2926:.\FatFs/ff.c  **** 		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
 7440              		.loc 1 2926 0
 7441 0242 2923     		movs	r3, #41
 7442 0244 85F85630 		strb	r3, [r5, #86]
2927:.\FatFs/ff.c  **** 		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
 7443              		.loc 1 2927 0
 7444 0248 05F15B00 		add	r0, r5, #91
 7445 024c 3649     		ldr	r1, .L739+24
 7446 024e 1322     		movs	r2, #19
 7447 0250 FFF7FEFF 		bl	mem_cpy
 7448              	.LVL1155:
2928:.\FatFs/ff.c  **** 	} else {
2929:.\FatFs/ff.c  **** 		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
2930:.\FatFs/ff.c  **** 		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
2931:.\FatFs/ff.c  **** 		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
2932:.\FatFs/ff.c  **** 		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
2933:.\FatFs/ff.c  **** 		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
2934:.\FatFs/ff.c  **** 		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
2935:.\FatFs/ff.c  **** 		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
2936:.\FatFs/ff.c  **** 		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
2937:.\FatFs/ff.c  **** 	}
2938:.\FatFs/ff.c  **** 	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
 7449              		.loc 1 2938 0
 7450 0254 4AF65523 		movw	r3, #43605
 7451 0258 A5F82E32 		strh	r3, [r5, #558]	@ movhi
2939:.\FatFs/ff.c  **** 	if (SS(fs) > 512U) {
2940:.\FatFs/ff.c  **** 		ST_WORD(tbl+SS(fs)-2, 0xAA55);
2941:.\FatFs/ff.c  **** 	}
2942:.\FatFs/ff.c  **** 	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
 7452              		.loc 1 2942 0
 7453 025c 0020     		movs	r0, #0
 7454 025e 3146     		mov	r1, r6
 7455 0260 4A46     		mov	r2, r9
 7456 0262 0123     		movs	r3, #1
 7457 0264 FFF7FEFF 		bl	disk_write
 7458              	.LVL1156:
 7459 0268 0028     		cmp	r0, #0
 7460 026a 00F00B81 		beq	.L735
 7461 026e CBE0     		b	.L726
 7462              	.L696:
2929:.\FatFs/ff.c  **** 		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
 7463              		.loc 1 2929 0
 7464 0270 C5F87300 		str	r0, [r5, #115]
2930:.\FatFs/ff.c  **** 		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
 7465              		.loc 1 2930 0
 7466 0274 6F65     		str	r7, [r5, #84]
2931:.\FatFs/ff.c  **** 		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
 7467              		.loc 1 2931 0
 7468 0276 0223     		movs	r3, #2
 7469 0278 EB65     		str	r3, [r5, #92]
2932:.\FatFs/ff.c  **** 		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
 7470              		.loc 1 2932 0
 7471 027a 4FF0010A 		mov	r10, #1
 7472              	.LVL1157:
 7473 027e A5F860A0 		strh	r10, [r5, #96]	@ movhi
2933:.\FatFs/ff.c  **** 		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
 7474              		.loc 1 2933 0
 7475 0282 0623     		movs	r3, #6
 7476 0284 A5F86230 		strh	r3, [r5, #98]	@ movhi
2934:.\FatFs/ff.c  **** 		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
 7477              		.loc 1 2934 0
 7478 0288 8023     		movs	r3, #128
 7479 028a 85F87030 		strb	r3, [r5, #112]
2935:.\FatFs/ff.c  **** 		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
 7480              		.loc 1 2935 0
 7481 028e 2923     		movs	r3, #41
 7482 0290 85F87230 		strb	r3, [r5, #114]
2936:.\FatFs/ff.c  **** 	}
 7483              		.loc 1 2936 0
 7484 0294 05F17700 		add	r0, r5, #119
 7485 0298 2449     		ldr	r1, .L739+28
 7486 029a 1322     		movs	r2, #19
 7487 029c FFF7FEFF 		bl	mem_cpy
 7488              	.LVL1158:
2938:.\FatFs/ff.c  **** 	if (SS(fs) > 512U) {
 7489              		.loc 1 2938 0
 7490 02a0 4AF65523 		movw	r3, #43605
 7491 02a4 A5F82E32 		strh	r3, [r5, #558]	@ movhi
 7492              		.loc 1 2942 0
 7493 02a8 0020     		movs	r0, #0
 7494 02aa 3146     		mov	r1, r6
 7495 02ac 4A46     		mov	r2, r9
 7496 02ae 5346     		mov	r3, r10
 7497 02b0 FFF7FEFF 		bl	disk_write
 7498              	.LVL1159:
 7499 02b4 0028     		cmp	r0, #0
 7500 02b6 40F0A980 		bne	.L727
2943:.\FatFs/ff.c  **** 		return FR_DISK_ERR;
2944:.\FatFs/ff.c  **** 	if (fmt == FS_FAT32)
2945:.\FatFs/ff.c  **** 		disk_write(drv, tbl, b_part+6, 1);
 7501              		.loc 1 2945 0
 7502 02ba 3146     		mov	r1, r6
 7503 02bc 09F10602 		add	r2, r9, #6
 7504 02c0 5346     		mov	r3, r10
 7505 02c2 FFF7FEFF 		bl	disk_write
 7506              	.LVL1160:
2946:.\FatFs/ff.c  **** 
2947:.\FatFs/ff.c  **** 	/* Initialize FAT area */
2948:.\FatFs/ff.c  **** 	for (m = 0; m < N_FATS; m++) {
2949:.\FatFs/ff.c  **** 		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
 7507              		.loc 1 2949 0
 7508 02c6 3046     		mov	r0, r6
 7509 02c8 0021     		movs	r1, #0
 7510 02ca 4FF40072 		mov	r2, #512
 7511 02ce FFF7FEFF 		bl	mem_set
 7512              	.LVL1161:
2950:.\FatFs/ff.c  **** 		if (fmt != FS_FAT32) {
2951:.\FatFs/ff.c  **** 			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
2952:.\FatFs/ff.c  **** 			n |= partition;
2953:.\FatFs/ff.c  **** 			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
2954:.\FatFs/ff.c  **** 		} else {
2955:.\FatFs/ff.c  **** 			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
 7513              		.loc 1 2955 0
 7514 02d2 6FF00703 		mvn	r3, #7
 7515 02d6 2B63     		str	r3, [r5, #48]
2956:.\FatFs/ff.c  **** 			ST_DWORD(tbl+4, 0xFFFFFFFF);
 7516              		.loc 1 2956 0
 7517 02d8 4FF0FF33 		mov	r3, #-1
 7518 02dc 6B63     		str	r3, [r5, #52]
2957:.\FatFs/ff.c  **** 			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
 7519              		.loc 1 2957 0
 7520 02de 6FF07043 		mvn	r3, #-268435456
 7521 02e2 AB63     		str	r3, [r5, #56]
 7522              	.L698:
2958:.\FatFs/ff.c  **** 		}
2959:.\FatFs/ff.c  **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 7523              		.loc 1 2959 0
 7524 02e4 039A     		ldr	r2, [sp, #12]
 7525 02e6 02F1010A 		add	r10, r2, #1
 7526              	.LVL1162:
 7527 02ea 0020     		movs	r0, #0
 7528 02ec 3146     		mov	r1, r6
 7529 02ee 0123     		movs	r3, #1
 7530 02f0 FFF7FEFF 		bl	disk_write
 7531              	.LVL1163:
 7532 02f4 0028     		cmp	r0, #0
 7533 02f6 40F08B80 		bne	.L728
2960:.\FatFs/ff.c  **** 			return FR_DISK_ERR;
2961:.\FatFs/ff.c  **** 		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
 7534              		.loc 1 2961 0
 7535 02fa 3046     		mov	r0, r6
 7536 02fc 0021     		movs	r1, #0
 7537 02fe 4FF40072 		mov	r2, #512
 7538 0302 FFF7FEFF 		bl	mem_set
 7539              	.LVL1164:
2962:.\FatFs/ff.c  **** 		for (n = 1; n < n_fat; n++) {
 7540              		.loc 1 2962 0
 7541 0306 0123     		movs	r3, #1
 7542 0308 0493     		str	r3, [sp, #16]
 7543 030a 5246     		mov	r2, r10
 7544 030c 1DE0     		b	.L699
 7545              	.L740:
 7546 030e 00BF     		.align	2
 7547              	.L739:
 7548 0310 00000000 		.word	.LANCHOR2
 7549 0314 00000000 		.word	.LANCHOR5
 7550 0318 00000000 		.word	.LANCHOR6
 7551 031c 80010100 		.word	65920
 7552 0320 FF03FB00 		.word	16450559
 7553 0324 EBFE9000 		.word	9502443
 7554 0328 14000000 		.word	.LC2
 7555 032c 28000000 		.word	.LC3
 7556              	.LVL1165:
 7557              	.L700:
2963:.\FatFs/ff.c  **** 			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 7558              		.loc 1 2963 0
 7559 0330 02F1010B 		add	fp, r2, #1
 7560              	.LVL1166:
 7561 0334 0020     		movs	r0, #0
 7562 0336 3146     		mov	r1, r6
 7563 0338 0123     		movs	r3, #1
 7564 033a FFF7FEFF 		bl	disk_write
 7565              	.LVL1167:
 7566 033e 0028     		cmp	r0, #0
 7567 0340 68D1     		bne	.L729
2962:.\FatFs/ff.c  **** 		for (n = 1; n < n_fat; n++) {
 7568              		.loc 1 2962 0 discriminator 2
 7569 0342 049B     		ldr	r3, [sp, #16]
 7570 0344 0133     		adds	r3, r3, #1
 7571 0346 0493     		str	r3, [sp, #16]
 7572              		.loc 1 2963 0 discriminator 2
 7573 0348 5A46     		mov	r2, fp
 7574              	.LVL1168:
 7575              	.L699:
2962:.\FatFs/ff.c  **** 		for (n = 1; n < n_fat; n++) {
 7576              		.loc 1 2962 0 discriminator 1
 7577 034a 049B     		ldr	r3, [sp, #16]
 7578 034c 9F42     		cmp	r7, r3
 7579 034e EFD8     		bhi	.L700
 7580 0350 9246     		mov	r10, r2
 7581              	.LVL1169:
2964:.\FatFs/ff.c  **** 				return FR_DISK_ERR;
2965:.\FatFs/ff.c  **** 		}
2966:.\FatFs/ff.c  **** 	}
2967:.\FatFs/ff.c  **** 
2968:.\FatFs/ff.c  **** 	/* Initialize Root directory */
2969:.\FatFs/ff.c  **** 	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
 7582              		.loc 1 2969 0 discriminator 2
 7583 0352 B8F1030F 		cmp	r8, #3
 7584 0356 18BF     		it	ne
 7585 0358 9DF80440 		ldrbne	r4, [sp, #4]	@ zero_extendqisi2
 7586 035c 0132     		adds	r2, r2, #1
 7587              	.LVL1170:
 7588 035e 631E     		subs	r3, r4, #1
 7589 0360 DBB2     		uxtb	r3, r3
 7590 0362 D418     		adds	r4, r2, r3
2970:.\FatFs/ff.c  **** 	do {
2971:.\FatFs/ff.c  **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 7591              		.loc 1 2971 0 discriminator 2
 7592 0364 4FF0000B 		mov	fp, #0
 7593 0368 5246     		mov	r2, r10
 7594              	.LVL1171:
 7595              	.L702:
 7596              		.loc 1 2971 0 is_stmt 0
 7597 036a 571C     		adds	r7, r2, #1
 7598              	.LVL1172:
 7599 036c 5846     		mov	r0, fp
 7600 036e 3146     		mov	r1, r6
 7601 0370 0123     		movs	r3, #1
 7602 0372 FFF7FEFF 		bl	disk_write
 7603              	.LVL1173:
 7604 0376 0028     		cmp	r0, #0
 7605 0378 4ED1     		bne	.L730
 7606              	.LVL1174:
 7607 037a 3A46     		mov	r2, r7
2972:.\FatFs/ff.c  **** 			return FR_DISK_ERR;
2973:.\FatFs/ff.c  **** 	} while (--m);
 7608              		.loc 1 2973 0 is_stmt 1
 7609 037c A742     		cmp	r7, r4
 7610 037e F4D1     		bne	.L702
2974:.\FatFs/ff.c  **** 
2975:.\FatFs/ff.c  **** 	/* Create FSInfo record if needed */
2976:.\FatFs/ff.c  **** 	if (fmt == FS_FAT32) {
 7611              		.loc 1 2976 0
 7612 0380 B8F1030F 		cmp	r8, #3
 7613 0384 21D1     		bne	.L703
2977:.\FatFs/ff.c  **** 		ST_WORD(tbl+BS_55AA, 0xAA55);
 7614              		.loc 1 2977 0
 7615 0386 4AF65523 		movw	r3, #43605
 7616 038a A5F82E32 		strh	r3, [r5, #558]	@ movhi
2978:.\FatFs/ff.c  **** 		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 7617              		.loc 1 2978 0
 7618 038e 474B     		ldr	r3, .L741
 7619 0390 2B63     		str	r3, [r5, #48]
2979:.\FatFs/ff.c  **** 		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 7620              		.loc 1 2979 0
 7621 0392 03F1FF53 		add	r3, r3, #534773760
 7622 0396 03F50053 		add	r3, r3, #8192
 7623 039a 2033     		adds	r3, r3, #32
 7624 039c C5F81432 		str	r3, [r5, #532]
2980:.\FatFs/ff.c  **** 		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 7625              		.loc 1 2980 0
 7626 03a0 029B     		ldr	r3, [sp, #8]
 7627 03a2 013B     		subs	r3, r3, #1
 7628 03a4 C5F81832 		str	r3, [r5, #536]
2981:.\FatFs/ff.c  **** 		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
 7629              		.loc 1 2981 0
 7630 03a8 4FF0FF33 		mov	r3, #-1
 7631 03ac C5F81C32 		str	r3, [r5, #540]
2982:.\FatFs/ff.c  **** 		disk_write(drv, tbl, b_part+1, 1);
 7632              		.loc 1 2982 0
 7633 03b0 3146     		mov	r1, r6
 7634 03b2 09F10102 		add	r2, r9, #1
 7635 03b6 0123     		movs	r3, #1
 7636 03b8 FFF7FEFF 		bl	disk_write
 7637              	.LVL1175:
2983:.\FatFs/ff.c  **** 		disk_write(drv, tbl, b_part+7, 1);
 7638              		.loc 1 2983 0
 7639 03bc 0020     		movs	r0, #0
 7640 03be 3146     		mov	r1, r6
 7641 03c0 09F10702 		add	r2, r9, #7
 7642 03c4 0123     		movs	r3, #1
 7643 03c6 FFF7FEFF 		bl	disk_write
 7644              	.LVL1176:
 7645              	.L703:
2984:.\FatFs/ff.c  **** 	}
2985:.\FatFs/ff.c  **** 
2986:.\FatFs/ff.c  **** 	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
 7646              		.loc 1 2986 0
 7647 03ca 0020     		movs	r0, #0
 7648 03cc 0146     		mov	r1, r0
 7649 03ce 0246     		mov	r2, r0
 7650 03d0 FFF7FEFF 		bl	disk_ioctl
 7651              	.LVL1177:
 7652 03d4 0030     		adds	r0, r0, #0
 7653 03d6 18BF     		it	ne
 7654 03d8 0120     		movne	r0, #1
 7655 03da 64E0     		b	.L736
 7656              	.LVL1178:
 7657              	.L709:
 7658              	.LCFI68:
 7659              		.cfi_def_cfa_offset 0
 7660              		.cfi_restore 4
 7661              		.cfi_restore 5
 7662              		.cfi_restore 6
 7663              		.cfi_restore 7
 7664              		.cfi_restore 8
 7665              		.cfi_restore 9
 7666              		.cfi_restore 10
 7667              		.cfi_restore 11
 7668              		.cfi_restore 14
2800:.\FatFs/ff.c  **** 	if (partition >= 2) return FR_MKFS_ABORTED;
 7669              		.loc 1 2800 0
 7670 03dc 0B20     		movs	r0, #11
 7671              	.LVL1179:
2987:.\FatFs/ff.c  **** }
 7672              		.loc 1 2987 0
 7673 03de 7047     		bx	lr
 7674              	.LVL1180:
 7675              	.L710:
 7676              	.LCFI69:
 7677              		.cfi_def_cfa_offset 64
 7678              		.cfi_offset 4, -36
 7679              		.cfi_offset 5, -32
 7680              		.cfi_offset 6, -28
 7681              		.cfi_offset 7, -24
 7682              		.cfi_offset 8, -20
 7683              		.cfi_offset 9, -16
 7684              		.cfi_offset 10, -12
 7685              		.cfi_offset 11, -8
 7686              		.cfi_offset 14, -4
2801:.\FatFs/ff.c  **** 
 7687              		.loc 1 2801 0
 7688 03e0 0E20     		movs	r0, #14
 7689              	.LVL1181:
 7690 03e2 60E0     		b	.L736
 7691              	.LVL1182:
 7692              	.L711:
2805:.\FatFs/ff.c  **** 	fs->fs_type = 0;
 7693              		.loc 1 2805 0
 7694 03e4 0C20     		movs	r0, #12
 7695              	.LVL1183:
 7696 03e6 5EE0     		b	.L736
 7697              	.LVL1184:
 7698              	.L712:
2811:.\FatFs/ff.c  **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 7699              		.loc 1 2811 0
 7700 03e8 0320     		movs	r0, #3
 7701              	.LVL1185:
 7702 03ea 5CE0     		b	.L736
 7703              	.LVL1186:
 7704              	.L713:
2812:.\FatFs/ff.c  **** #if _MAX_SS != 512						/* Get disk sector size */
 7705              		.loc 1 2812 0
 7706 03ec 0A20     		movs	r0, #10
 7707              	.LVL1187:
 7708 03ee 5AE0     		b	.L736
 7709              	.L714:
2819:.\FatFs/ff.c  **** 	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
 7710              		.loc 1 2819 0
 7711 03f0 0E20     		movs	r0, #14
 7712 03f2 58E0     		b	.L736
 7713              	.L715:
 7714 03f4 0E20     		movs	r0, #14
 7715 03f6 56E0     		b	.L736
 7716              	.LVL1188:
 7717              	.L720:
2863:.\FatFs/ff.c  **** 	n = (b_data + n - 1) & ~(n - 1);
 7718              		.loc 1 2863 0
 7719 03f8 0E20     		movs	r0, #14
 7720 03fa 54E0     		b	.L736
 7721              	.LVL1189:
 7722              	.L721:
2872:.\FatFs/ff.c  **** 
 7723              		.loc 1 2872 0
 7724 03fc 0E20     		movs	r0, #14
 7725 03fe 52E0     		b	.L736
 7726              	.LVL1190:
 7727              	.L722:
 7728 0400 0E20     		movs	r0, #14
 7729 0402 50E0     		b	.L736
 7730              	.LVL1191:
 7731              	.L725:
 7732              	.LBB45:
2897:.\FatFs/ff.c  **** 		partition = 0xF8;
 7733              		.loc 1 2897 0
 7734 0404 0120     		movs	r0, #1
 7735 0406 4EE0     		b	.L736
 7736              	.LVL1192:
 7737              	.L726:
 7738              	.LBE45:
2943:.\FatFs/ff.c  **** 	if (fmt == FS_FAT32)
 7739              		.loc 1 2943 0
 7740 0408 0120     		movs	r0, #1
 7741 040a 4CE0     		b	.L736
 7742              	.LVL1193:
 7743              	.L727:
 7744 040c 0120     		movs	r0, #1
 7745 040e 4AE0     		b	.L736
 7746              	.LVL1194:
 7747              	.L728:
2960:.\FatFs/ff.c  **** 		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
 7748              		.loc 1 2960 0
 7749 0410 0120     		movs	r0, #1
 7750 0412 48E0     		b	.L736
 7751              	.LVL1195:
 7752              	.L729:
2964:.\FatFs/ff.c  **** 		}
 7753              		.loc 1 2964 0
 7754 0414 0120     		movs	r0, #1
 7755 0416 46E0     		b	.L736
 7756              	.LVL1196:
 7757              	.L730:
2972:.\FatFs/ff.c  **** 	} while (--m);
 7758              		.loc 1 2972 0
 7759 0418 0120     		movs	r0, #1
 7760 041a 44E0     		b	.L736
 7761              	.LVL1197:
 7762              	.L737:
2844:.\FatFs/ff.c  **** 		n_rsv = 1 + partition;
 7763              		.loc 1 2844 0
 7764 041c 03EB4303 		add	r3, r3, r3, lsl #1
 7765              	.LVL1198:
 7766 0420 03F1010A 		add	r10, r3, #1
 7767 0424 4FEA5A0A 		lsr	r10, r10, #1
 7768 0428 0AF2022A 		addw	r10, r10, #514
 7769 042c 4FEA5A2A 		lsr	r10, r10, #9
 7770              	.LVL1199:
2845:.\FatFs/ff.c  **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
 7771              		.loc 1 2845 0
 7772 0430 06F1010B 		add	fp, r6, #1
 7773              	.LVL1200:
2837:.\FatFs/ff.c  **** 	if (n_clst >= 0xFF5) fmt = FS_FAT16;
 7774              		.loc 1 2837 0
 7775 0434 4FF00108 		mov	r8, #1
2846:.\FatFs/ff.c  **** 		break;
 7776              		.loc 1 2846 0
 7777 0438 2023     		movs	r3, #32
 7778 043a 0193     		str	r3, [sp, #4]
2847:.\FatFs/ff.c  **** 	case FS_FAT16:
 7779              		.loc 1 2847 0
 7780 043c 4AE6     		b	.L704
 7781              	.LVL1201:
 7782              	.L734:
2839:.\FatFs/ff.c  **** 
 7783              		.loc 1 2839 0
 7784 043e 4FF6F472 		movw	r2, #65524
 7785 0442 9342     		cmp	r3, r2
 7786 0444 11D8     		bhi	.L705
 7787 0446 E9E7     		b	.L737
 7788              	.LVL1202:
 7789              	.L707:
2849:.\FatFs/ff.c  **** 		n_rsv = 1 + partition;
 7790              		.loc 1 2849 0
 7791 0448 4FEA430A 		lsl	r10, r3, #1
 7792 044c 0AF2032A 		addw	r10, r10, #515
 7793 0450 4FEA5A2A 		lsr	r10, r10, #9
 7794              	.LVL1203:
2850:.\FatFs/ff.c  **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
 7795              		.loc 1 2850 0
 7796 0454 06F1010B 		add	fp, r6, #1
 7797              	.LVL1204:
2838:.\FatFs/ff.c  **** 	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
 7798              		.loc 1 2838 0
 7799 0458 4FF00208 		mov	r8, #2
2851:.\FatFs/ff.c  **** 		break;
 7800              		.loc 1 2851 0
 7801 045c 2023     		movs	r3, #32
 7802              	.LVL1205:
 7803 045e 0193     		str	r3, [sp, #4]
2852:.\FatFs/ff.c  **** 	default:
 7804              		.loc 1 2852 0
 7805 0460 38E6     		b	.L704
 7806              	.LVL1206:
 7807              	.L684:
2839:.\FatFs/ff.c  **** 
 7808              		.loc 1 2839 0
 7809 0462 4FF6F472 		movw	r2, #65524
 7810 0466 9342     		cmp	r3, r2
 7811 0468 EED9     		bls	.L707
 7812              	.LVL1207:
 7813              	.L705:
2854:.\FatFs/ff.c  **** 		n_rsv = 33 - partition;
 7814              		.loc 1 2854 0
 7815 046a 4FEA830A 		lsl	r10, r3, #2
 7816 046e 0AF2072A 		addw	r10, r10, #519
 7817 0472 4FEA5A2A 		lsr	r10, r10, #9
 7818              	.LVL1208:
2855:.\FatFs/ff.c  **** 		n_dir = 0;
 7819              		.loc 1 2855 0
 7820 0476 C6F1210B 		rsb	fp, r6, #33
 7821              	.LVL1209:
 7822 047a 4FF00308 		mov	r8, #3
2856:.\FatFs/ff.c  **** 	}
 7823              		.loc 1 2856 0
 7824 047e 0023     		movs	r3, #0
 7825              	.LVL1210:
 7826 0480 0193     		str	r3, [sp, #4]
 7827 0482 27E6     		b	.L704
 7828              	.LVL1211:
 7829              	.L735:
2949:.\FatFs/ff.c  **** 		if (fmt != FS_FAT32) {
 7830              		.loc 1 2949 0
 7831 0484 3046     		mov	r0, r6
 7832 0486 0021     		movs	r1, #0
 7833 0488 4FF40072 		mov	r2, #512
 7834 048c FFF7FEFF 		bl	mem_set
 7835              	.LVL1212:
2951:.\FatFs/ff.c  **** 			n |= partition;
 7836              		.loc 1 2951 0
 7837 0490 B8F1010F 		cmp	r8, #1
 7838 0494 064B     		ldr	r3, .L741+4
 7839 0496 18BF     		it	ne
 7840 0498 6FF0FF03 		mvnne	r3, #255
2952:.\FatFs/ff.c  **** 			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
 7841              		.loc 1 2952 0
 7842 049c 43EA0A03 		orr	r3, r3, r10
 7843 04a0 0493     		str	r3, [sp, #16]
2953:.\FatFs/ff.c  **** 		} else {
 7844              		.loc 1 2953 0
 7845 04a2 2B63     		str	r3, [r5, #48]
 7846 04a4 1EE7     		b	.L698
 7847              	.LVL1213:
 7848              	.L736:
 7849              		.loc 1 2987 0
 7850 04a6 07B0     		add	sp, sp, #28
 7851              	.LCFI70:
 7852              		.cfi_def_cfa_offset 36
 7853              		@ sp needed
 7854 04a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7855              	.L742:
 7856              		.align	2
 7857              	.L741:
 7858 04ac 52526141 		.word	1096897106
 7859 04b0 00FFFF00 		.word	16776960
 7860              		.cfi_endproc
 7861              	.LFE74:
 7863              		.section	.text.f_gets,"ax",%progbits
 7864              		.align	2
 7865              		.global	f_gets
 7866              		.thumb
 7867              		.thumb_func
 7869              	f_gets:
 7870              	.LFB75:
2988:.\FatFs/ff.c  **** 
2989:.\FatFs/ff.c  **** #endif /* _USE_MKFS && !_FS_READONLY */
2990:.\FatFs/ff.c  **** 
2991:.\FatFs/ff.c  **** 
2992:.\FatFs/ff.c  **** 
2993:.\FatFs/ff.c  **** 
2994:.\FatFs/ff.c  **** #if _USE_STRFUNC
2995:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2996:.\FatFs/ff.c  **** /* Get a string from the file                                            */
2997:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
2998:.\FatFs/ff.c  **** char* f_gets (
2999:.\FatFs/ff.c  **** 	char* buff,	/* Pointer to the string buffer to read */
3000:.\FatFs/ff.c  **** 	int len,	/* Size of string buffer */
3001:.\FatFs/ff.c  **** 	FIL* fil	/* Pointer to the file object */
3002:.\FatFs/ff.c  **** )
3003:.\FatFs/ff.c  **** {
 7871              		.loc 1 3003 0
 7872              		.cfi_startproc
 7873              		@ args = 0, pretend = 0, frame = 8
 7874              		@ frame_needed = 0, uses_anonymous_args = 0
 7875              	.LVL1214:
 7876 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 7877              	.LCFI71:
 7878              		.cfi_def_cfa_offset 28
 7879              		.cfi_offset 4, -28
 7880              		.cfi_offset 5, -24
 7881              		.cfi_offset 6, -20
 7882              		.cfi_offset 7, -16
 7883              		.cfi_offset 8, -12
 7884              		.cfi_offset 9, -8
 7885              		.cfi_offset 14, -4
 7886 0004 83B0     		sub	sp, sp, #12
 7887              	.LCFI72:
 7888              		.cfi_def_cfa_offset 40
 7889 0006 8146     		mov	r9, r0
 7890 0008 9046     		mov	r8, r2
 7891              	.LVL1215:
3004:.\FatFs/ff.c  **** 	int i = 0;
3005:.\FatFs/ff.c  **** 	char *p = buff;
 7892              		.loc 1 3005 0
 7893 000a 0446     		mov	r4, r0
3004:.\FatFs/ff.c  **** 	int i = 0;
 7894              		.loc 1 3004 0
 7895 000c 0025     		movs	r5, #0
3006:.\FatFs/ff.c  **** 	UINT rc;
3007:.\FatFs/ff.c  **** 
3008:.\FatFs/ff.c  **** 
3009:.\FatFs/ff.c  **** 	while (i < len - 1) {			/* Read bytes until buffer gets filled */
 7896              		.loc 1 3009 0
 7897 000e 4E1E     		subs	r6, r1, #1
3010:.\FatFs/ff.c  **** 		f_read(fil, p, 1, &rc);
 7898              		.loc 1 3010 0
 7899 0010 0127     		movs	r7, #1
3009:.\FatFs/ff.c  **** 		f_read(fil, p, 1, &rc);
 7900              		.loc 1 3009 0
 7901 0012 0FE0     		b	.L744
 7902              	.LVL1216:
 7903              	.L747:
 7904              		.loc 1 3010 0
 7905 0014 4046     		mov	r0, r8
 7906 0016 2146     		mov	r1, r4
 7907 0018 3A46     		mov	r2, r7
 7908 001a 01AB     		add	r3, sp, #4
 7909 001c FFF7FEFF 		bl	f_read
 7910              	.LVL1217:
3011:.\FatFs/ff.c  **** 		if (rc != 1) break;			/* Break when no data to read */
 7911              		.loc 1 3011 0
 7912 0020 019B     		ldr	r3, [sp, #4]
 7913 0022 012B     		cmp	r3, #1
 7914 0024 08D1     		bne	.L745
3012:.\FatFs/ff.c  **** #if _USE_STRFUNC >= 2
3013:.\FatFs/ff.c  **** 		if (*p == '\r') continue;	/* Strip '\r' */
 7915              		.loc 1 3013 0
 7916 0026 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 7917 0028 0D2B     		cmp	r3, #13
 7918 002a 03D0     		beq	.L744
3014:.\FatFs/ff.c  **** #endif
3015:.\FatFs/ff.c  **** 		i++;
 7919              		.loc 1 3015 0
 7920 002c 0135     		adds	r5, r5, #1
 7921              	.LVL1218:
3016:.\FatFs/ff.c  **** 		if (*p++ == '\n') break;	/* Break when reached end of line */
 7922              		.loc 1 3016 0
 7923 002e 0134     		adds	r4, r4, #1
 7924              	.LVL1219:
 7925 0030 0A2B     		cmp	r3, #10
 7926 0032 01D0     		beq	.L745
 7927              	.LVL1220:
 7928              	.L744:
3009:.\FatFs/ff.c  **** 		f_read(fil, p, 1, &rc);
 7929              		.loc 1 3009 0
 7930 0034 B542     		cmp	r5, r6
 7931 0036 EDDB     		blt	.L747
 7932              	.L745:
3017:.\FatFs/ff.c  **** 	}
3018:.\FatFs/ff.c  **** 	*p = 0;
 7933              		.loc 1 3018 0
 7934 0038 0023     		movs	r3, #0
 7935 003a 2370     		strb	r3, [r4]
3019:.\FatFs/ff.c  **** 	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
 7936              		.loc 1 3019 0
 7937 003c 9D42     		cmp	r5, r3
3020:.\FatFs/ff.c  **** }
 7938              		.loc 1 3020 0
 7939 003e 14BF     		ite	ne
 7940 0040 4846     		movne	r0, r9
 7941 0042 1846     		moveq	r0, r3
 7942 0044 03B0     		add	sp, sp, #12
 7943              	.LCFI73:
 7944              		.cfi_def_cfa_offset 28
 7945              		@ sp needed
 7946 0046 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 7947              		.cfi_endproc
 7948              	.LFE75:
 7950 004a 00BF     		.section	.text.f_putc,"ax",%progbits
 7951              		.align	2
 7952              		.global	f_putc
 7953              		.thumb
 7954              		.thumb_func
 7956              	f_putc:
 7957              	.LFB76:
3021:.\FatFs/ff.c  **** 
3022:.\FatFs/ff.c  **** 
3023:.\FatFs/ff.c  **** 
3024:.\FatFs/ff.c  **** #if !_FS_READONLY
3025:.\FatFs/ff.c  **** #include <stdarg.h>
3026:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
3027:.\FatFs/ff.c  **** /* Put a character to the file                                           */
3028:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
3029:.\FatFs/ff.c  **** int f_putc (
3030:.\FatFs/ff.c  **** 	int chr,	/* A character to be output */
3031:.\FatFs/ff.c  **** 	FIL* fil	/* Pointer to the file object */
3032:.\FatFs/ff.c  **** )
3033:.\FatFs/ff.c  **** {
 7958              		.loc 1 3033 0
 7959              		.cfi_startproc
 7960              		@ args = 0, pretend = 0, frame = 8
 7961              		@ frame_needed = 0, uses_anonymous_args = 0
 7962              	.LVL1221:
 7963 0000 30B5     		push	{r4, r5, lr}
 7964              	.LCFI74:
 7965              		.cfi_def_cfa_offset 12
 7966              		.cfi_offset 4, -12
 7967              		.cfi_offset 5, -8
 7968              		.cfi_offset 14, -4
 7969 0002 83B0     		sub	sp, sp, #12
 7970              	.LCFI75:
 7971              		.cfi_def_cfa_offset 24
 7972 0004 0446     		mov	r4, r0
 7973 0006 0D46     		mov	r5, r1
3034:.\FatFs/ff.c  **** 	UINT bw;
3035:.\FatFs/ff.c  **** 	char c;
3036:.\FatFs/ff.c  **** 
3037:.\FatFs/ff.c  **** 
3038:.\FatFs/ff.c  **** #if _USE_STRFUNC >= 2
3039:.\FatFs/ff.c  **** 	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
 7974              		.loc 1 3039 0
 7975 0008 0A28     		cmp	r0, #10
 7976 000a 02D1     		bne	.L752
 7977              		.loc 1 3039 0 is_stmt 0 discriminator 1
 7978 000c 0D20     		movs	r0, #13
 7979              	.LVL1222:
 7980 000e FFF7FEFF 		bl	f_putc
 7981              	.LVL1223:
 7982              	.L752:
3040:.\FatFs/ff.c  **** #endif
3041:.\FatFs/ff.c  **** 	if (!fil) {	/* Special value may be used to switch the destination to any other device */
 7983              		.loc 1 3041 0 is_stmt 1
 7984 0012 75B1     		cbz	r5, .L754
3042:.\FatFs/ff.c  **** 	/*	put_console(chr);	*/
3043:.\FatFs/ff.c  **** 		return chr;
3044:.\FatFs/ff.c  **** 	}
3045:.\FatFs/ff.c  **** 	c = (char)chr;
 7985              		.loc 1 3045 0
 7986 0014 02A9     		add	r1, sp, #8
 7987 0016 01F8054D 		strb	r4, [r1, #-5]!
3046:.\FatFs/ff.c  **** 	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
 7988              		.loc 1 3046 0
 7989 001a 2846     		mov	r0, r5
 7990 001c 0122     		movs	r2, #1
 7991 001e 01AB     		add	r3, sp, #4
 7992 0020 FFF7FEFF 		bl	f_write
 7993              	.LVL1224:
3047:.\FatFs/ff.c  **** 	return bw ? chr : EOF;		/* Return the result */
 7994              		.loc 1 3047 0
 7995 0024 019B     		ldr	r3, [sp, #4]
 7996 0026 002B     		cmp	r3, #0
 7997 0028 14BF     		ite	ne
 7998 002a 2046     		movne	r0, r4
 7999 002c 4FF0FF30 		moveq	r0, #-1
 8000 0030 00E0     		b	.L753
 8001              	.L754:
3043:.\FatFs/ff.c  **** 	}
 8002              		.loc 1 3043 0
 8003 0032 2046     		mov	r0, r4
 8004              	.L753:
3048:.\FatFs/ff.c  **** }
 8005              		.loc 1 3048 0
 8006 0034 03B0     		add	sp, sp, #12
 8007              	.LCFI76:
 8008              		.cfi_def_cfa_offset 12
 8009              		@ sp needed
 8010 0036 30BD     		pop	{r4, r5, pc}
 8011              		.cfi_endproc
 8012              	.LFE76:
 8014              		.section	.text.f_puts,"ax",%progbits
 8015              		.align	2
 8016              		.global	f_puts
 8017              		.thumb
 8018              		.thumb_func
 8020              	f_puts:
 8021              	.LFB77:
3049:.\FatFs/ff.c  **** 
3050:.\FatFs/ff.c  **** 
3051:.\FatFs/ff.c  **** 
3052:.\FatFs/ff.c  **** 
3053:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
3054:.\FatFs/ff.c  **** /* Put a string to the file                                              */
3055:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
3056:.\FatFs/ff.c  **** int f_puts (
3057:.\FatFs/ff.c  **** 	const char* str,	/* Pointer to the string to be output */
3058:.\FatFs/ff.c  **** 	FIL* fil			/* Pointer to the file object */
3059:.\FatFs/ff.c  **** )
3060:.\FatFs/ff.c  **** {
 8022              		.loc 1 3060 0
 8023              		.cfi_startproc
 8024              		@ args = 0, pretend = 0, frame = 0
 8025              		@ frame_needed = 0, uses_anonymous_args = 0
 8026              	.LVL1225:
 8027 0000 70B5     		push	{r4, r5, r6, lr}
 8028              	.LCFI77:
 8029              		.cfi_def_cfa_offset 16
 8030              		.cfi_offset 4, -16
 8031              		.cfi_offset 5, -12
 8032              		.cfi_offset 6, -8
 8033              		.cfi_offset 14, -4
 8034 0002 0546     		mov	r5, r0
 8035              	.LVL1226:
3061:.\FatFs/ff.c  **** 	int n;
3062:.\FatFs/ff.c  **** 
3063:.\FatFs/ff.c  **** 
3064:.\FatFs/ff.c  **** 	for (n = 0; *str; str++, n++) {
 8036              		.loc 1 3064 0
 8037 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 8038              	.LVL1227:
 8039 0006 68B1     		cbz	r0, .L761
 8040 0008 0E46     		mov	r6, r1
 8041 000a 6C1C     		adds	r4, r5, #1
 8042              	.LVL1228:
 8043              	.L760:
3065:.\FatFs/ff.c  **** 		if (f_putc(*str, fil) == EOF) return EOF;
 8044              		.loc 1 3065 0
 8045 000c 3146     		mov	r1, r6
 8046 000e FFF7FEFF 		bl	f_putc
 8047              	.LVL1229:
 8048 0012 B0F1FF3F 		cmp	r0, #-1
 8049 0016 07D0     		beq	.L759
 8050              	.LVL1230:
 8051 0018 631B     		subs	r3, r4, r5
 8052              	.LVL1231:
3064:.\FatFs/ff.c  **** 		if (f_putc(*str, fil) == EOF) return EOF;
 8053              		.loc 1 3064 0 discriminator 2
 8054 001a 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 8055              	.LVL1232:
 8056 001e 0028     		cmp	r0, #0
 8057 0020 F4D1     		bne	.L760
 8058 0022 00E0     		b	.L758
 8059              	.LVL1233:
 8060              	.L761:
3064:.\FatFs/ff.c  **** 		if (f_putc(*str, fil) == EOF) return EOF;
 8061              		.loc 1 3064 0 is_stmt 0
 8062 0024 0023     		movs	r3, #0
 8063              	.LVL1234:
 8064              	.L758:
3066:.\FatFs/ff.c  **** 	}
3067:.\FatFs/ff.c  **** 	return n;
 8065              		.loc 1 3067 0 is_stmt 1
 8066 0026 1846     		mov	r0, r3
 8067              	.L759:
3068:.\FatFs/ff.c  **** }
 8068              		.loc 1 3068 0
 8069 0028 70BD     		pop	{r4, r5, r6, pc}
 8070              		.cfi_endproc
 8071              	.LFE77:
 8073 002a 00BF     		.section	.text.f_printf,"ax",%progbits
 8074              		.align	2
 8075              		.global	f_printf
 8076              		.thumb
 8077              		.thumb_func
 8079              	f_printf:
 8080              	.LFB78:
3069:.\FatFs/ff.c  **** 
3070:.\FatFs/ff.c  **** 
3071:.\FatFs/ff.c  **** 
3072:.\FatFs/ff.c  **** 
3073:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
3074:.\FatFs/ff.c  **** /* Put a formatted string to the file                                    */
3075:.\FatFs/ff.c  **** /*-----------------------------------------------------------------------*/
3076:.\FatFs/ff.c  **** int f_printf (
3077:.\FatFs/ff.c  **** 	FIL* fil,			/* Pointer to the file object */
3078:.\FatFs/ff.c  **** 	const char* str,	/* Pointer to the format string */
3079:.\FatFs/ff.c  **** 	...					/* Optional arguments... */
3080:.\FatFs/ff.c  **** )
3081:.\FatFs/ff.c  **** {
 8081              		.loc 1 3081 0
 8082              		.cfi_startproc
 8083              		@ args = 4, pretend = 12, frame = 24
 8084              		@ frame_needed = 0, uses_anonymous_args = 1
 8085              	.LVL1235:
 8086 0000 0EB4     		push	{r1, r2, r3}
 8087              	.LCFI78:
 8088              		.cfi_def_cfa_offset 12
 8089              		.cfi_offset 1, -12
 8090              		.cfi_offset 2, -8
 8091              		.cfi_offset 3, -4
 8092 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8093              	.LCFI79:
 8094              		.cfi_def_cfa_offset 48
 8095              		.cfi_offset 4, -48
 8096              		.cfi_offset 5, -44
 8097              		.cfi_offset 6, -40
 8098              		.cfi_offset 7, -36
 8099              		.cfi_offset 8, -32
 8100              		.cfi_offset 9, -28
 8101              		.cfi_offset 10, -24
 8102              		.cfi_offset 11, -20
 8103              		.cfi_offset 14, -16
 8104 0006 86B0     		sub	sp, sp, #24
 8105              	.LCFI80:
 8106              		.cfi_def_cfa_offset 72
 8107 0008 0746     		mov	r7, r0
 8108 000a 0FAB     		add	r3, sp, #60
 8109 000c 53F8044B 		ldr	r4, [r3], #4
3082:.\FatFs/ff.c  **** 	va_list arp;
3083:.\FatFs/ff.c  **** 	UCHAR c, f, r;
3084:.\FatFs/ff.c  **** 	ULONG val;
3085:.\FatFs/ff.c  **** 	char s[16];
3086:.\FatFs/ff.c  **** 	int i, w, res, cc;
3087:.\FatFs/ff.c  **** 
3088:.\FatFs/ff.c  **** 
3089:.\FatFs/ff.c  **** 	va_start(arp, str);
 8110              		.loc 1 3089 0
 8111 0010 0593     		str	r3, [sp, #20]
 8112              	.LVL1236:
3090:.\FatFs/ff.c  **** 
3091:.\FatFs/ff.c  **** 	for (cc = res = 0; cc != EOF; res += cc) {
3092:.\FatFs/ff.c  **** 		c = *str++;
 8113              		.loc 1 3092 0
 8114 0012 04F10109 		add	r9, r4, #1
 8115              	.LVL1237:
 8116 0016 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 8117              	.LVL1238:
3093:.\FatFs/ff.c  **** 		if (c == 0) break;			/* End of string */
 8118              		.loc 1 3093 0
 8119 0018 0028     		cmp	r0, #0
 8120 001a 00F0CF80 		beq	.L797
 8121 001e 4FF0000E 		mov	lr, #0
 8122 0022 7546     		mov	r5, lr
3091:.\FatFs/ff.c  **** 		c = *str++;
 8123              		.loc 1 3091 0
 8124 0024 4FF00108 		mov	r8, #1
3094:.\FatFs/ff.c  **** 		if (c != '%') {				/* Non escape character */
3095:.\FatFs/ff.c  **** 			cc = f_putc(c, fil);
3096:.\FatFs/ff.c  **** 			if (cc != EOF) cc = 1;
3097:.\FatFs/ff.c  **** 			continue;
3098:.\FatFs/ff.c  **** 		}
3099:.\FatFs/ff.c  **** 		w = f = 0;
3100:.\FatFs/ff.c  **** 		c = *str++;
3101:.\FatFs/ff.c  **** 		if (c == '0') {				/* Flag: '0' padding */
3102:.\FatFs/ff.c  **** 			f = 1; c = *str++;
3103:.\FatFs/ff.c  **** 		}
3104:.\FatFs/ff.c  **** 		while (c >= '0' && c <= '9') {	/* Precision */
3105:.\FatFs/ff.c  **** 			w = w * 10 + (c - '0');
3106:.\FatFs/ff.c  **** 			c = *str++;
3107:.\FatFs/ff.c  **** 		}
3108:.\FatFs/ff.c  **** 		if (c == 'l') {				/* Prefix: Size is long int */
3109:.\FatFs/ff.c  **** 			f |= 2; c = *str++;
3110:.\FatFs/ff.c  **** 		}
3111:.\FatFs/ff.c  **** 		if (c == 's') {				/* Type is string */
3112:.\FatFs/ff.c  **** 			cc = f_puts(va_arg(arp, char*), fil);
3113:.\FatFs/ff.c  **** 			continue;
3114:.\FatFs/ff.c  **** 		}
3115:.\FatFs/ff.c  **** 		if (c == 'c') {				/* Type is character */
3116:.\FatFs/ff.c  **** 			cc = f_putc(va_arg(arp, int), fil);
3117:.\FatFs/ff.c  **** 			if (cc != EOF) cc = 1;
3118:.\FatFs/ff.c  **** 			continue;
3119:.\FatFs/ff.c  **** 		}
3120:.\FatFs/ff.c  **** 		r = 0;
3121:.\FatFs/ff.c  **** 		if (c == 'd') r = 10;		/* Type is signed decimal */
3122:.\FatFs/ff.c  **** 		if (c == 'u') r = 10;		/* Type is unsigned decimal */
3123:.\FatFs/ff.c  **** 		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
3124:.\FatFs/ff.c  **** 		if (r == 0) break;			/* Unknown type */
3125:.\FatFs/ff.c  **** 		if (f & 2) {				/* Get the value */
3126:.\FatFs/ff.c  **** 			val = (ULONG)va_arg(arp, long);
3127:.\FatFs/ff.c  **** 		} else {
3128:.\FatFs/ff.c  **** 			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
3129:.\FatFs/ff.c  **** 		}
3130:.\FatFs/ff.c  **** 		/* Put numeral string */
3131:.\FatFs/ff.c  **** 		if (c == 'd') {
3132:.\FatFs/ff.c  **** 			if (val & 0x80000000) {
3133:.\FatFs/ff.c  **** 				val = 0 - val;
3134:.\FatFs/ff.c  **** 				f |= 4;
3135:.\FatFs/ff.c  **** 			}
3136:.\FatFs/ff.c  **** 		}
3137:.\FatFs/ff.c  **** 		i = sizeof(s) - 1; s[i] = 0;
 8125              		.loc 1 3137 0
 8126 0028 7646     		mov	r6, lr
 8127 002a 05E0     		b	.L766
 8128              	.LVL1239:
 8129              	.L790:
3092:.\FatFs/ff.c  **** 		if (c == 0) break;			/* End of string */
 8130              		.loc 1 3092 0
 8131 002c 04F10109 		add	r9, r4, #1
 8132              	.LVL1240:
 8133 0030 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 8134              	.LVL1241:
3093:.\FatFs/ff.c  **** 		if (c != '%') {				/* Non escape character */
 8135              		.loc 1 3093 0
 8136 0032 0028     		cmp	r0, #0
 8137 0034 00F0C780 		beq	.L804
 8138              	.LVL1242:
 8139              	.L766:
3094:.\FatFs/ff.c  **** 		if (c != '%') {				/* Non escape character */
 8140              		.loc 1 3094 0
 8141 0038 2528     		cmp	r0, #37
 8142 003a 07D0     		beq	.L767
3095:.\FatFs/ff.c  **** 			if (cc != EOF) cc = 1;
 8143              		.loc 1 3095 0
 8144 003c 3946     		mov	r1, r7
 8145 003e FFF7FEFF 		bl	f_putc
 8146              	.LVL1243:
3096:.\FatFs/ff.c  **** 			continue;
 8147              		.loc 1 3096 0
 8148 0042 B0F1FF3F 		cmp	r0, #-1
 8149 0046 40F0B580 		bne	.L768
 8150 004a ACE0     		b	.L795
 8151              	.LVL1244:
 8152              	.L767:
3100:.\FatFs/ff.c  **** 		if (c == '0') {				/* Flag: '0' padding */
 8153              		.loc 1 3100 0
 8154 004c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 8155              	.LVL1245:
3101:.\FatFs/ff.c  **** 			f = 1; c = *str++;
 8156              		.loc 1 3101 0
 8157 004e 302A     		cmp	r2, #48
 8158 0050 02D0     		beq	.L770
3100:.\FatFs/ff.c  **** 		if (c == '0') {				/* Flag: '0' padding */
 8159              		.loc 1 3100 0
 8160 0052 0234     		adds	r4, r4, #2
 8161              	.LVL1246:
3099:.\FatFs/ff.c  **** 		c = *str++;
 8162              		.loc 1 3099 0
 8163 0054 B246     		mov	r10, r6
 8164 0056 02E0     		b	.L771
 8165              	.LVL1247:
 8166              	.L770:
3102:.\FatFs/ff.c  **** 		}
 8167              		.loc 1 3102 0
 8168 0058 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 8169              	.LVL1248:
 8170 005a 0334     		adds	r4, r4, #3
 8171              	.LVL1249:
 8172 005c C246     		mov	r10, r8
 8173              	.LVL1250:
 8174              	.L771:
3104:.\FatFs/ff.c  **** 			w = w * 10 + (c - '0');
 8175              		.loc 1 3104 0
 8176 005e A2F13003 		sub	r3, r2, #48
 8177 0062 DBB2     		uxtb	r3, r3
 8178 0064 092B     		cmp	r3, #9
 8179 0066 0DD8     		bhi	.L798
 8180 0068 3346     		mov	r3, r6
 8181              	.LVL1251:
 8182              	.L773:
3105:.\FatFs/ff.c  **** 			c = *str++;
 8183              		.loc 1 3105 0
 8184 006a 03EB8303 		add	r3, r3, r3, lsl #2
 8185              	.LVL1252:
 8186 006e 303A     		subs	r2, r2, #48
 8187              	.LVL1253:
 8188 0070 02EB4303 		add	r3, r2, r3, lsl #1
 8189              	.LVL1254:
3106:.\FatFs/ff.c  **** 		}
 8190              		.loc 1 3106 0
 8191 0074 14F8012B 		ldrb	r2, [r4], #1	@ zero_extendqisi2
 8192              	.LVL1255:
3104:.\FatFs/ff.c  **** 			w = w * 10 + (c - '0');
 8193              		.loc 1 3104 0
 8194 0078 A2F13001 		sub	r1, r2, #48
 8195 007c C9B2     		uxtb	r1, r1
 8196 007e 0929     		cmp	r1, #9
 8197 0080 F3D9     		bls	.L773
 8198 0082 00E0     		b	.L772
 8199              	.LVL1256:
 8200              	.L798:
 8201 0084 3346     		mov	r3, r6
 8202              	.LVL1257:
 8203              	.L772:
3108:.\FatFs/ff.c  **** 			f |= 2; c = *str++;
 8204              		.loc 1 3108 0
 8205 0086 6C2A     		cmp	r2, #108
 8206 0088 03D1     		bne	.L774
3109:.\FatFs/ff.c  **** 		}
 8207              		.loc 1 3109 0
 8208 008a 4AF0020A 		orr	r10, r10, #2
 8209              	.LVL1258:
 8210 008e 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 8211              	.LVL1259:
 8212 0090 0134     		adds	r4, r4, #1
 8213              	.LVL1260:
 8214              	.L774:
3111:.\FatFs/ff.c  **** 			cc = f_puts(va_arg(arp, char*), fil);
 8215              		.loc 1 3111 0
 8216 0092 732A     		cmp	r2, #115
 8217 0094 08D1     		bne	.L775
3112:.\FatFs/ff.c  **** 			continue;
 8218              		.loc 1 3112 0
 8219 0096 059B     		ldr	r3, [sp, #20]
 8220 0098 1A1D     		adds	r2, r3, #4
 8221              	.LVL1261:
 8222 009a 0592     		str	r2, [sp, #20]
 8223 009c 1868     		ldr	r0, [r3]
 8224 009e 3946     		mov	r1, r7
 8225 00a0 FFF7FEFF 		bl	f_puts
 8226              	.LVL1262:
 8227 00a4 8646     		mov	lr, r0
 8228              	.LVL1263:
3113:.\FatFs/ff.c  **** 		}
 8229              		.loc 1 3113 0
 8230 00a6 75E0     		b	.L776
 8231              	.LVL1264:
 8232              	.L775:
3115:.\FatFs/ff.c  **** 			cc = f_putc(va_arg(arp, int), fil);
 8233              		.loc 1 3115 0
 8234 00a8 632A     		cmp	r2, #99
 8235 00aa 0AD1     		bne	.L777
3116:.\FatFs/ff.c  **** 			if (cc != EOF) cc = 1;
 8236              		.loc 1 3116 0
 8237 00ac 059B     		ldr	r3, [sp, #20]
 8238 00ae 1A1D     		adds	r2, r3, #4
 8239              	.LVL1265:
 8240 00b0 0592     		str	r2, [sp, #20]
 8241 00b2 1868     		ldr	r0, [r3]
 8242 00b4 3946     		mov	r1, r7
 8243 00b6 FFF7FEFF 		bl	f_putc
 8244              	.LVL1266:
3117:.\FatFs/ff.c  **** 			continue;
 8245              		.loc 1 3117 0
 8246 00ba B0F1FF3F 		cmp	r0, #-1
 8247 00be 78D1     		bne	.L799
 8248 00c0 71E0     		b	.L795
 8249              	.LVL1267:
 8250              	.L777:
3121:.\FatFs/ff.c  **** 		if (c == 'u') r = 10;		/* Type is unsigned decimal */
 8251              		.loc 1 3121 0
 8252 00c2 642A     		cmp	r2, #100
 8253 00c4 04D0     		beq	.L800
3122:.\FatFs/ff.c  **** 		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
 8254              		.loc 1 3122 0
 8255 00c6 752A     		cmp	r2, #117
 8256 00c8 7AD1     		bne	.L779
 8257 00ca 4FF00A09 		mov	r9, #10
 8258 00ce 04E0     		b	.L778
 8259              	.L800:
3121:.\FatFs/ff.c  **** 		if (c == 'u') r = 10;		/* Type is unsigned decimal */
 8260              		.loc 1 3121 0
 8261 00d0 4FF00A09 		mov	r9, #10
 8262 00d4 01E0     		b	.L778
 8263              	.L803:
3123:.\FatFs/ff.c  **** 		if (r == 0) break;			/* Unknown type */
 8264              		.loc 1 3123 0
 8265 00d6 4FF01009 		mov	r9, #16
 8266              	.L778:
 8267              	.LVL1268:
3125:.\FatFs/ff.c  **** 			val = (ULONG)va_arg(arp, long);
 8268              		.loc 1 3125 0
 8269 00da 1AF0020F 		tst	r10, #2
 8270 00de 06D0     		beq	.L780
3126:.\FatFs/ff.c  **** 		} else {
 8271              		.loc 1 3126 0
 8272 00e0 0599     		ldr	r1, [sp, #20]
 8273 00e2 081D     		adds	r0, r1, #4
 8274 00e4 0590     		str	r0, [sp, #20]
 8275 00e6 0868     		ldr	r0, [r1]
 8276              	.LVL1269:
3131:.\FatFs/ff.c  **** 			if (val & 0x80000000) {
 8277              		.loc 1 3131 0
 8278 00e8 642A     		cmp	r2, #100
 8279 00ea 11D1     		bne	.L782
 8280 00ec 0BE0     		b	.L781
 8281              	.LVL1270:
 8282              	.L780:
3128:.\FatFs/ff.c  **** 		}
 8283              		.loc 1 3128 0
 8284 00ee 642A     		cmp	r2, #100
 8285 00f0 04D1     		bne	.L783
3128:.\FatFs/ff.c  **** 		}
 8286              		.loc 1 3128 0 is_stmt 0 discriminator 1
 8287 00f2 059A     		ldr	r2, [sp, #20]
 8288              	.LVL1271:
 8289 00f4 111D     		adds	r1, r2, #4
 8290 00f6 0591     		str	r1, [sp, #20]
 8291 00f8 1068     		ldr	r0, [r2]
 8292              	.LVL1272:
 8293 00fa 04E0     		b	.L781
 8294              	.LVL1273:
 8295              	.L783:
3128:.\FatFs/ff.c  **** 		}
 8296              		.loc 1 3128 0 discriminator 2
 8297 00fc 059A     		ldr	r2, [sp, #20]
 8298              	.LVL1274:
 8299 00fe 111D     		adds	r1, r2, #4
 8300 0100 0591     		str	r1, [sp, #20]
 8301 0102 1068     		ldr	r0, [r2]
 8302              	.LVL1275:
 8303 0104 04E0     		b	.L782
 8304              	.L781:
3132:.\FatFs/ff.c  **** 				val = 0 - val;
 8305              		.loc 1 3132 0 is_stmt 1
 8306 0106 0028     		cmp	r0, #0
3133:.\FatFs/ff.c  **** 				f |= 4;
 8307              		.loc 1 3133 0
 8308 0108 BCBF     		itt	lt
 8309 010a 4042     		rsblt	r0, r0, #0
 8310              	.LVL1276:
3134:.\FatFs/ff.c  **** 			}
 8311              		.loc 1 3134 0
 8312 010c 4AF0040A 		orrlt	r10, r10, #4
 8313              	.LVL1277:
 8314              	.L782:
 8315              		.loc 1 3137 0
 8316 0110 0DF1180C 		add	ip, sp, #24
 8317 0114 0CF8056D 		strb	r6, [ip, #-5]!
 8318 0118 4FF00F0E 		mov	lr, #15
3138:.\FatFs/ff.c  **** 		do {
3139:.\FatFs/ff.c  **** 			c = (UCHAR)(val % r + '0');
 8319              		.loc 1 3139 0
 8320 011c CB46     		mov	fp, r9
 8321 011e 00E0     		b	.L786
 8322              	.LVL1278:
 8323              	.L801:
3140:.\FatFs/ff.c  **** 			if (c > '9') c += 7;
3141:.\FatFs/ff.c  **** 			s[--i] = c;
 8324              		.loc 1 3141 0
 8325 0120 9646     		mov	lr, r2
 8326              	.LVL1279:
 8327              	.L786:
3139:.\FatFs/ff.c  **** 			if (c > '9') c += 7;
 8328              		.loc 1 3139 0
 8329 0122 B0FBF9F2 		udiv	r2, r0, r9
 8330 0126 09FB1202 		mls	r2, r9, r2, r0
 8331 012a D2B2     		uxtb	r2, r2
 8332 012c 02F13001 		add	r1, r2, #48
 8333 0130 C9B2     		uxtb	r1, r1
 8334              	.LVL1280:
3140:.\FatFs/ff.c  **** 			if (c > '9') c += 7;
 8335              		.loc 1 3140 0
 8336 0132 3929     		cmp	r1, #57
 8337 0134 84BF     		itt	hi
 8338 0136 3732     		addhi	r2, r2, #55
 8339              	.LVL1281:
 8340 0138 D1B2     		uxtbhi	r1, r2
 8341              	.LVL1282:
 8342              		.loc 1 3141 0
 8343 013a 0CF8011D 		strb	r1, [ip, #-1]!
3142:.\FatFs/ff.c  **** 			val /= r;
 8344              		.loc 1 3142 0
 8345 013e B0FBFBF0 		udiv	r0, r0, fp
 8346              	.LVL1283:
3143:.\FatFs/ff.c  **** 		} while (i && val);
 8347              		.loc 1 3143 0
 8348 0142 BEF10102 		subs	r2, lr, #1
 8349              	.LVL1284:
 8350 0146 1FD0     		beq	.L785
 8351              		.loc 1 3143 0 is_stmt 0 discriminator 1
 8352 0148 0028     		cmp	r0, #0
 8353 014a E9D1     		bne	.L801
3144:.\FatFs/ff.c  **** 		if (i && (f & 4)) s[--i] = '-';
 8354              		.loc 1 3144 0 is_stmt 1 discriminator 1
 8355 014c 1AF0040F 		tst	r10, #4
 8356 0150 2CD0     		beq	.L787
 8357              		.loc 1 3144 0 is_stmt 0 discriminator 2
 8358 0152 AEF10202 		sub	r2, lr, #2
 8359              	.LVL1285:
 8360 0156 06A9     		add	r1, sp, #24
 8361 0158 1144     		add	r1, r1, r2
 8362 015a 2D20     		movs	r0, #45
 8363              	.LVL1286:
 8364 015c 01F8140C 		strb	r0, [r1, #-20]
3145:.\FatFs/ff.c  **** 		w = sizeof(s) - 1 - w;
 8365              		.loc 1 3145 0 is_stmt 1 discriminator 2
 8366 0160 C3F10F03 		rsb	r3, r3, #15
 8367              	.LVL1287:
3146:.\FatFs/ff.c  **** 		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
 8368              		.loc 1 3146 0 discriminator 2
 8369 0164 82B1     		cbz	r2, .L785
 8370              	.L794:
 8371              		.loc 1 3146 0 is_stmt 0
 8372 0166 9A42     		cmp	r2, r3
 8373 0168 0EDD     		ble	.L785
 8374 016a 01A9     		add	r1, sp, #4
 8375 016c 1144     		add	r1, r1, r2
 8376 016e 0AF0010A 		and	r10, r10, #1
 8377              	.LVL1288:
 8378              	.L789:
 8379              		.loc 1 3146 0 discriminator 7
 8380 0172 BAF1000F 		cmp	r10, #0
 8381 0176 14BF     		ite	ne
 8382 0178 3020     		movne	r0, #48
 8383 017a 2020     		moveq	r0, #32
 8384 017c 01F8010D 		strb	r0, [r1, #-1]!
 8385 0180 013A     		subs	r2, r2, #1
 8386              	.LVL1289:
 8387 0182 01D0     		beq	.L785
 8388              		.loc 1 3146 0 discriminator 6
 8389 0184 9A42     		cmp	r2, r3
 8390 0186 F4DC     		bgt	.L789
 8391              	.LVL1290:
 8392              	.L785:
3147:.\FatFs/ff.c  **** 		cc = f_puts(&s[i], fil);
 8393              		.loc 1 3147 0 is_stmt 1
 8394 0188 01AB     		add	r3, sp, #4
 8395 018a 9818     		adds	r0, r3, r2
 8396 018c 3946     		mov	r1, r7
 8397 018e FFF7FEFF 		bl	f_puts
 8398              	.LVL1291:
 8399 0192 8646     		mov	lr, r0
 8400              	.LVL1292:
 8401              	.L776:
3091:.\FatFs/ff.c  **** 		c = *str++;
 8402              		.loc 1 3091 0 discriminator 2
 8403 0194 7544     		add	r5, r5, lr
 8404              	.LVL1293:
 8405 0196 BEF1FF3F 		cmp	lr, #-1
 8406 019a 7FF447AF 		bne	.L790
 8407 019e 02E0     		b	.L795
 8408              	.LVL1294:
 8409              	.L809:
3148:.\FatFs/ff.c  **** 	}
3149:.\FatFs/ff.c  **** 
3150:.\FatFs/ff.c  **** 	va_end(arp);
3151:.\FatFs/ff.c  **** 	return (cc == EOF) ? cc : res;
 8410              		.loc 1 3151 0
 8411 01a0 BEF1FF3F 		cmp	lr, #-1
 8412 01a4 0FD1     		bne	.L804
 8413              	.LVL1295:
 8414              	.L795:
 8415              		.loc 1 3151 0 is_stmt 0 discriminator 1
 8416 01a6 4FF0FF35 		mov	r5, #-1
 8417              	.LVL1296:
 8418 01aa 0CE0     		b	.L804
 8419              	.LVL1297:
 8420              	.L787:
3145:.\FatFs/ff.c  **** 		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
 8421              		.loc 1 3145 0 is_stmt 1
 8422 01ac C3F10F03 		rsb	r3, r3, #15
 8423              	.LVL1298:
 8424 01b0 D9E7     		b	.L794
 8425              	.LVL1299:
 8426              	.L799:
 8427 01b2 A146     		mov	r9, r4
 8428              	.LVL1300:
 8429              	.L768:
3091:.\FatFs/ff.c  **** 		c = *str++;
 8430              		.loc 1 3091 0
 8431 01b4 0135     		adds	r5, r5, #1
 8432              	.LVL1301:
 8433 01b6 4C46     		mov	r4, r9
 8434 01b8 C646     		mov	lr, r8
 8435 01ba 37E7     		b	.L790
 8436              	.LVL1302:
 8437              	.L797:
 8438 01bc 0025     		movs	r5, #0
 8439 01be 02E0     		b	.L804
 8440              	.LVL1303:
 8441              	.L779:
3123:.\FatFs/ff.c  **** 		if (r == 0) break;			/* Unknown type */
 8442              		.loc 1 3123 0
 8443 01c0 582A     		cmp	r2, #88
 8444 01c2 88D0     		beq	.L803
 8445 01c4 ECE7     		b	.L809
 8446              	.LVL1304:
 8447              	.L804:
3152:.\FatFs/ff.c  **** }
 8448              		.loc 1 3152 0
 8449 01c6 2846     		mov	r0, r5
 8450 01c8 06B0     		add	sp, sp, #24
 8451              	.LCFI81:
 8452              		.cfi_def_cfa_offset 48
 8453              		@ sp needed
 8454 01ca BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 8455              	.LCFI82:
 8456              		.cfi_restore 14
 8457              		.cfi_restore 11
 8458              		.cfi_restore 10
 8459              		.cfi_restore 9
 8460              		.cfi_restore 8
 8461              		.cfi_restore 7
 8462              		.cfi_restore 6
 8463              		.cfi_restore 5
 8464              		.cfi_restore 4
 8465              		.cfi_def_cfa_offset 12
 8466              	.LVL1305:
 8467 01ce 03B0     		add	sp, sp, #12
 8468              	.LCFI83:
 8469              		.cfi_restore 3
 8470              		.cfi_restore 2
 8471              		.cfi_restore 1
 8472              		.cfi_def_cfa_offset 0
 8473 01d0 7047     		bx	lr
 8474              		.cfi_endproc
 8475              	.LFE78:
 8477 01d2 00BF     		.section	.rodata.sstbl.7012,"a",%progbits
 8478              		.align	2
 8479              		.set	.LANCHOR5,. + 0
 8482              	sstbl.7012:
 8483 0000 00401F00 		.word	2048000
 8484 0004 00A00F00 		.word	1024000
 8485 0008 00D00700 		.word	512000
 8486 000c 00E80300 		.word	256000
 8487 0010 00F40100 		.word	128000
 8488 0014 00FA0000 		.word	64000
 8489 0018 007D0000 		.word	32000
 8490 001c 803E0000 		.word	16000
 8491 0020 401F0000 		.word	8000
 8492 0024 A00F0000 		.word	4000
 8493 0028 00000000 		.word	0
 8494              		.section	.bss.Fsid,"aw",%nobits
 8495              		.align	1
 8496              		.set	.LANCHOR3,. + 0
 8499              	Fsid:
 8500 0000 0000     		.space	2
 8501              		.section	.rodata.str1.4,"aMS",%progbits,1
 8502              		.align	2
 8503              	.LC0:
 8504 0000 222A3A3C 		.ascii	"\"*:<>?|\177\000"
 8504      3E3F7C7F 
 8504      00
 8505 0009 000000   		.space	3
 8506              	.LC1:
 8507 000c 2B2C3B5B 		.ascii	"+,;[=]\000"
 8507      3D5D00
 8508 0013 00       		.space	1
 8509              	.LC2:
 8510 0014 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 8510      414D4520 
 8510      20202046 
 8510      41542020 
 8510      20202000 
 8511              	.LC3:
 8512 0028 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 8512      414D4520 
 8512      20202046 
 8512      41543332 
 8512      20202000 
 8513              		.section	.bss.LfnBuf,"aw",%nobits
 8514              		.align	2
 8515              		.set	.LANCHOR4,. + 0
 8518              	LfnBuf:
 8519 0000 00000000 		.space	512
 8519      00000000 
 8519      00000000 
 8519      00000000 
 8519      00000000 
 8520              		.section	.rodata.LfnOfs,"a",%progbits
 8521              		.align	2
 8522              		.set	.LANCHOR0,. + 0
 8525              	LfnOfs:
 8526 0000 01       		.byte	1
 8527 0001 03       		.byte	3
 8528 0002 05       		.byte	5
 8529 0003 07       		.byte	7
 8530 0004 09       		.byte	9
 8531 0005 0E       		.byte	14
 8532 0006 10       		.byte	16
 8533 0007 12       		.byte	18
 8534 0008 14       		.byte	20
 8535 0009 16       		.byte	22
 8536 000a 18       		.byte	24
 8537 000b 1C       		.byte	28
 8538 000c 1E       		.byte	30
 8539              		.section	.rodata.cvt.6755,"a",%progbits
 8540              		.align	2
 8541              		.set	.LANCHOR1,. + 0
 8544              	cvt.6755:
 8545 0000 80       		.byte	-128
 8546 0001 81       		.byte	-127
 8547 0002 82       		.byte	-126
 8548 0003 83       		.byte	-125
 8549 0004 84       		.byte	-124
 8550 0005 85       		.byte	-123
 8551 0006 86       		.byte	-122
 8552 0007 87       		.byte	-121
 8553 0008 88       		.byte	-120
 8554 0009 89       		.byte	-119
 8555 000a 8A       		.byte	-118
 8556 000b 8B       		.byte	-117
 8557 000c 8C       		.byte	-116
 8558 000d 8D       		.byte	-115
 8559 000e 8E       		.byte	-114
 8560 000f 8F       		.byte	-113
 8561 0010 90       		.byte	-112
 8562 0011 91       		.byte	-111
 8563 0012 92       		.byte	-110
 8564 0013 93       		.byte	-109
 8565 0014 94       		.byte	-108
 8566 0015 95       		.byte	-107
 8567 0016 96       		.byte	-106
 8568 0017 97       		.byte	-105
 8569 0018 98       		.byte	-104
 8570 0019 99       		.byte	-103
 8571 001a AD       		.byte	-83
 8572 001b 9B       		.byte	-101
 8573 001c 8C       		.byte	-116
 8574 001d 9D       		.byte	-99
 8575 001e AE       		.byte	-82
 8576 001f 9F       		.byte	-97
 8577 0020 A0       		.byte	-96
 8578 0021 21       		.byte	33
 8579 0022 A2       		.byte	-94
 8580 0023 A3       		.byte	-93
 8581 0024 A4       		.byte	-92
 8582 0025 A5       		.byte	-91
 8583 0026 A6       		.byte	-90
 8584 0027 A7       		.byte	-89
 8585 0028 A8       		.byte	-88
 8586 0029 A9       		.byte	-87
 8587 002a AA       		.byte	-86
 8588 002b AB       		.byte	-85
 8589 002c AC       		.byte	-84
 8590 002d AD       		.byte	-83
 8591 002e AE       		.byte	-82
 8592 002f AF       		.byte	-81
 8593 0030 B0       		.byte	-80
 8594 0031 B1       		.byte	-79
 8595 0032 B2       		.byte	-78
 8596 0033 B3       		.byte	-77
 8597 0034 B4       		.byte	-76
 8598 0035 B5       		.byte	-75
 8599 0036 B6       		.byte	-74
 8600 0037 B7       		.byte	-73
 8601 0038 B8       		.byte	-72
 8602 0039 B9       		.byte	-71
 8603 003a BA       		.byte	-70
 8604 003b BB       		.byte	-69
 8605 003c BC       		.byte	-68
 8606 003d BD       		.byte	-67
 8607 003e BE       		.byte	-66
 8608 003f BF       		.byte	-65
 8609 0040 C0       		.byte	-64
 8610 0041 C1       		.byte	-63
 8611 0042 C2       		.byte	-62
 8612 0043 C3       		.byte	-61
 8613 0044 C4       		.byte	-60
 8614 0045 C5       		.byte	-59
 8615 0046 C6       		.byte	-58
 8616 0047 C7       		.byte	-57
 8617 0048 C8       		.byte	-56
 8618 0049 C9       		.byte	-55
 8619 004a CA       		.byte	-54
 8620 004b CB       		.byte	-53
 8621 004c CC       		.byte	-52
 8622 004d CD       		.byte	-51
 8623 004e CE       		.byte	-50
 8624 004f CF       		.byte	-49
 8625 0050 D0       		.byte	-48
 8626 0051 D1       		.byte	-47
 8627 0052 D2       		.byte	-46
 8628 0053 D3       		.byte	-45
 8629 0054 D4       		.byte	-44
 8630 0055 D5       		.byte	-43
 8631 0056 D6       		.byte	-42
 8632 0057 D7       		.byte	-41
 8633 0058 D8       		.byte	-40
 8634 0059 D9       		.byte	-39
 8635 005a DA       		.byte	-38
 8636 005b DB       		.byte	-37
 8637 005c DC       		.byte	-36
 8638 005d DD       		.byte	-35
 8639 005e DE       		.byte	-34
 8640 005f DF       		.byte	-33
 8641 0060 C0       		.byte	-64
 8642 0061 C1       		.byte	-63
 8643 0062 C2       		.byte	-62
 8644 0063 C3       		.byte	-61
 8645 0064 C4       		.byte	-60
 8646 0065 C5       		.byte	-59
 8647 0066 C6       		.byte	-58
 8648 0067 C7       		.byte	-57
 8649 0068 C8       		.byte	-56
 8650 0069 C9       		.byte	-55
 8651 006a CA       		.byte	-54
 8652 006b CB       		.byte	-53
 8653 006c CC       		.byte	-52
 8654 006d CD       		.byte	-51
 8655 006e CE       		.byte	-50
 8656 006f CF       		.byte	-49
 8657 0070 D0       		.byte	-48
 8658 0071 D1       		.byte	-47
 8659 0072 D2       		.byte	-46
 8660 0073 D3       		.byte	-45
 8661 0074 D4       		.byte	-44
 8662 0075 D5       		.byte	-43
 8663 0076 D6       		.byte	-42
 8664 0077 F7       		.byte	-9
 8665 0078 D8       		.byte	-40
 8666 0079 D9       		.byte	-39
 8667 007a DA       		.byte	-38
 8668 007b DB       		.byte	-37
 8669 007c DC       		.byte	-36
 8670 007d DD       		.byte	-35
 8671 007e DE       		.byte	-34
 8672 007f 9F       		.byte	-97
 8673              		.section	.bss.FatFs,"aw",%nobits
 8674              		.align	2
 8675              		.set	.LANCHOR2,. + 0
 8678              	FatFs:
 8679 0000 00000000 		.space	4
 8680              		.section	.rodata.cstbl.7013,"a",%progbits
 8681              		.align	2
 8682              		.set	.LANCHOR6,. + 0
 8685              	cstbl.7013:
 8686 0000 0080     		.short	-32768
 8687 0002 0040     		.short	16384
 8688 0004 0020     		.short	8192
 8689 0006 0010     		.short	4096
 8690 0008 0008     		.short	2048
 8691 000a 0040     		.short	16384
 8692 000c 0020     		.short	8192
 8693 000e 0010     		.short	4096
 8694 0010 0008     		.short	2048
 8695 0012 0004     		.short	1024
 8696 0014 0002     		.short	512
 8697              		.text
 8698              	.Letext0:
 8699              		.file 2 ".\\FatFs/integer.h"
 8700              		.file 3 ".\\FatFs/ff.h"
 8701              		.file 4 ".\\FatFs/diskio.h"
 8702              		.file 5 "d:\\atomic\\sublime\\gnu tools arm embedded\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\std
 8703              		.file 6 "<built-in>"
 8704              		.file 7 ".\\CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:19     .text.mem_cpy:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:23     .text.mem_cpy:00000000 mem_cpy
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:53     .text.mem_set:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:57     .text.mem_set:00000000 mem_set
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:82     .text.sum_sfn:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:86     .text.sum_sfn:00000000 sum_sfn
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:118    .text.move_window:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:122    .text.move_window:00000000 move_window
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:240    .text.check_fs:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:244    .text.check_fs:00000000 check_fs
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:305    .text.check_fs:0000004c $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:310    .text.validate:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:314    .text.validate:00000000 validate
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:379    .text.get_fileinfo:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:383    .text.get_fileinfo:00000000 get_fileinfo
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:647    .text.sync:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:651    .text.sync:00000000 sync
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:737    .text.sync:00000074 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:742    .text.get_fat:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:747    .text.get_fat:00000000 get_fat
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:906    .text.put_fat:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:911    .text.put_fat:00000000 put_fat
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1112   .text.create_chain:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1116   .text.create_chain:00000000 create_chain
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1292   .text.remove_chain:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1296   .text.remove_chain:00000000 remove_chain
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1400   .text.clust2sect:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1405   .text.clust2sect:00000000 clust2sect
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1434   .text.dir_seek:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1438   .text.dir_seek:00000000 dir_seek
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1589   .text.dir_next:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1593   .text.dir_next:00000000 dir_next
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1840   .text.dir_find:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:1844   .text.dir_find:00000000 dir_find
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2140   .text.dir_find:00000160 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2145   .text.follow_path:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2149   .text.follow_path:00000000 follow_path
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2724   .text.follow_path:000002e4 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2731   .text.dir_read:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2735   .text.dir_read:00000000 dir_read
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2993   .text.dir_read:0000011c $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:2998   .text.dir_remove:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3002   .text.dir_remove:00000000 dir_remove
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3084   .text.gen_numname:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3089   .text.gen_numname:00000000 gen_numname
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3234   .text.gen_numname:000000a4 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3239   .text.dir_register:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3243   .text.dir_register:00000000 dir_register
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3659   .text.dir_register:000001f8 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3665   .text.chk_mounted:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:3670   .text.chk_mounted:00000000 chk_mounted
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4025   .text.chk_mounted:000001b4 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4032   .text.f_mount:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4037   .text.f_mount:00000000 f_mount
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4081   .text.f_mount:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4086   .text.f_open:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4091   .text.f_open:00000000 f_open
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4360   .text.f_open:00000130 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4365   .text.f_read:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4370   .text.f_read:00000000 f_read
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4676   .text.f_write:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:4681   .text.f_write:00000000 f_write
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5017   .text.f_sync:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5022   .text.f_sync:00000000 f_sync
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5132   .text.f_close:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5137   .text.f_close:00000000 f_close
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5168   .text.f_lseek:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5173   .text.f_lseek:00000000 f_lseek
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5517   .text.f_opendir:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5522   .text.f_opendir:00000000 f_opendir
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5623   .text.f_opendir:00000068 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5628   .text.f_readdir:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5633   .text.f_readdir:00000000 f_readdir
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5739   .text.f_readdir:00000064 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5744   .text.f_stat:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5749   .text.f_stat:00000000 f_stat
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5821   .text.f_stat:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5826   .text.f_getfree:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:5831   .text.f_getfree:00000000 f_getfree
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6037   .text.f_truncate:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6042   .text.f_truncate:00000000 f_truncate
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6184   .text.f_unlink:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6189   .text.f_unlink:00000000 f_unlink
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6352   .text.f_unlink:000000a4 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6357   .text.f_mkdir:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6362   .text.f_mkdir:00000000 f_mkdir
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6650   .text.f_mkdir:00000170 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6655   .text.f_chmod:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6660   .text.f_chmod:00000000 f_chmod
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6750   .text.f_chmod:0000005c $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6755   .text.f_utime:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6760   .text.f_utime:00000000 f_utime
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6845   .text.f_utime:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6850   .text.f_rename:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:6855   .text.f_rename:00000000 f_rename
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7073   .text.f_rename:00000104 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7078   .text.f_mkfs:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7083   .text.f_mkfs:00000000 f_mkfs
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7548   .text.f_mkfs:00000310 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7559   .text.f_mkfs:00000330 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7858   .text.f_mkfs:000004ac $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7864   .text.f_gets:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7869   .text.f_gets:00000000 f_gets
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7951   .text.f_putc:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:7956   .text.f_putc:00000000 f_putc
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8015   .text.f_puts:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8020   .text.f_puts:00000000 f_puts
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8074   .text.f_printf:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8079   .text.f_printf:00000000 f_printf
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8478   .rodata.sstbl.7012:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8482   .rodata.sstbl.7012:00000000 sstbl.7012
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8495   .bss.Fsid:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8499   .bss.Fsid:00000000 Fsid
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8502   .rodata.str1.4:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8514   .bss.LfnBuf:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8518   .bss.LfnBuf:00000000 LfnBuf
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8521   .rodata.LfnOfs:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8525   .rodata.LfnOfs:00000000 LfnOfs
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8540   .rodata.cvt.6755:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8544   .rodata.cvt.6755:00000000 cvt.6755
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8674   .bss.FatFs:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8678   .bss.FatFs:00000000 FatFs
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8681   .rodata.cstbl.7013:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccNgKtez.s:8685   .rodata.cstbl.7013:00000000 cstbl.7013
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
disk_write
disk_read
disk_status
ff_convert
disk_ioctl
ff_wtoupper
disk_initialize
get_fattime
